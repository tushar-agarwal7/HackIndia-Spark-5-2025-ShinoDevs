This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: app, components, contracts, lib, prisma/schema.prisma
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
contracts/
  Lock.sol
  MockUSDC.sol
  StakingChallenge.sol

================================================================
Files
================================================================

================
File: contracts/Lock.sol
================
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

// Uncomment this line to use console.log
// import "hardhat/console.sol";

contract Lock {
    uint public unlockTime;
    address payable public owner;

    event Withdrawal(uint amount, uint when);

    constructor(uint _unlockTime) payable {
        require(
            block.timestamp < _unlockTime,
            "Unlock time should be in the future"
        );

        unlockTime = _unlockTime;
        owner = payable(msg.sender);
    }

    function withdraw() public {
        // Uncomment this line, and the import of "hardhat/console.sol", to print a log in your terminal
        // console.log("Unlock time is %o and block timestamp is %o", unlockTime, block.timestamp);

        require(block.timestamp >= unlockTime, "You can't withdraw yet");
        require(msg.sender == owner, "You aren't the owner");

        emit Withdrawal(address(this).balance, block.timestamp);

        owner.transfer(address(this).balance);
    }
}

================
File: contracts/MockUSDC.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MockUSDC is ERC20 {
    uint8 private _decimals = 6; // USDC uses 6 decimals
    
    constructor() ERC20("USDC Test Token", "USDC") {
        // Mint 1 million USDC to deployer
        _mint(msg.sender, 1000000 * 10**_decimals);
    }
    
    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }
    
    // For testing - anyone can mint tokens
    function mint(address to, uint256 amount) external {
        _mint(to, amount);
    }
}

================
File: contracts/StakingChallenge.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract StakingChallenge is Ownable, ReentrancyGuard {
    IERC20 public usdcToken;
    
    struct Challenge {
        string id;
        uint256 stakeAmount;
        uint256 yieldBps; // Basis points (1/100 of a percent)
        bool isHardcore;
        uint256 durationDays;
        bool isActive;
        address creator;
        uint256 createdAt;
    }
    
    struct Stake {
        string challengeId;
        uint256 amount;
        uint256 timestamp;
        bool isHardcore;
        bool isCompleted;
        bool isFailed;
    }
    
    mapping(string => Challenge) public challenges;
    mapping(address => mapping(string => Stake)) public stakes;
    mapping(address => string[]) public userActiveChallenges;
    
    uint256 public totalStaked;
    uint256 public totalYieldGenerated;
    uint256 public totalChallenges;
    
    // Events
    event ChallengeRegistered(string challengeId, address indexed creator, uint256 stakeAmount, uint256 yieldBps, bool isHardcore);
    event StakeReceived(address indexed staker, string challengeId, uint256 amount, bool isHardcore);
    event ChallengeCompleted(address indexed staker, string challengeId, uint256 reward);
    event ChallengeFailed(address indexed staker, string challengeId);
    
    constructor(address _usdcToken) {
        usdcToken = IERC20(_usdcToken);
    }
    
    /**
     * @dev Registers a new language learning challenge
     * @param challengeId The unique identifier of the challenge
     * @param stakeAmount The amount required to stake (in USDC cents)
     * @param yieldBps The yield percentage in basis points (e.g., 500 = 5%)
     * @param isHardcore Whether the challenge is hardcore (stake can be lost) or not
     * @param durationDays The duration of the challenge in days
     */
    function registerChallenge(
        string memory challengeId,
        uint256 stakeAmount,
        uint256 yieldBps,
        bool isHardcore,
        uint256 durationDays
    ) external nonReentrant {
        require(bytes(challengeId).length > 0, "Challenge ID cannot be empty");
        require(stakeAmount > 0, "Stake amount must be greater than 0");
        require(durationDays > 0, "Duration must be greater than 0");
        require(yieldBps <= 2000, "Yield cannot exceed 20%"); // Max 20% yield
        
        // Check if challenge already exists
        require(challenges[challengeId].createdAt == 0, "Challenge ID already exists");
        
        // Register the challenge
        challenges[challengeId] = Challenge({
            id: challengeId,
            stakeAmount: stakeAmount,
            yieldBps: yieldBps,
            isHardcore: isHardcore,
            durationDays: durationDays,
            isActive: true,
            creator: msg.sender,
            createdAt: block.timestamp
        });
        
        totalChallenges++;
        
        emit ChallengeRegistered(challengeId, msg.sender, stakeAmount, yieldBps, isHardcore);
    }
    
    /**
     * @dev Allows a user to stake USDC for a language learning challenge
     * @param challengeId The unique identifier of the challenge
     * @param amount The amount of USDC to stake
     * @param isHardcore Whether the challenge is hardcore (stake can be lost) or not
     */
// Excerpt from StakingChallenge.sol - update the stakeForChallenge function
function stakeForChallenge(string memory challengeId, uint256 amount, bool isHardcore) external nonReentrant {
    require(amount > 0, "Stake amount must be greater than 0");
    
    // For development: allow re-staking in case of errors
    if (stakes[msg.sender][challengeId].amount > 0) {
        // Remove previous stake
        totalStaked -= stakes[msg.sender][challengeId].amount;
        
        // Clean up old mapping
        delete stakes[msg.sender][challengeId];
        
        // Remove from active challenges
        _removeActiveChallenge(msg.sender, challengeId);
    }
    
    // Check if challenge exists
    Challenge memory challenge = challenges[challengeId];
    if (challenge.createdAt == 0) {
        // Auto-create challenge if it doesn't exist (for development)
        challenges[challengeId] = Challenge({
            id: challengeId,
            stakeAmount: amount,
            yieldBps: 500, // 5%
            isHardcore: isHardcore,
            durationDays: 30,
            isActive: true,
            creator: msg.sender,
            createdAt: block.timestamp
        });
        
        totalChallenges++;
        emit ChallengeRegistered(challengeId, msg.sender, amount, 500, isHardcore);
        
        // Update local variable
        challenge = challenges[challengeId];
    }
    
    require(challenge.isActive, "Challenge is not active");
    
    // Transfer USDC from user to contract
    require(usdcToken.transferFrom(msg.sender, address(this), amount), "USDC transfer failed");
    
    // Create stake record
    stakes[msg.sender][challengeId] = Stake({
        challengeId: challengeId,
        amount: amount,
        timestamp: block.timestamp,
        isHardcore: isHardcore,
        isCompleted: false,
        isFailed: false
    });
    
    // Add to user's active challenges
    userActiveChallenges[msg.sender].push(challengeId);
    
    // Update total staked amount
    totalStaked += amount;
    
    emit StakeReceived(msg.sender, challengeId, amount, isHardcore);
}

    
    /**
     * @dev Completes a challenge and distributes rewards to the user
     * @param user The address of the user who completed the challenge
     * @param challengeId The unique identifier of the completed challenge
     * @param yieldPercentage The yield percentage earned (in basis points, e.g. 500 = 5%)
     */
    function completeChallenge(address user, string memory challengeId, uint256 yieldPercentage) external onlyOwner nonReentrant {
        Stake storage stake = stakes[user][challengeId];
        
        require(stake.amount > 0, "No stake found for this challenge");
        require(!stake.isCompleted && !stake.isFailed, "Challenge already completed or failed");
        
        // Calculate reward with yield
        uint256 yield = (stake.amount * yieldPercentage) / 10000; // Convert basis points to percentage
        uint256 reward = stake.amount + yield;
        
        // Transfer reward to user
        require(usdcToken.transfer(user, reward), "Reward transfer failed");
        
        // Update stake status
        stake.isCompleted = true;
        
        // Remove from active challenges
        _removeActiveChallenge(user, challengeId);
        
        // Update totals
        totalStaked -= stake.amount;
        totalYieldGenerated += yield;
        
        emit ChallengeCompleted(user, challengeId, reward);
    }
    
    /**
     * @dev Marks a challenge as failed (for hardcore challenges)
     * @param user The address of the user who failed the challenge
     * @param challengeId The unique identifier of the failed challenge
     */
    function failChallenge(address user, string memory challengeId) external onlyOwner nonReentrant {
        Stake storage stake = stakes[user][challengeId];
        
        require(stake.amount > 0, "No stake found for this challenge");
        require(!stake.isCompleted && !stake.isFailed, "Challenge already completed or failed");
        require(stake.isHardcore, "Only hardcore challenges can be failed");
        
        // Update stake status
        stake.isFailed = true;
        
        // Remove from active challenges
        _removeActiveChallenge(user, challengeId);
        
        // For hardcore challenges, the stake is forfeited (stays in contract)
        
        emit ChallengeFailed(user, challengeId);
    }
    
    /**
     * @dev Allows user to withdraw stake for non-hardcore challenges if they decide to quit
     * @param challengeId The unique identifier of the challenge to withdraw from
     */
    function withdrawFromChallenge(string memory challengeId) external nonReentrant {
        Stake storage stake = stakes[msg.sender][challengeId];
        
        require(stake.amount > 0, "No stake found for this challenge");
        require(!stake.isCompleted && !stake.isFailed, "Challenge already completed or failed");
        require(!stake.isHardcore, "Cannot withdraw from hardcore challenges");
        
        // Transfer stake back to user
        require(usdcToken.transfer(msg.sender, stake.amount), "Stake transfer failed");
        
        // Update stake status
        stake.isFailed = true; // Mark as failed (quit)
        
        // Remove from active challenges
        _removeActiveChallenge(msg.sender, challengeId);
        
        // Update total staked amount
        totalStaked -= stake.amount;
        
        emit ChallengeFailed(msg.sender, challengeId);
    }
    
    /**
     * @dev Helper function to remove a challenge from user's active challenges
     */
    function _removeActiveChallenge(address user, string memory challengeId) internal {
        string[] storage activeChallenges = userActiveChallenges[user];
        
        for (uint256 i = 0; i < activeChallenges.length; i++) {
            if (keccak256(bytes(activeChallenges[i])) == keccak256(bytes(challengeId))) {
                // Replace with the last element and pop
                activeChallenges[i] = activeChallenges[activeChallenges.length - 1];
                activeChallenges.pop();
                break;
            }
        }
    }
    
    /**
     * @dev Allows owner to withdraw yield for protocol fees/operations
     * @param amount The amount of USDC to withdraw
     */
    function withdrawYield(uint256 amount) external onlyOwner nonReentrant {
        require(amount <= usdcToken.balanceOf(address(this)) - totalStaked, "Cannot withdraw staked funds");
        
        require(usdcToken.transfer(owner(), amount), "Yield transfer failed");
    }
    
    /**
     * @dev Deactivates a challenge to prevent new stakes
     * @param challengeId The unique identifier of the challenge
     */
    function deactivateChallenge(string memory challengeId) external nonReentrant {
        Challenge storage challenge = challenges[challengeId];
        
        require(challenge.createdAt > 0, "Challenge does not exist");
        require(msg.sender == challenge.creator || msg.sender == owner(), "Only creator or owner can deactivate");
        
        challenge.isActive = false;
    }
    
    /**
     * @dev Returns the stake details for a given user and challenge
     */
    function getStake(address user, string memory challengeId) external view returns (
        uint256 amount,
        uint256 timestamp,
        bool isHardcore,
        bool isCompleted,
        bool isFailed
    ) {
        Stake memory stake = stakes[user][challengeId];
        return (
            stake.amount,
            stake.timestamp,
            stake.isHardcore,
            stake.isCompleted,
            stake.isFailed
        );
    }
    
    /**
     * @dev Returns all active challenges for a user
     */
    function getUserActiveChallenges(address user) external view returns (string[] memory) {
        return userActiveChallenges[user];
    }
    
    /**
     * @dev Returns challenge details
     */
    function getChallengeDetails(string memory challengeId) external view returns (
        uint256 stakeAmount,
        uint256 yieldBps,
        bool isHardcore,
        uint256 durationDays,
        bool isActive,
        address creator,
        uint256 createdAt
    ) {
        Challenge memory challenge = challenges[challengeId];
        return (
            challenge.stakeAmount,
            challenge.yieldBps,
            challenge.isHardcore,
            challenge.durationDays,
            challenge.isActive,
            challenge.creator,
            challenge.createdAt
        );
    }
}



================================================================
End of Codebase
================================================================
