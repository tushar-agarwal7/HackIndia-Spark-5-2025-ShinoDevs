This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: app, components, contracts, lib, prisma/schema.prisma
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  api/
    auth/
      logout/
        route.js
      wallet/
        route.js
    challenges/
      [id]/
        daily-exercise/
          route.js
        exit/
          route.js
        update-contract/
          route.js
        route.js
      complete/
        route.js
      create/
        route.js
      daily-progress/
        route.js
      join/
        route.js
      practice-info/
        route.js
      update-progress/
        route.js
      user/
        route.js
      route.js
    conversation/
      evaluate/
        route.js
      route.js
    inference/
      route.js
    learn/
      grammar/
        generate/
          route.js
        save-result/
          route.js
      speaking/
        start-call/
          route.js
      vocabulary/
        generate/
          route.js
        save-result/
          route.js
    notifications/
      [id]/
        route.js
      read-all/
        route.js
      unread-count/
        route.js
      route.js
    users/
      activity/
        route.js
      analytics/
        route.js
      language-stats/
        route.js
      profile/
        route.js
  auth/
    signin/
      page.jsx
  dashboard/
    challenges/
      [id]/
        page.jsx
      create/
        page.jsx
      page.jsx
    learn/
      conversation/
        page.jsx
      grammar/
        page.jsx
      speaking/
        page.jsx
      vocabulary/
        page.jsx
      page.jsx
    profile/
      page.jsx
    statistics/
      page.jsx
    page.jsx
  testing/
    page.jsx
  globals.css
  layout.js
  page.js
components/
  auth/
    LogoutButton.jsx
    UserProfileForm.jsx
    WalletConnectButton.jsx
  challenge/
    CreateChallengeForm.jsx
    JoinChallengeFlow.jsx
    YieldInformation.jsx
  dashboard/
    ChallengeCard.jsx
    LanguageStats.jsx
    PracticeChart.jsx
    RecentActivity.jsx
  layout/
    DashboardLayout.jsx
  learn/
    ConversationInterface.jsx
  notifications/
    NotificationCenter.jsx
  ui/
    button.jsx
    EmptyState.jsx
    ErrorMessage.jsx
    LoadingSpinner.jsx
    LoadingState.jsx
    TransactionStatus.jsx
lib/
  auth/
    jwt.js
    verify.js
  cron/
    dailyCheck.js
  web3/
    abis/
      stakingABI.json
      usdcABI.json
    hooks/
      useContract.js
      useStaking.js
      useYield.js
    providers.js
    staking.js
  utils.js
prisma/
  schema.prisma

================================================================
Files
================================================================

================
File: app/api/auth/logout/route.js
================
// app/api/auth/logout/route.js
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

export async function POST() {
  // Clear the auth token cookie
  const cookieStore = await cookies();
  cookieStore.delete('auth_token');
  
  return NextResponse.json({ success: true });
}

================
File: app/api/auth/wallet/route.js
================
// File: app/api/auth/wallet/route.js
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { ethers } from "ethers";
import { cookies } from "next/headers";
import { SignJWT } from "jose";
import { nanoid } from "nanoid";

const prisma = new PrismaClient();

// Generate nonce for signing
export async function GET(request) {
  try {
    const walletAddress = request.nextUrl.searchParams.get("address");

    if (!walletAddress) {
      return NextResponse.json(
        { error: "Wallet address is required" },
        { status: 400 }
      );
    }

    // Generate a random nonce
    const nonce = nanoid();

    const cookieStore = await cookies();
    // Store nonce in cookies for later verification
    cookieStore.set("auth_nonce", nonce, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      maxAge: 5 * 60, // 5 minutes
      path: "/",
    });

    const message = `Welcome to ShinoLearn!\n\nPlease sign this message to verify your wallet ownership.\n\nThis request will not trigger a blockchain transaction or cost any gas fees.\n\nWallet address: ${walletAddress}\nNonce: ${nonce}`;

    return NextResponse.json({ message });
  } catch (error) {
    console.error("Error generating nonce:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// Verify signature and authenticate user
export async function POST(request) {
  try {
    const { walletAddress, signature } = await request.json();

    if (!walletAddress || !signature) {
      return NextResponse.json(
        { error: "Wallet address and signature are required" },
        { status: 400 }
      );
    }
    const cookieStore = await cookies();

    // Get nonce from cookies
    const nonce = await cookieStore.get("auth_nonce")?.value;

    if (!nonce) {
      return NextResponse.json(
        { error: "Authentication nonce not found or expired" },
        { status: 401 }
      );
    }

    // Recreate the message that was signed
    const message = `Welcome to ShinoLearn!\n\nPlease sign this message to verify your wallet ownership.\n\nThis request will not trigger a blockchain transaction or cost any gas fees.\n\nWallet address: ${walletAddress}\nNonce: ${nonce}`;

    // Verify the signature
    const recoveredAddress = ethers.verifyMessage(message, signature);

    if (recoveredAddress.toLowerCase() !== walletAddress.toLowerCase()) {
      return NextResponse.json({ error: "Invalid signature" }, { status: 401 });
    }

    // Find or create user
    let user = await prisma.user.findUnique({
      where: { walletAddress },
    });

    const isNewUser = !user;

    if (!user) {
      // Create new user with just wallet address
      user = await prisma.user.create({
        data: {
          walletAddress,
          username: `user_${walletAddress.slice(0, 6)}`, // Temporary username
        },
      });
    }

    // Create JWT token
    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
    const token = await new SignJWT({
      userId: user.id,
      walletAddress: user.walletAddress,
    })
      .setProtectedHeader({ alg: "HS256" })
      .setIssuedAt()
      .setExpirationTime("7d")
      .sign(secret);

    // Clear nonce cookie
    cookieStore.delete("auth_nonce");

    // Set auth token cookie
    cookieStore.set("auth_token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      maxAge: 7 * 24 * 60 * 60, // 7 days
      path: "/",
    });

    return NextResponse.json({
      success: true,
      user: {
        id: user.id,
        walletAddress: user.walletAddress,
        username: user.username,
        isProfileComplete: Boolean(
          user.username && user.email && user.nativeLanguage
        ),
        isNewUser,
      },
    });
  } catch (error) {
    console.error("Error authenticating user:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/challenges/[id]/daily-exercise/route.js
================
// app/api/challenges/[id]/daily-exercise/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request, { params }) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const { id } =await params;
    
    if (!id) {
      return NextResponse.json({ error: 'Challenge ID is required' }, { status: 400 });
    }
    
    // Check if challenge exists and user is participating
    const userChallenge = await prisma.userChallenge.findFirst({
      where: {
        challengeId: id,
        userId: auth.userId,
        status: 'ACTIVE'
      },
      include: {
        challenge: true
      }
    });
    
    if (!userChallenge) {
      return NextResponse.json({ error: 'Challenge not found or user not participating' }, { status: 404 });
    }
    
    // Get today's date
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Check if there's already a daily progress record for today
    const todayProgress = await prisma.dailyProgress.findUnique({
      where: {
        userChallengeId_date: {
          userChallengeId: userChallenge.id,
          date: today
        }
      }
    });
    
    // Determine exercise based on progress
    let exercise;
    let description;
    
    if (todayProgress && todayProgress.completed) {
      description = "You've already completed today's goal! Keep practicing for extra progress.";
      exercise = `You've practiced ${todayProgress.minutesPracticed} minutes today. Your goal was ${userChallenge.challenge.dailyRequirement} minutes.`;
    } else if (todayProgress) {
      description = "Continue your daily practice to reach your goal!";
      exercise = `You've practiced ${todayProgress.minutesPracticed} minutes today. You need ${userChallenge.challenge.dailyRequirement - todayProgress.minutesPracticed} more minutes to reach your daily goal.`;
    } else {
      description = "Start your daily practice to maintain your streak!";
      exercise = `Practice ${userChallenge.challenge.dailyRequirement} minutes of ${getLanguageName(userChallenge.challenge.languageCode)} today.`;
    }
    
    return NextResponse.json({
      description,
      exercise,
      challengeId: id,
      userChallengeId: userChallenge.id,
      dailyRequirement: userChallenge.challenge.dailyRequirement,
      currentProgress: todayProgress?.minutesPracticed || 0
    });
  } catch (error) {
    console.error('Error fetching daily exercise:', error);
    return NextResponse.json({ error: 'Failed to fetch daily exercise' }, { status: 500 });
  }
}

// Helper function to get language name
function getLanguageName(code) {
  const languages = {
    'en': 'English',
    'es': 'Spanish',
    'fr': 'French',
    'de': 'German',
    'it': 'Italian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'zh': 'Chinese',
    'ru': 'Russian',
    'pt': 'Portuguese',
    'ar': 'Arabic',
    'hi': 'Hindi'
  };
  
  return languages[code] || code;
}

================
File: app/api/challenges/[id]/exit/route.js
================
// app/api/challenges/[id]/exit/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';
import { useStaking } from '@/lib/web3/hooks/useStaking';

const prisma = new PrismaClient();

export async function POST(request, { params }) {
  const auth = await verifyAuth();
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }


  const {id} = await params
  const challengeId = id;
  
  try {
    // Find the user's participation in this challenge
    const userChallenge = await prisma.userChallenge.findUnique({
      where: {
        userId_challengeId: {
          userId: auth.userId,
          challengeId: challengeId
        }
      },
      include: {
        challenge: true
      }
    });

    if (!userChallenge) {
      return NextResponse.json({ error: 'You are not participating in this challenge' }, { status: 404 });
    }

    if (userChallenge.status !== 'ACTIVE') {
      return NextResponse.json({ error: 'This challenge is not active' }, { status: 400 });
    }

    // If it's a hardcore challenge, users can't exit unless it's failed
    if (userChallenge.challenge.isHardcore) {
      return NextResponse.json({ 
        error: 'Cannot exit a hardcore challenge. Hardcore challenges require completion to get your stake back.' 
      }, { status: 400 });
    }

    // Calculate progress percentage
    const totalDays = userChallenge.challenge.durationDays;
    const completedDays = await prisma.dailyProgress.count({
      where: {
        userChallengeId: userChallenge.id,
        completed: true
      }
    });
    
    const progressPercentage = Math.floor((completedDays / totalDays) * 100);

    // Update the user challenge status to WITHDRAWN
    const updatedChallenge = await prisma.userChallenge.update({
      where: { id: userChallenge.id },
      data: {
        status: 'WITHDRAWN',
        progressPercentage: progressPercentage
      }
    });

    // Create a notification for the user
    await prisma.notification.create({
      data: {
        userId: auth.userId,
        type: 'CHALLENGE_WITHDRAWN',
        title: 'Challenge Withdrawn',
        message: `You've withdrawn from the "${userChallenge.challenge.title}" challenge. Your progress was ${progressPercentage}%.`,
        read: false
      }
    });

    // Return the updated challenge data
    return NextResponse.json({
      success: true,
      message: 'Successfully exited the challenge',
      progress: progressPercentage,
      challenge: updatedChallenge
    });
    
  } catch (error) {
    console.error('Error exiting challenge:', error);
    return NextResponse.json({ error: 'Failed to exit challenge' }, { status: 500 });
  }
}

================
File: app/api/challenges/[id]/update-contract/route.js
================
// app/api/challenges/[id]/update-contract/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function POST(request, { params }) {
  try {
    // Verify authentication
    const auth = await verifyAuth();
    
    if (!auth.success) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { id } = params;
    
    if (!id) {
      return NextResponse.json({ error: 'Challenge ID is required' }, { status: 400 });
    }
    
    // Parse request body
    const body = await request.json();
    const { transactionHash, contractAddress, contractChain } = body;
    
    if (!transactionHash || !contractAddress) {
      return NextResponse.json({ 
        error: 'Transaction hash and contract address are required' 
      }, { status: 400 });
    }
    
    // Check if challenge exists and user is the creator
    const challenge = await prisma.challenge.findUnique({
      where: { id }
    });
    
    if (!challenge) {
      return NextResponse.json({ error: 'Challenge not found' }, { status: 404 });
    }
    
    if (challenge.creatorId !== auth.userId) {
      return NextResponse.json({ 
        error: 'Only the challenge creator can update contract details' 
      }, { status: 403 });
    }
    
    // Update the challenge with blockchain details
    const updatedChallenge = await prisma.challenge.update({
      where: { id },
      data: {
        contractAddress,
        contractChain: contractChain || 'polygon', // Default to polygon if not specified
      }
    });
    
    // Create a transaction record for the contract registration
    await prisma.transaction.create({
      data: {
        userId: auth.userId,
        transactionType: 'STAKE',
        amount: 0, // No amount for registration
        currency: 'MATIC', // Gas fee currency
        txHash: transactionHash,
        status: 'COMPLETED',
        completedAt: new Date()
      }
    });
    
    return NextResponse.json(updatedChallenge);
  } catch (error) {
    console.error('Error updating challenge contract details:', error);
    return NextResponse.json({ 
      error: 'Failed to update contract details', 
      details: error.message 
    }, { status: 500 });
  }
}

================
File: app/api/challenges/[id]/route.js
================
// app/api/challenges/[id]/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request, { params }) {
  try {
    const { id } = await params;
    
    if (!id) {
      return NextResponse.json({ error: 'Challenge ID is required' }, { status: 400 });
    }
    
    // Verify authentication (optional - can show challenge details to non-authenticated users)
    const auth = await verifyAuth();
    const isAuthenticated = auth.success;
    
    // Fetch challenge details
    const challenge = await prisma.challenge.findUnique({
      where: { id },
      include: {
        creator: {
          select: {
            id: true,
            username: true
          }
        },
        _count: {
          select: {
            participants: true
          }
        }
      }
    });
    
    if (!challenge) {
      return NextResponse.json({ error: 'Challenge not found' }, { status: 404 });
    }
    
    // If authenticated, check if user is already participating
    let userParticipation = null;
    
    if (isAuthenticated) {
      userParticipation = await prisma.userChallenge.findUnique({
        where: {
          userId_challengeId: {
            userId: auth.userId,
            challengeId: id
          }
        }
      });
    }
    
    // Check if the challenge has reached max participants
    const isAtCapacity = 
      challenge.maxParticipants && 
      challenge._count.participants >= challenge.maxParticipants;
    
    // Format response
    const response = {
      ...challenge,
      participantCount: challenge._count.participants,
      isAtCapacity,
      isParticipating: Boolean(userParticipation),
      creatorName: challenge.creator.username,
      
      // Add additional computed properties
      formattedStartDate: challenge.createdAt.toLocaleDateString(),
      formattedEndDate: new Date(
        new Date(challenge.createdAt).setDate(
          new Date(challenge.createdAt).getDate() + challenge.durationDays
        )
      ).toLocaleDateString(),
      
      // Calculate potential reward
      potentialReward: challenge.stakeAmount * (1 + (challenge.yieldPercentage / 100)),
      
      // Remove sensitive or unnecessary data
      _count: undefined
    };
    
    return NextResponse.json(response);
  } catch (error) {
    console.error('Error fetching challenge details:', error);
    return NextResponse.json(
      { error: 'Failed to fetch challenge details', details: error.message },
      { status: 500 }
    );
  }
}

================
File: app/api/challenges/complete/route.js
================
// app/api/challenges/complete/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';
import { useStaking } from '@/lib/web3/hooks/useStaking';

const prisma = new PrismaClient();

export async function POST(request) {
  const auth = await verifyAuth();
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const { userChallengeId } = body;
    
    if (!userChallengeId) {
      return NextResponse.json({ error: 'userChallengeId is required' }, { status: 400 });
    }

    // Verify the user challenge belongs to the authenticated user
    const userChallenge = await prisma.userChallenge.findUnique({
      where: {
        id: userChallengeId,
        userId: auth.userId,
        status: 'ACTIVE'
      },
      include: {
        challenge: true
      }
    });

    if (!userChallenge) {
      return NextResponse.json({ error: 'Active user challenge not found' }, { status: 404 });
    }

    // Calculate completion percentage
    const totalDays = userChallenge.challenge.durationDays;
    const completedDays = await prisma.dailyProgress.count({
      where: {
        userChallengeId: userChallengeId,
        completed: true
      }
    });
    
    const progressPercentage = Math.floor((completedDays / totalDays) * 100);

    // Check minimum completion requirement (80%)
    if (progressPercentage < 80) {
      return NextResponse.json({ 
        error: 'Challenge has not met the minimum 80% completion requirement yet' 
      }, { status: 400 });
    }

    // Calculate reward based on stake and yield percentage
    const stake = userChallenge.stakedAmount;
    const yieldPercentage = userChallenge.challenge.yieldPercentage;
    const yieldAmount = (stake * yieldPercentage) / 100;
    const totalReward = stake + yieldAmount;

    // Process blockchain rewards (if needed)
    let transactionHash = null;
    // TODO: Implement actual blockchain rewards claim
    // For now, we'll simulate a successful transaction
    transactionHash = `0x${Array(64).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('')}`;

    // Mark challenge as completed
    const completedChallenge = await prisma.userChallenge.update({
      where: { id: userChallengeId },
      data: {
        status: 'COMPLETED',
        completionTxHash: transactionHash,
        progressPercentage: progressPercentage
      }
    });

    // Create transaction record
    const transaction = await prisma.transaction.create({
      data: {
        userId: auth.userId,
        transactionType: 'REWARD',
        amount: totalReward,
        currency: 'USDC',
        txHash: transactionHash,
        status: 'COMPLETED',
        completedAt: new Date()
      }
    });

    // Create notification for completion
    await prisma.notification.create({
      data: {
        userId: auth.userId,
        type: 'CHALLENGE_COMPLETED',
        title: 'Challenge Completed!',
        message: `Congratulations! You've completed the "${userChallenge.challenge.title}" challenge and earned ${totalReward} USDC.`,
        read: false
      }
    });

    // Check for achievements to award
    await checkAndAwardAchievements(auth.userId, userChallenge);

    // Return completion data
    return NextResponse.json({
      success: true,
      message: 'Challenge successfully completed',
      reward: totalReward,
      transactionHash: transactionHash,
      challenge: completedChallenge
    });
    
  } catch (error) {
    console.error('Error completing challenge:', error);
    return NextResponse.json({ error: 'Failed to complete challenge' }, { status: 500 });
  }
}

// Helper function to check and award achievements
async function checkAndAwardAchievements(userId, userChallenge) {
  try {
    // Check for CHALLENGE_COMPLETED achievement
    const challengeCompletedAchievement = await prisma.achievement.findFirst({
      where: {
        achievementType: 'CHALLENGE_COMPLETED',
        threshold: 1 // First completed challenge
      }
    });

    if (challengeCompletedAchievement) {
      // Check if user already has this achievement
      const existingAchievement = await prisma.userAchievement.findUnique({
        where: {
          userId_achievementId: {
            userId: userId,
            achievementId: challengeCompletedAchievement.id
          }
        }
      });

      if (!existingAchievement) {
        // Award the achievement
        await prisma.userAchievement.create({
          data: {
            userId: userId,
            achievementId: challengeCompletedAchievement.id,
            earnedAt: new Date()
          }
        });

        // Create notification for the achievement
        await prisma.notification.create({
          data: {
            userId: userId,
            type: 'ACHIEVEMENT_EARNED',
            title: 'Achievement Unlocked!',
            message: `You've earned the "${challengeCompletedAchievement.name}" achievement.`,
            read: false
          }
        });
      }
    }

    // Check for streak achievements
    if (userChallenge.longestStreak >= 5) {
      const streakAchievement = await prisma.achievement.findFirst({
        where: {
          achievementType: 'STREAK_DAYS',
          threshold: 5 // 5-day streak
        }
      });

      if (streakAchievement) {
        // Check if user already has this achievement
        const existingStreakAchievement = await prisma.userAchievement.findUnique({
          where: {
            userId_achievementId: {
              userId: userId,
              achievementId: streakAchievement.id
            }
          }
        });

        if (!existingStreakAchievement) {
          // Award the achievement
          await prisma.userAchievement.create({
            data: {
              userId: userId,
              achievementId: streakAchievement.id,
              earnedAt: new Date()
            }
          });

          // Create notification for the achievement
          await prisma.notification.create({
            data: {
              userId: userId,
              type: 'ACHIEVEMENT_EARNED',
              title: 'Achievement Unlocked!',
              message: `You've earned the "${streakAchievement.name}" achievement.`,
              read: false
            }
          });
        }
      }
    }
  } catch (error) {
    console.error('Error checking achievements:', error);
    // Don't fail the entire operation if achievements fail
  }
}

================
File: app/api/challenges/create/route.js
================
// app/api/challenges/create/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';
import { nanoid } from 'nanoid';

const prisma = new PrismaClient();

export async function POST(request) {
  try {
    // Verify authentication
    const auth = await verifyAuth();
    
    if (!auth.success) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const body = await request.json();
    
    // Validate request body
    const requiredFields = [
      'title', 
      'languageCode', 
      'proficiencyLevel', 
      'durationDays', 
      'dailyRequirement', 
      'stakeAmount'
    ];
    
    const missingFields = requiredFields.filter(field => !body[field]);
    
    if (missingFields.length > 0) {
      return NextResponse.json({ 
        error: `Missing required fields: ${missingFields.join(', ')}` 
      }, { status: 400 });
    }
    
    // Validate numerical fields
    const numericFields = [
      { name: 'durationDays', min: 1, max: 365 },
      { name: 'dailyRequirement', min: 5, max: 120 },
      { name: 'stakeAmount', min: 10, max: 1000 },
      { name: 'yieldPercentage', min: 0, max: 20 }
    ];
    
    for (const field of numericFields) {
      const value = parseFloat(body[field.name]);
      
      if (isNaN(value)) {
        return NextResponse.json({ 
          error: `Invalid value for ${field.name}: must be a number` 
        }, { status: 400 });
      }
      
      if (value < field.min || value > field.max) {
        return NextResponse.json({ 
          error: `${field.name} must be between ${field.min} and ${field.max}` 
        }, { status: 400 });
      }
    }
    
    // Generate a random invite code if this is a private challenge but no code provided
    let inviteCode = body.inviteCode;
    if (body.maxParticipants && !inviteCode) {
      inviteCode = nanoid(8);
    }
    
    // Get current blockchain network (default to 'polygon')
    const contractChain = body.contractChain || 'polygon';
    
    // Create the challenge
    const challenge = await prisma.challenge.create({
      data: {
        title: body.title,
        description: body.description || '',
        languageCode: body.languageCode,
        proficiencyLevel: body.proficiencyLevel,
        durationDays: parseInt(body.durationDays),
        dailyRequirement: parseInt(body.dailyRequirement),
        stakeAmount: parseFloat(body.stakeAmount),
        yieldPercentage: parseFloat(body.yieldPercentage || 5),
        isHardcore: Boolean(body.isHardcore),
        maxParticipants: body.maxParticipants ? parseInt(body.maxParticipants) : null,
        inviteCode: inviteCode,
        creatorId: auth.userId,
        isActive: true,
        
        // Add blockchain-related fields if provided
        contractAddress: body.contractAddress || null,
        contractChain: contractChain
      }
    });
    
    // If blockchain transaction information is provided, create a transaction record
    if (body.transactionHash) {
      await prisma.transaction.create({
        data: {
          userId: auth.userId,
          transactionType: 'STAKE',
          amount: 0, // No amount for registration
          currency: contractChain === 'polygon' || contractChain === 'mumbai' ? 'MATIC' : 'ETH', // Gas fee currency
          txHash: body.transactionHash,
          status: 'COMPLETED',
          completedAt: new Date()
        }
      });
    }
    
    // Automatically join the creator to their own challenge if specified
    if (body.autoJoin) {
      const startDate = new Date();
      const endDate = new Date();
      endDate.setDate(endDate.getDate() + parseInt(body.durationDays));
      
      await prisma.userChallenge.create({
        data: {
          userId: auth.userId,
          challengeId: challenge.id,
          startDate: startDate,
          endDate: endDate,
          stakedAmount: parseFloat(body.stakeAmount),
          currentStreak: 0,
          longestStreak: 0,
          progressPercentage: 0,
          status: 'ACTIVE',
          stakeTxHash: body.stakeTxHash || null
        }
      });
    }
    
    // Create notification for successful challenge creation
    await prisma.notification.create({
      data: {
        userId: auth.userId,
        type: 'CHALLENGE_CREATED',
        title: 'Challenge Created',
        message: `You've successfully created the "${challenge.title}" challenge.`,
        read: false
      }
    });
    
    return NextResponse.json(challenge, { status: 201 });
  } catch (error) {
    console.error('Error creating challenge:', error);
    return NextResponse.json({ 
      error: 'Failed to create challenge', 
      details: error.message 
    }, { status: 500 });
  }
}

================
File: app/api/challenges/daily-progress/route.js
================
// app/api/challenges/update-progress/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function POST(request) {
  const auth = await verifyAuth();
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const { userChallengeId, minutesPracticed, activityType } = body;
    
    if (!userChallengeId || typeof minutesPracticed !== 'number' || minutesPracticed < 0) {
      return NextResponse.json({ 
        error: 'Valid userChallengeId and minutesPracticed are required' 
      }, { status: 400 });
    }

    // Verify the user challenge belongs to the authenticated user
    const userChallenge = await prisma.userChallenge.findUnique({
      where: {
        id: userChallengeId,
        userId: auth.userId,
        status: 'ACTIVE'
      },
      include: {
        challenge: true
      }
    });

    if (!userChallenge) {
      return NextResponse.json({ error: 'Active user challenge not found' }, { status: 404 });
    }

    // Get today's date (midnight)
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // Find or create today's progress
    let dailyProgress = await prisma.dailyProgress.findFirst({
      where: {
        userChallengeId: userChallengeId,
        date: {
          gte: today
        }
      }
    });

    if (!dailyProgress) {
      dailyProgress = await prisma.dailyProgress.create({
        data: {
          userChallengeId: userChallengeId,
          date: today,
          minutesPracticed: 0,
          completed: false
        }
      });
    }

    // Update minutes practiced
    const updatedMinutes = dailyProgress.minutesPracticed + minutesPracticed;
    const isCompleted = updatedMinutes >= userChallenge.challenge.dailyRequirement;
    
    // Update daily progress
    dailyProgress = await prisma.dailyProgress.update({
      where: { id: dailyProgress.id },
      data: {
        minutesPracticed: updatedMinutes,
        completed: isCompleted
      }
    });

    // If completed for the first time today
    if (isCompleted && !dailyProgress.completed) {
      // Get yesterday's date
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      
      // Check if user practiced yesterday
      const yesterdayProgress = await prisma.dailyProgress.findFirst({
        where: {
          userChallengeId: userChallengeId,
          date: {
            gte: yesterday,
            lt: today
          },
          completed: true
        }
      });

      // Update streak based on yesterday's practice
      let newStreak = 1; // Start with 1 for today
      
      if (yesterdayProgress) {
        // Continue streak
        newStreak = userChallenge.currentStreak + 1;
      } else {
        // Reset streak
        newStreak = 1;
      }

      // Update user challenge with new streak
      await prisma.userChallenge.update({
        where: { id: userChallengeId },
        data: {
          currentStreak: newStreak,
          longestStreak: Math.max(newStreak, userChallenge.longestStreak)
        }
      });

      // Create notification for daily goal completion
      await prisma.notification.create({
        data: {
          userId: auth.userId,
          type: 'CHALLENGE_REMINDER',
          title: 'Daily Goal Completed!',
          message: `You've completed your daily practice goal for "${userChallenge.challenge.title}". Great job!`,
          read: false
        }
      });
    }

    // Calculate overall progress percentage
    const totalDays = userChallenge.challenge.durationDays;
    const completedDays = await prisma.dailyProgress.count({
      where: {
        userChallengeId: userChallengeId,
        completed: true
      }
    });
    
    const progressPercentage = Math.floor((completedDays / totalDays) * 100);

    // Update overall progress percentage
    await prisma.userChallenge.update({
      where: { id: userChallengeId },
      data: {
        progressPercentage: progressPercentage
      }
    });

    // Create tracking record based on activity type
    if (activityType) {
      switch (activityType) {
        case 'VOCABULARY':
          await prisma.vocabularyPractice.create({
            data: {
              userId: auth.userId,
              languageCode: userChallenge.challenge.languageCode,
              proficiencyLevel: userChallenge.challenge.proficiencyLevel,
              score: minutesPracticed * 10, // Example scoring mechanism
              totalQuestions: minutesPracticed * 5, // Example
              percentageCorrect: 80, // Example
              userChallengeId: userChallengeId,
              completedAt: new Date()
            }
          });
          break;
          
        case 'GRAMMAR':
          await prisma.grammarPractice.create({
            data: {
              userId: auth.userId,
              languageCode: userChallenge.challenge.languageCode,
              proficiencyLevel: userChallenge.challenge.proficiencyLevel,
              score: minutesPracticed * 8, // Example scoring mechanism
              totalQuestions: minutesPracticed * 4, // Example
              percentageCorrect: 75, // Example
              userChallengeId: userChallengeId,
              completedAt: new Date()
            }
          });
          break;
          
        case 'SPEAKING':
          await prisma.speakingPractice.create({
            data: {
              userId: auth.userId,
              languageCode: userChallenge.challenge.languageCode,
              proficiencyLevel: userChallenge.challenge.proficiencyLevel,
              pronunciationScore: 70, // Example score
              fluencyScore: 65, // Example score
              accuracyScore: 75, // Example score
              overallScore: 70, // Example score
              durationSeconds: minutesPracticed * 60, // Convert minutes to seconds
              userChallengeId: userChallengeId,
              completedAt: new Date()
            }
          });
          break;
      }
    }

    // Return updated progress
    return NextResponse.json({
      success: true,
      dailyProgress: {
        ...dailyProgress,
        dailyRequirement: userChallenge.challenge.dailyRequirement
      },
      progressPercentage,
      completed: isCompleted,
      updatedStreak: newStreak || userChallenge.currentStreak
    });
    
  } catch (error) {
    console.error('Error updating progress:', error);
    return NextResponse.json({ error: 'Failed to update progress' }, { status: 500 });
  }
}

================
File: app/api/challenges/join/route.js
================
// app/api/challenges/join/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';
import { processStaking } from '@/lib/web3/staking';

const prisma = new PrismaClient();

export async function POST(request) {
  const auth = await verifyAuth();
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const { challengeId, transactionHash } = body;
    
    if (!challengeId || !transactionHash) {
      return NextResponse.json({ error: 'Challenge ID and transaction hash are required' }, { status: 400 });
    }

    // Verify the challenge exists and is active
    const challenge = await prisma.challenge.findUnique({
      where: { id: challengeId, isActive: true }
    });
    
    if (!challenge) {
      return NextResponse.json({ error: 'Challenge not found or inactive' }, { status: 404 });
    }

    // Check if user is already participating in this specific challenge
    const existingParticipation = await prisma.userChallenge.findUnique({
      where: {
        userId_challengeId: {
          userId: auth.userId,
          challengeId: challengeId
        }
      }
    });
    
    if (existingParticipation) {
      return NextResponse.json({ error: 'You are already participating in this challenge' }, { status: 400 });
    }

    // Verify transaction on the blockchain
    const stakingVerified = await processStaking(transactionHash, challenge.stakeAmount, auth.walletAddress);
    if (!stakingVerified.success) {
      return NextResponse.json({ error: stakingVerified.error }, { status: 400 });
    }

    // Calculate end date
    const startDate = new Date();
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + challenge.durationDays);

    // Create user challenge participation
    const userChallenge = await prisma.userChallenge.create({
      data: {
        userId: auth.userId,
        challengeId: challengeId,
        startDate: startDate,
        endDate: endDate,
        stakedAmount: challenge.stakeAmount,
        stakeTxHash: transactionHash,
        currentStreak: 0,
        longestStreak: 0,
        progressPercentage: 0,
        status: 'ACTIVE'
      }
    });

    // Create notification for the user
    await prisma.notification.create({
      data: {
        userId: auth.userId,
        type: 'CHALLENGE_CREATED',
        title: 'New Challenge Started',
        message: `You've joined the "${challenge.title}" challenge. Start practicing daily to maintain your streak!`,
        read: false
      }
    });

    return NextResponse.json({
      success: true,
      message: 'Successfully joined challenge',
      userChallenge: userChallenge
    });
    
  } catch (error) {
    console.error('Error joining challenge:', error);
    return NextResponse.json({ error: 'Failed to join challenge' }, { status: 500 });
  }
}

================
File: app/api/challenges/practice-info/route.js
================
// app/api/challenges/practice-info/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    // Get userChallengeId from query params
    const { searchParams } = new URL(request.url);
    const userChallengeId = searchParams.get('userChallengeId');
    
    if (!userChallengeId) {
      return NextResponse.json({ error: 'User challenge ID is required' }, { status: 400 });
    }
    
    // Verify the user challenge belongs to the authenticated user
    const userChallenge = await prisma.userChallenge.findFirst({
      where: {
        id: userChallengeId,
        userId: auth.userId,
        status: 'ACTIVE'
      },
      include: {
        challenge: true
      }
    });
    
    if (!userChallenge) {
      return NextResponse.json({ error: 'Challenge not found or not active' }, { status: 404 });
    }
    
    // Get today's date (reset to midnight)
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Find today's progress if it exists
    const todayProgress = await prisma.dailyProgress.findUnique({
      where: {
        userChallengeId_date: {
          userChallengeId,
          date: today
        }
      }
    });
    
    // Return practice info
    return NextResponse.json({
      dailyRequirement: userChallenge.challenge.dailyRequirement,
      todayProgress: todayProgress?.minutesPracticed || 0,
      todayCompleted: todayProgress?.completed || false,
      currentStreak: userChallenge.currentStreak,
      longestStreak: userChallenge.longestStreak,
      progressPercentage: userChallenge.progressPercentage,
      language: {
        code: userChallenge.challenge.languageCode,
        level: userChallenge.challenge.proficiencyLevel
      }
    });
  } catch (error) {
    console.error('Error getting practice info:', error);
    return NextResponse.json({ error: 'Failed to get practice info' }, { status: 500 });
  }
}

================
File: app/api/challenges/update-progress/route.js
================
// app/api/challenges/update-progress/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function POST(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const body = await request.json();
    const { userChallengeId, minutes, isSessionEnd, conversationId } = body;
    
    if (!userChallengeId || !minutes) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }
    
    // Verify the user challenge belongs to the authenticated user
    const userChallenge = await prisma.userChallenge.findFirst({
      where: {
        id: userChallengeId,
        userId: auth.userId,
        status: 'ACTIVE'
      },
      include: {
        challenge: true
      }
    });
    
    if (!userChallenge) {
      return NextResponse.json({ error: 'Challenge not found or not active' }, { status: 404 });
    }
    
    // Get today's date (reset to midnight)
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Find or create daily progress record
    let dailyProgress = await prisma.dailyProgress.findUnique({
      where: {
        userChallengeId_date: {
          userChallengeId,
          date: today
        }
      }
    });
    
    if (dailyProgress) {
      // Update existing record
      dailyProgress = await prisma.dailyProgress.update({
        where: { id: dailyProgress.id },
        data: {
          minutesPracticed: dailyProgress.minutesPracticed + minutes,
          completed: (dailyProgress.minutesPracticed + minutes) >= userChallenge.challenge.dailyRequirement
        }
      });
    } else {
      // Create new record
      dailyProgress = await prisma.dailyProgress.create({
        data: {
          userChallengeId,
          date: today,
          minutesPracticed: minutes,
          completed: minutes >= userChallenge.challenge.dailyRequirement
        }
      });
    }
    
    // Update user streak
    await updateUserStreak(userChallengeId);
    
    // Update overall progress percentage
    await updateOverallProgress(userChallengeId);
    
    // If this is the end of a session and we have a conversationId,
    // associate the conversation with this progress
    if (isSessionEnd && conversationId) {
      await prisma.aIConversation.update({
        where: { id: conversationId },
        data: {
          endedAt: new Date(),
          durationMinutes: minutes
        }
      });
    }
    
    return NextResponse.json({
      success: true,
      minutesPracticed: dailyProgress.minutesPracticed,
      completed: dailyProgress.completed
    });
  } catch (error) {
    console.error('Error updating progress:', error);
    return NextResponse.json({ error: 'Failed to update progress' }, { status: 500 });
  }
}

// Helper function to update user streak
async function updateUserStreak(userChallengeId) {
  try {
    // Get the user challenge record
    const userChallenge = await prisma.userChallenge.findUnique({
      where: { id: userChallengeId }
    });
    
    if (!userChallenge) {
      console.error('User challenge not found');
      return;
    }
    
    // Get daily progress records ordered by date descending
    const progressRecords = await prisma.dailyProgress.findMany({
      where: { userChallengeId },
      orderBy: { date: 'desc' },
      select: { date: true, completed: true }
    });
    
    // If no records, streak is 0
    if (progressRecords.length === 0) {
      await prisma.userChallenge.update({
        where: { id: userChallengeId },
        data: { currentStreak: 0 }
      });
      return;
    }
    
    // Calculate current streak
    let currentStreak = 0;
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Check if today's record exists and was completed
    const todayRecord = progressRecords.find(record => {
      const recordDate = new Date(record.date);
      recordDate.setHours(0, 0, 0, 0);
      return recordDate.getTime() === today.getTime() && record.completed;
    });
    
    if (todayRecord) {
      currentStreak = 1;
      
      // Check previous days
      let prevDate = new Date(today);
      prevDate.setDate(prevDate.getDate() - 1);
      
      let consecutiveDays = true;
      while (consecutiveDays) {
        const prevDayRecord = progressRecords.find(record => {
          const recordDate = new Date(record.date);
          recordDate.setHours(0, 0, 0, 0);
          return recordDate.getTime() === prevDate.getTime() && record.completed;
        });
        
        if (prevDayRecord) {
          currentStreak++;
          prevDate.setDate(prevDate.getDate() - 1);
        } else {
          consecutiveDays = false;
        }
      }
    }
    
    // Update current streak
    await prisma.userChallenge.update({
      where: { id: userChallengeId },
      data: { 
        currentStreak,
        // Update longest streak if current > longest
        longestStreak: currentStreak > userChallenge.longestStreak 
          ? currentStreak 
          : userChallenge.longestStreak
      }
    });
  } catch (error) {
    console.error('Error updating user streak:', error);
  }
}

// Helper function to update overall progress
async function updateOverallProgress(userChallengeId) {
  try {
    // Get the user challenge and related challenge data
    const userChallenge = await prisma.userChallenge.findUnique({
      where: { id: userChallengeId },
      include: { 
        challenge: true,
        dailyProgress: true
      }
    });
    
    if (!userChallenge) {
      console.error('User challenge not found');
      return;
    }
    
    // Calculate overall progress percentage
    // Method: (completed days / total challenge days) * 100
    const totalDays = userChallenge.challenge.durationDays;
    const completedDays = userChallenge.dailyProgress.filter(p => p.completed).length;
    
    // Calculate days elapsed since challenge start
    const startDate = new Date(userChallenge.startDate);
    const today = new Date();
    const daysDiff = Math.floor((today - startDate) / (1000 * 60 * 60 * 24)) + 1; // +1 to include start day
    
    // Calculate expected progress at this point (can't exceed 100%)
    const expectedProgress = Math.min(daysDiff / totalDays, 1);
    
    // Calculate actual progress (can't exceed 100%)
    const actualProgress = Math.min(completedDays / totalDays, 1);
    
    // Calculate overall percentage
    const progressPercentage = Math.round(actualProgress * 100);
    
    // Update user challenge progress
    await prisma.userChallenge.update({
      where: { id: userChallengeId },
      data: { progressPercentage }
    });
  } catch (error) {
    console.error('Error updating overall progress:', error);
  }
}

================
File: app/api/challenges/user/route.js
================
// app/api/challenges/user/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  const auth = await verifyAuth();
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status');
    const challengeId = searchParams.get('challengeId');
    
    // Build the query based on provided parameters
    const whereClause = {
      userId: auth.userId
    };
    
    // Add status filter if provided
    if (status) {
      whereClause.status = status;
    }
    
    // Add challengeId filter if provided
    if (challengeId) {
      whereClause.challengeId = challengeId;
    }
    
    // Fetch user challenges based on the filters
    const userChallenges = await prisma.userChallenge.findMany({
      where: whereClause,
      include: {
        challenge: true
      },
      orderBy: {
        endDate: 'asc'
      }
    });
    
    // Enhance the data with daily progress information
    const enhancedChallenges = await Promise.all(
      userChallenges.map(async (challenge) => {
        if (challenge.status === 'ACTIVE') {
          // Fetch today's progress for active challenges
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          
          const dailyProgress = await prisma.dailyProgress.findFirst({
            where: {
              userChallengeId: challenge.id,
              date: {
                gte: today
              }
            }
          });
          
          return {
            ...challenge,
            todayProgress: dailyProgress || {
              minutesPracticed: 0,
              completed: false
            }
          };
        }
        
        return challenge;
      })
    );
    
    return NextResponse.json(enhancedChallenges);
  } catch (error) {
    console.error('Error fetching user challenges:', error);
    return NextResponse.json({ error: 'Failed to fetch challenges' }, { status: 500 });
  }
}

================
File: app/api/challenges/route.js
================
// app/api/challenges/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  try {
    // Optional authentication - can still show challenges to non-authenticated users
    const auth = await verifyAuth();
    const isAuthenticated = auth.success;
    
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const languageCode = searchParams.get('languageCode');
    const proficiencyLevel = searchParams.get('proficiencyLevel');
    
    // Build query conditions
    let whereConditions = {
      isActive: true,
    };
    
    if (languageCode) {
      whereConditions.languageCode = languageCode;
    }
    
    if (proficiencyLevel) {
      whereConditions.proficiencyLevel = proficiencyLevel;
    }
    
    // Fetch challenges with participant count
    const challenges = await prisma.challenge.findMany({
      where: whereConditions,
      include: {
        creator: {
          select: {
            id: true,
            username: true
          }
        },
        _count: {
          select: {
            participants: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    // Format challenges for response
    const formattedChallenges = challenges.map(challenge => {
      // Check if the challenge has reached max participants
      const isAtCapacity = 
        challenge.maxParticipants && 
        challenge._count.participants >= challenge.maxParticipants;
      
      return {
        ...challenge,
        participantCount: challenge._count.participants,
        isAtCapacity,
        creatorName: challenge.creator.username,
        
        // Add additional computed properties
        formattedStartDate: challenge.createdAt.toLocaleDateString(),
        formattedEndDate: new Date(
          new Date(challenge.createdAt).setDate(
            new Date(challenge.createdAt).getDate() + challenge.durationDays
          )
        ).toLocaleDateString(),
        
        // Calculate potential reward
        potentialReward: challenge.stakeAmount * (1 + (challenge.yieldPercentage / 100)),
        
        // Remove sensitive or unnecessary data
        _count: undefined
      };
    });
    
    return NextResponse.json(formattedChallenges);
  } catch (error) {
    console.error('Error fetching challenges:', error);
    return NextResponse.json({ error: 'Failed to fetch challenges' }, { status: 500 });
  }
}

================
File: app/api/conversation/evaluate/route.js
================
// app/api/conversation/evaluate/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function POST(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const body = await request.json();
    const { conversationId } = body;
    
    if (!conversationId) {
      return NextResponse.json({ error: 'Conversation ID is required' }, { status: 400 });
    }
    
    // Get conversation and messages
    const conversation = await prisma.aIConversation.findUnique({
      where: { 
        id: conversationId,
        userId: auth.userId
      },
      include: {
        messages: {
          orderBy: { timestamp: 'asc' },
        },
      },
    });
    
    if (!conversation) {
      return NextResponse.json({ error: 'Conversation not found' }, { status: 404 });
    }
    
    // Prepare conversation transcript
    const transcript = conversation.messages.map(msg => 
      `${msg.sender === 'USER' ? 'User' : 'AI'}: ${msg.content}`
    ).join('\n\n');
    
    // Check if there are enough user messages for evaluation
    const userMessages = conversation.messages.filter(msg => msg.sender === 'USER');
    if (userMessages.length < 5) {
      return NextResponse.json({ error: 'Not enough conversation data for evaluation' }, { status: 400 });
    }
    
    // Get language proficiency level
    const userLanguage = await prisma.userLanguage.findUnique({
      where: {
        userId_languageCode: {
          userId: auth.userId,
          languageCode: conversation.languageCode,
        },
      },
    });
    
    const proficiencyLevel = userLanguage?.proficiencyLevel || 'BEGINNER';
    
    // Create evaluation prompt
    const evaluationPrompt = `You are a language learning evaluation expert for ${getLanguageName(conversation.languageCode)}.
    Please evaluate the user's language skills based on the following conversation.
    The user's current proficiency level is ${proficiencyLevel}.
    
    Provide scores for the following aspects on a scale of 0-100:
    1. Grammar accuracy
    2. Vocabulary usage
    3. Fluency and natural expression
    4. Pronunciation (based on written indicators)
    
    Also provide:
    - Specific strengths demonstrated
    - Areas for improvement
    - Overall evaluation
    - Estimated vocabulary size based on words used
    - Recommended next learning focus
    
    Format your response as JSON with the following structure:
    {
      "grammarScore": number,
      "vocabularyScore": number,
      "fluencyScore": number,
      "pronunciationScore": number,
      "overallScore": number,
      "strengths": "text",
      "improvements": "text",
      "evaluation": "text",
      "estimatedVocabularySize": number,
      "recommendedFocus": "text"
    }
    
    Conversation transcript:
    ${transcript}`;
    
    // OpenRouter API key from environment variables
    const apiKey = process.env.OPENROUTER_API_KEY;
    
    // Generate evaluation using DeepSeek via OpenRouter
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
        "HTTP-Referer": "http://localhost:3000" // Required by OpenRouter
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-r1:free",
        messages: [
          { role: "system", content: evaluationPrompt }
        ],
        temperature: 0.3,
        response_format: { type: "json_object" },
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('DeepSeek API error:', errorData);
      throw new Error(`DeepSeek API error: ${response.status}`);
    }
    
    // Parse evaluation
    const evaluationResponseData = await response.json();
    const evaluationContent = evaluationResponseData.choices[0].message.content;
    let evaluation;
    
    try {
      evaluation = JSON.parse(evaluationContent);
    } catch (parseError) {
      console.error('Error parsing evaluation JSON:', parseError);
      // Attempt to extract JSON if the model wrapped it with additional text
      const jsonMatch = evaluationContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        evaluation = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('Failed to parse evaluation response as JSON');
      }
    }
    
    // Store evaluation in database
    const conversationEvaluation = await prisma.conversationEvaluation.create({
      data: {
        conversationId: conversation.id,
        grammarScore: evaluation.grammarScore,
        vocabularyScore: evaluation.vocabularyScore,
        pronunciationScore: evaluation.pronunciationScore,
        fluencyScore: evaluation.fluencyScore,
        overallScore: evaluation.overallScore,
        feedback: JSON.stringify({
          strengths: evaluation.strengths,
          improvements: evaluation.improvements,
          evaluation: evaluation.evaluation,
          estimatedVocabularySize: evaluation.estimatedVocabularySize,
          recommendedFocus: evaluation.recommendedFocus
        })
      }
    });
    
    // Update user progress record
    await prisma.progressRecord.create({
      data: {
        userId: auth.userId,
        languageCode: conversation.languageCode,
        recordDate: new Date(),
        vocabularySize: evaluation.estimatedVocabularySize,
        grammarAccuracy: evaluation.grammarScore,
        speakingFluency: evaluation.fluencyScore,
        listeningComprehension: evaluation.pronunciationScore * 0.8, // Estimate based on pronunciation
        overallLevel: updateProficiencyLevel(proficiencyLevel, evaluation.overallScore)
      }
    });
    
    // Check if user should level up
    if (shouldLevelUp(proficiencyLevel, evaluation.overallScore)) {
      await prisma.userLanguage.update({
        where: {
          userId_languageCode: {
            userId: auth.userId,
            languageCode: conversation.languageCode,
          },
        },
        data: {
          proficiencyLevel: getNextLevel(proficiencyLevel)
        }
      });
      
      // Create notification for level up
      await prisma.notification.create({
        data: {
          userId: auth.userId,
          type: 'ACHIEVEMENT_EARNED',
          title: 'Level Up!',
          message: `Congratulations! You've leveled up to ${getNextLevelName(proficiencyLevel)} in ${getLanguageName(conversation.languageCode)}.`,
          read: false
        }
      });
    }
    
    return NextResponse.json({
      evaluation: {
        ...evaluation,
        id: conversationEvaluation.id
      }
    });
  } catch (error) {
    console.error('Error evaluating conversation:', error);
    return NextResponse.json({ error: 'Failed to evaluate conversation' }, { status: 500 });
  }
}

// Helper function to get language name
function getLanguageName(code) {
  const languages = {
    'en': 'English',
    'es': 'Spanish',
    'fr': 'French',
    'de': 'German',
    'it': 'Italian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'zh': 'Chinese',
    'ru': 'Russian',
    'pt': 'Portuguese',
    'ar': 'Arabic',
    'hi': 'Hindi'
  };
  
  return languages[code] || code;
}

// Helper function to check if user should level up
function shouldLevelUp(currentLevel, overallScore) {
  const thresholds = {
    'BEGINNER': 75,
    'ELEMENTARY': 80,
    'INTERMEDIATE': 85,
    'ADVANCED': 90
  };
  
  return thresholds[currentLevel] && overallScore >= thresholds[currentLevel];
}

// Helper function to get next proficiency level
function getNextLevel(currentLevel) {
  const levels = {
    'BEGINNER': 'ELEMENTARY',
    'ELEMENTARY': 'INTERMEDIATE',
    'INTERMEDIATE': 'ADVANCED',
    'ADVANCED': 'FLUENT'
  };
  
  return levels[currentLevel] || currentLevel;
}

// Helper function to get next level name
function getNextLevelName(currentLevel) {
  const levels = {
    'BEGINNER': 'Elementary',
    'ELEMENTARY': 'Intermediate',
    'INTERMEDIATE': 'Advanced',
    'ADVANCED': 'Fluent'
  };
  
  return levels[currentLevel] || 'Next Level';
}

// Helper function to update proficiency level based on score
function updateProficiencyLevel(currentLevel, score) {
  // Don't decrease level based on one evaluation
  // Only return next level if score exceeds threshold
  if (shouldLevelUp(currentLevel, score)) {
    return getNextLevel(currentLevel);
  }
  
  return currentLevel;
}

================
File: app/api/conversation/route.js
================
// app/api/conversation/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function POST(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const body = await request.json();
    const { message, conversationId, languageCode, userChallengeId } = body;
    
    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }
    
    // Get or create conversation
    let conversation;
    let messages = [];
    
    if (conversationId) {
      conversation = await prisma.aIConversation.findUnique({
        where: { id: conversationId },
        include: {
          messages: {
            orderBy: { timestamp: 'asc' },
          },
        },
      });
      
      if (!conversation) {
        return NextResponse.json({ error: 'Conversation not found' }, { status: 404 });
      }
      
      messages = conversation.messages;
    } else {
      // Create new conversation
      conversation = await prisma.aIConversation.create({
        data: {
          userId: auth.userId,
          languageCode: languageCode || 'en',
          avatarType: 'default',
          userChallengeId: userChallengeId
        }
      });
    }
    
    // Save user message
    const userMessage = await prisma.conversationMessage.create({
      data: {
        conversationId: conversation.id,
        sender: 'USER',
        content: message,
      },
    });
    
    // Format previous messages for DeepSeek
    const previousMessages = messages.map(msg => ({
      role: msg.sender === 'USER' ? 'user' : 'assistant',
      content: msg.content,
    }));
    
    // Get user language proficiency
    const userLanguage = await prisma.userLanguage.findUnique({
      where: {
        userId_languageCode: {
          userId: auth.userId,
          languageCode: conversation.languageCode,
        },
      },
    });
    
    const proficiencyLevel = userLanguage?.proficiencyLevel || 'BEGINNER';
    
    // Create system prompt based on language and proficiency
    const systemPrompt = `You are a helpful language tutor for ${getLanguageName(conversation.languageCode)} at ${proficiencyLevel.toLowerCase()} level.
    - Respond primarily in ${getLanguageName(conversation.languageCode)} with English translations when appropriate.
    - Adjust your language complexity to match ${proficiencyLevel.toLowerCase()} level.
    - Provide gentle corrections for grammar or vocabulary mistakes.
    - Be encouraging and supportive.
    - For beginner levels, use simple sentences and basic vocabulary.
    - For intermediate levels, introduce more complex grammar and vocabulary.
    - For advanced levels, use natural, native-like language.
    - When the user makes a mistake, provide the correction in [brackets].
    - Each response should end with a question to keep the conversation going.`;
    
    // OpenRouter API key from environment variables
    const apiKey = process.env.OPENROUTER_API_KEY;
    
    // Generate AI response using DeepSeek via OpenRouter
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
        "HTTP-Referer": "http://localhost:3000" // Required by OpenRouter
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-r1:free",
        messages: [
          { role: "system", content: systemPrompt },
          ...previousMessages,
          { role: "user", content: message }
        ],
        temperature: 0.7,
        max_tokens: 300,
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('DeepSeek API error:', errorData);
      throw new Error(`DeepSeek API error: ${response.status}`);
    }
    
    const aiResponseData = await response.json();
    const aiContent = aiResponseData.choices[0].message.content;
    
    // Save AI response
    const aiMessageRecord = await prisma.conversationMessage.create({
      data: {
        conversationId: conversation.id,
        sender: 'AI',
        content: aiContent,
      },
    });
    
    // Update practice minutes for challenge if applicable
    if (userChallengeId) {
      await updateChallengeProgress(userChallengeId, 1); // Add 1 minute of practice
    }
    
    return NextResponse.json({
      id: aiMessageRecord.id,
      content: aiContent,
      conversationId: conversation.id
    });
  } catch (error) {
    console.error('Error in conversation:', error);
    return NextResponse.json({ error: 'Failed to process conversation' }, { status: 500 });
  }
}

// Helper function to get language name
function getLanguageName(code) {
  const languages = {
    'en': 'English',
    'es': 'Spanish',
    'fr': 'French',
    'de': 'German',
    'it': 'Italian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'zh': 'Chinese',
    'ru': 'Russian',
    'pt': 'Portuguese',
    'ar': 'Arabic',
    'hi': 'Hindi'
  };
  
  return languages[code] || code;
}

// Helper function to update challenge progress
async function updateChallengeProgress(userChallengeId, minutes) {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  try {
    // Check if there's already a daily progress record for today
    const existingProgress = await prisma.dailyProgress.findUnique({
      where: {
        userChallengeId_date: {
          userChallengeId: userChallengeId,
          date: today
        }
      }
    });
    
    if (existingProgress) {
      // Update existing record
      await prisma.dailyProgress.update({
        where: {
          id: existingProgress.id
        },
        data: {
          minutesPracticed: existingProgress.minutesPracticed + minutes,
          completed: (existingProgress.minutesPracticed + minutes) >= 
            (await getUserChallengeRequirement(userChallengeId))
        }
      });
    } else {
      // Create new record
      const dailyRequirement = await getUserChallengeRequirement(userChallengeId);
      
      await prisma.dailyProgress.create({
        data: {
          userChallengeId: userChallengeId,
          date: today,
          minutesPracticed: minutes,
          completed: minutes >= dailyRequirement
        }
      });
      
      // Update streak
      await updateUserStreak(userChallengeId);
    }
    
    // Update overall progress percentage
    await updateOverallProgress(userChallengeId);
    
  } catch (error) {
    console.error('Error updating challenge progress:', error);
  }
}

async function getUserChallengeRequirement(userChallengeId) {
  const userChallenge = await prisma.userChallenge.findUnique({
    where: { id: userChallengeId },
    include: { challenge: true }
  });
  
  return userChallenge?.challenge?.dailyRequirement || 20; // Default to 20 minutes
}

async function updateUserStreak(userChallengeId) {
  try {
    // Get the user challenge record
    const userChallenge = await prisma.userChallenge.findUnique({
      where: { id: userChallengeId }
    });
    
    if (!userChallenge) {
      console.error('User challenge not found');
      return;
    }
    
    // Get daily progress records ordered by date descending
    const progressRecords = await prisma.dailyProgress.findMany({
      where: { userChallengeId },
      orderBy: { date: 'desc' },
      select: { date: true, completed: true }
    });
    
    // If no records, streak is 0
    if (progressRecords.length === 0) {
      await prisma.userChallenge.update({
        where: { id: userChallengeId },
        data: { currentStreak: 0 }
      });
      return;
    }
    
    // Calculate current streak
    let currentStreak = 0;
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Check if today's record exists and was completed
    const todayRecord = progressRecords.find(record => {
      const recordDate = new Date(record.date);
      recordDate.setHours(0, 0, 0, 0);
      return recordDate.getTime() === today.getTime() && record.completed;
    });
    
    if (todayRecord) {
      currentStreak = 1;
      
      // Check previous days
      let prevDate = new Date(today);
      prevDate.setDate(prevDate.getDate() - 1);
      
      let consecutiveDays = true;
      while (consecutiveDays) {
        const prevDayRecord = progressRecords.find(record => {
          const recordDate = new Date(record.date);
          recordDate.setHours(0, 0, 0, 0);
          return recordDate.getTime() === prevDate.getTime() && record.completed;
        });
        
        if (prevDayRecord) {
          currentStreak++;
          prevDate.setDate(prevDate.getDate() - 1);
        } else {
          consecutiveDays = false;
        }
      }
    }
    
    // Update current streak
    await prisma.userChallenge.update({
      where: { id: userChallengeId },
      data: { 
        currentStreak,
        // Update longest streak if current > longest
        longestStreak: currentStreak > userChallenge.longestStreak 
          ? currentStreak 
          : userChallenge.longestStreak
      }
    });
  } catch (error) {
    console.error('Error updating user streak:', error);
  }
}

async function updateOverallProgress(userChallengeId) {
  try {
    // Get the user challenge and related challenge data
    const userChallenge = await prisma.userChallenge.findUnique({
      where: { id: userChallengeId },
      include: { 
        challenge: true,
        dailyProgress: true
      }
    });
    
    if (!userChallenge) {
      console.error('User challenge not found');
      return;
    }
    
    // Calculate overall progress percentage
    // Method: (completed days / total challenge days) * 100
    const totalDays = userChallenge.challenge.durationDays;
    const completedDays = userChallenge.dailyProgress.filter(p => p.completed).length;
    
    // Calculate days elapsed since challenge start
    const startDate = new Date(userChallenge.startDate);
    const today = new Date();
    const daysDiff = Math.floor((today - startDate) / (1000 * 60 * 60 * 24)) + 1; // +1 to include start day
    
    // Calculate expected progress at this point (can't exceed 100%)
    const expectedProgress = Math.min(daysDiff / totalDays, 1);
    
    // Calculate actual progress (can't exceed 100%)
    const actualProgress = Math.min(completedDays / totalDays, 1);
    
    // Calculate overall percentage
    const progressPercentage = Math.round(actualProgress * 100);
    
    // Update user challenge progress
    await prisma.userChallenge.update({
      where: { id: userChallengeId },
      data: { progressPercentage }
    });
    
    // If challenge is completed, check if we need to update status
    if (progressPercentage >= 100 && userChallenge.status === 'ACTIVE') {
      // Optional: automatically complete the challenge
      // You might want this to be manual instead
      // await prisma.userChallenge.update({
      //   where: { id: userChallengeId },
      //   data: { status: 'COMPLETED' }
      // });
    }
  } catch (error) {
    console.error('Error updating overall progress:', error);
  }
}

================
File: app/api/inference/route.js
================
import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    // Parse the request body
    const { inputs } = await request.json();
    
    // Make sure the OpenRouter API key is properly set
    const apiKey = process.env.OPENROUTER_API_KEY;
    if (!apiKey) {
      return NextResponse.json(
        { error: "API key is not configured" },
        { status: 500 }
      );
    }

    const systemPrompt = `You are a helpful language tutor for level.
    - Respond primarily in  with English translations when appropriate.
    - Adjust your language complexity to match level.
    - Provide gentle corrections for grammar or vocabulary mistakes.
    - Be encouraging and supportive.
    - For beginner levels, use simple sentences and basic vocabulary.
    - For intermediate levels, introduce more complex grammar and vocabulary.
    - For advanced levels, use natural, native-like language.
    - When the user makes a mistake, provide the correction in [brackets].
    - Each response should end with a question to keep the conversation going.`;
    

    console.log("Sending request to OpenRouter with API key length:", apiKey.length);
    
    // Call OpenRouter API with the DeepSeek model
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
        "HTTP-Referer": "http://localhost:3000" // Required by OpenRouter
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-r1:free",
        messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: inputs }
          ],
      })
    });

    console.log("Ap",response)

    // Parse the response
    const result = await response.json();
    
    // Handle errors
    if (!response.ok) {
      console.error("OpenRouter API error details:", result);
      return NextResponse.json(
        { error: result.error?.message || "DeepSeek API error" },
        { status: response.status }
      );
    }

    // Return the successful result
    return NextResponse.json(result);
  } catch (error) {
    console.error("Server error:", error);
    return NextResponse.json(
      { error: error.message || "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/learn/grammar/generate/route.js
================
// app/api/learn/grammar/generate/route.js
import { NextResponse } from 'next/server';
import { verifyAuth } from '@/lib/auth/verify';

// Function to generate grammar questions using DeepSeek via OpenRouter
async function generateGrammarQuestions(languageCode, proficiencyLevel, count = 10) {
  try {
    // Set up the prompt based on language and proficiency level
    const prompt = createPromptForLanguage(languageCode, proficiencyLevel, count);
    
    // OpenRouter API key from environment variables
    const apiKey = process.env.OPENROUTER_API_KEY;
    
    // Make API request to DeepSeek via OpenRouter
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
        "HTTP-Referer": "http://localhost:3000" // Required by OpenRouter
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-r1:free",
        messages: [
          {
            role: "system",
            content: "You are a language learning assistant that creates grammar exercises. Your responses should be in valid JSON format."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        response_format: { type: "json_object" },
        temperature: 0.7,
        max_tokens: 2048
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('DeepSeek API error:', errorData);
      throw new Error(`DeepSeek API error: ${response.status}`);
    }
    
    // Extract and parse the generated content
    const responseData = await response.json();
    const jsonContent = responseData.choices[0].message.content;
    
    let questionsData;
    try {
      questionsData = JSON.parse(jsonContent);
    } catch (parseError) {
      console.error('Error parsing JSON from DeepSeek:', parseError);
      // Attempt to extract JSON if the model wrapped it with additional text
      const jsonMatch = jsonContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        questionsData = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('Failed to parse response as JSON');
      }
    }
    
    // Validate and format the questions
    if (questionsData.questions && Array.isArray(questionsData.questions)) {
      return questionsData.questions.slice(0, count).map((q, index) => ({
        id: index + 1,
        ...q
      }));
    }
    
    throw new Error("Invalid question format from AI");
  } catch (error) {
    console.error("Error generating grammar questions:", error);
    
    // If API fails, fall back to predefined questions for this language/level
    return getFallbackQuestions(languageCode, proficiencyLevel);
  }
}

// Create the prompt for the given language and proficiency level
function createPromptForLanguage(languageCode, proficiencyLevel, count) {
  const languageName = getLanguageName(languageCode);
  const level = proficiencyLevel.toLowerCase();
  
  return `Generate ${count} multiple-choice grammar questions for ${level} level ${languageName} language learners. 

The questions should test appropriate grammar concepts for ${level} level, such as:
- Beginner: basic verb forms, simple present/past tense, articles, pronouns
- Elementary: comparative forms, prepositions, simple future tense
- Intermediate: conditional forms, passive voice, relative clauses
- Advanced: complex tenses, subjunctive mood, idiomatic expressions
- Fluent: nuanced grammatical distinctions, rare grammatical forms

For each question:
1. Create a question about a grammar concept appropriate for ${level} level
2. Provide exactly 4 answer options labeled A, B, C, and D
3. Indicate which option is correct (include the correct answer index as 0 for A, 1 for B, 2 for C, or 3 for D)
4. Include a brief explanation of why the answer is correct and why others are wrong
5. Specify the grammar concept being tested (e.g., "past tense", "conditional", etc.)

Return the data in this JSON format:
{
  "questions": [
    {
      "question": "Complete the sentence: She ____ to school every day.",
      "options": ["go", "goes", "going", "went"],
      "correctAnswerIndex": 1,
      "explanation": "The correct answer is 'goes'. With third-person singular subjects (he, she, it) in simple present tense, we add -s to the verb.",
      "grammarConcept": "simple present tense - third person singular"
    },
    ... more questions
  ]
}

Ensure the questions are appropriate for ${level} level ${languageName} learners and cover different grammar concepts.`;
}

// Fallback questions in case API fails
function getFallbackQuestions(languageCode, proficiencyLevel) {
  // Sample questions for Japanese - BEGINNER
  if (languageCode === 'ja' && proficiencyLevel === 'BEGINNER') {
    return [
      {
        id: 1,
        question: "Which particle is used to mark the direct object of a verb?",
        options: ["は (wa)", "を (o)", "に (ni)", "が (ga)"],
        correctAnswerIndex: 1,
        explanation: "The particle を (o) is used to mark the direct object of a verb. For example: りんごを食べます (I eat an apple).",
        grammarConcept: "particles - direct object marker"
      },
      {
        id: 2,
        question: "Which sentence uses the correct word order?",
        options: ["私は学校に行きます", "私は行きます学校に", "学校に私は行きます", "行きます私は学校に"],
        correctAnswerIndex: 0,
        explanation: "The correct word order in Japanese is typically Subject-Object-Verb. So '私は学校に行きます' (I go to school) follows the proper structure.",
        grammarConcept: "sentence structure - word order"
      },
      {
        id: 3,
        question: "Which form is used to make a request?",
        options: ["食べる", "食べます", "食べて", "食べない"],
        correctAnswerIndex: 2,
        explanation: "The te-form (食べて) is used to make requests, among other functions. For example: 'それを食べてください' (Please eat that).",
        grammarConcept: "te-form - requests"
      }
    ];
  }
  
  // Sample questions for Spanish - BEGINNER
  if (languageCode === 'es' && proficiencyLevel === 'BEGINNER') {
    return [
      {
        id: 1,
        question: "Which is the correct form of the verb 'hablar' (to speak) in the present tense for 'yo' (I)?",
        options: ["hablo", "hablas", "habla", "hablan"],
        correctAnswerIndex: 0,
        explanation: "The correct conjugation for 'yo' (I) in the present tense of 'hablar' is 'hablo'.",
        grammarConcept: "present tense conjugation - first person singular"
      },
      {
        id: 2,
        question: "Which is the correct article to use with 'libro' (book)?",
        options: ["la", "el", "los", "las"],
        correctAnswerIndex: 1,
        explanation: "'Libro' (book) is a masculine noun, so it uses the masculine singular article 'el'.",
        grammarConcept: "articles - gender agreement"
      },
      {
        id: 3,
        question: "Complete the sentence: '_____ estudiantes están en la clase.' (The students are in class.)",
        options: ["El", "La", "Los", "Las"],
        correctAnswerIndex: 2,
        explanation: "'Estudiantes' is plural and can be either masculine or mixed gender, so the correct article is 'Los'.",
        grammarConcept: "articles - plural forms"
      }
    ];
  }
  
  // Default questions for English
  return [
    {
      id: 1,
      question: "Which sentence is grammatically correct?",
      options: ["She don't like pizza.", "She doesn't likes pizza.", "She doesn't like pizza.", "She not like pizza."],
      correctAnswerIndex: 2,
      explanation: "The correct negative form of third-person singular in simple present is 'doesn't' + base form of the verb. So 'She doesn't like pizza' is correct.",
      grammarConcept: "simple present negative - third person singular"
    },
    {
      id: 2,
      question: "Complete the sentence: 'They _____ to the store yesterday.'",
      options: ["go", "goes", "went", "gone"],
      correctAnswerIndex: 2,
      explanation: "The sentence refers to a completed action in the past, so the simple past tense 'went' is correct.",
      grammarConcept: "simple past tense"
    },
    {
      id: 3,
      question: "Choose the correct sentence:",
      options: ["I am student.", "I am a student.", "I am the student.", "I am an student."],
      correctAnswerIndex: 1,
      explanation: "The indefinite article 'a' is used before singular countable nouns that begin with a consonant sound, like 'student'.",
      grammarConcept: "articles - indefinite article usage"
    }
  ];
}

// Helper function to get language name from code
function getLanguageName(code) {
  const languages = {
    'en': 'English',
    'es': 'Spanish',
    'fr': 'French',
    'de': 'German',
    'it': 'Italian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'zh': 'Chinese',
    'ru': 'Russian',
    'pt': 'Portuguese',
    'ar': 'Arabic',
    'hi': 'Hindi'
  };
  
  return languages[code] || code;
}

// API Route Handler
export async function POST(request) {
  // Verify authentication
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const body = await request.json();
    const { languageCode, proficiencyLevel, count } = body;
    
    // Validate request parameters
    if (!languageCode) {
      return NextResponse.json({ error: 'Language code is required' }, { status: 400 });
    }
    
    // Default to BEGINNER if proficiency level is not provided
    const level = proficiencyLevel || 'BEGINNER';
    
    // Generate questions
    const questions = await generateGrammarQuestions(languageCode, level, count || 10);
    
    return NextResponse.json({ questions });
  } catch (error) {
    console.error('Error in grammar generation API:', error);
    return NextResponse.json(
      { error: 'Failed to generate grammar questions' },
      { status: 500 }
    );
  }
}

================
File: app/api/learn/grammar/save-result/route.js
================
// app/api/learn/grammar/save-result/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function POST(request) {
  // Verify authentication
  const auth = await verifyAuth();
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const body = await request.json();
    const { 
      languageCode, 
      proficiencyLevel, 
      score, 
      totalQuestions, 
      userChallengeId,
      grammarConcepts = [] // Array of grammar concepts practiced
    } = body;
    
    // Validate required fields
    if (!languageCode || score === undefined || !totalQuestions) {
      return NextResponse.json({
        error: 'Language code, score, and total questions are required'
      }, { status: 400 });
    }
    
    // Calculate percentage score
    const percentage = Math.round((score / totalQuestions) * 100);
    
    // Save practice result
    const practiceResult = await prisma.grammarPractice.create({
      data: {
        userId: auth.userId,
        languageCode,
        proficiencyLevel: proficiencyLevel || 'BEGINNER',
        score,
        totalQuestions,
        percentageCorrect: percentage,
        grammarConcepts: grammarConcepts.join(','), // Store concepts as comma-separated string
        userChallengeId: userChallengeId || null,
        completedAt: new Date()
      }
    });
    
    // Update user's grammar accuracy in progress record
    await updateGrammarAccuracy(auth.userId, languageCode, proficiencyLevel, percentage);
    
    // Check for achievements
    await checkForAchievements(auth.userId, languageCode);
    
    return NextResponse.json({
      success: true,
      practiceId: practiceResult.id,
      percentage
    });
  } catch (error) {
    console.error('Error saving grammar practice result:', error);
    return NextResponse.json({
      error: 'Failed to save practice result'
    }, { status: 500 });
  }
}

// Helper function to update user's grammar accuracy
async function updateGrammarAccuracy(userId, languageCode, proficiencyLevel, percentageCorrect) {
  try {
    // Get the latest progress record for this language
    const latestRecord = await prisma.progressRecord.findFirst({
      where: {
        userId,
        languageCode
      },
      orderBy: {
        recordDate: 'desc'
      }
    });
    
    // Calculate new grammar accuracy
    // If there's an existing record, use weighted average (30% new score, 70% previous)
    let newAccuracy = percentageCorrect;
    if (latestRecord && latestRecord.grammarAccuracy !== null) {
      newAccuracy = Math.round(0.3 * percentageCorrect + 0.7 * latestRecord.grammarAccuracy);
    }
    
    // Create new progress record
    await prisma.progressRecord.create({
      data: {
        userId,
        languageCode,
        recordDate: new Date(),
        grammarAccuracy: newAccuracy,
        vocabularySize: latestRecord?.vocabularySize || null,
        speakingFluency: latestRecord?.speakingFluency || null,
        listeningComprehension: latestRecord?.listeningComprehension || null,
        overallLevel: proficiencyLevel
      }
    });
    
    return newAccuracy;
  } catch (error) {
    console.error('Error updating grammar accuracy:', error);
    return null;
  }
}

// Helper function to check for achievements
async function checkForAchievements(userId, languageCode) {
  try {
    // Get count of grammar practices for this user and language
    const practiceCount = await prisma.grammarPractice.count({
      where: {
        userId,
        languageCode
      }
    });
    
    // Check for grammar practice count achievement
    const practiceCountThresholds = [1, 5, 10, 25, 50, 100];
    
    for (const threshold of practiceCountThresholds) {
      if (practiceCount === threshold) {
        // Find the achievement for this threshold
        const achievement = await prisma.achievement.findFirst({
          where: {
            achievementType: 'GRAMMAR_PRACTICE',
            threshold
          }
        });
        
        if (achievement) {
          // Check if user already has this achievement
          const existingAchievement = await prisma.userAchievement.findFirst({
            where: {
              userId,
              achievementId: achievement.id
            }
          });
          
          if (!existingAchievement) {
            // Award the achievement
            await prisma.userAchievement.create({
              data: {
                userId,
                achievementId: achievement.id
              }
            });
            
            // Create notification
            await prisma.notification.create({
              data: {
                userId,
                type: 'ACHIEVEMENT_EARNED',
                title: 'Achievement Unlocked!',
                message: `You've earned the "${achievement.name}" achievement by completing ${threshold} grammar practice sessions.`,
                read: false
              }
            });
          }
        }
      }
    }
    
    // Check for grammar mastery achievements (high scores)
    const perfectScores = await prisma.grammarPractice.count({
      where: {
        userId,
        languageCode,
        percentageCorrect: 100 // 100% score
      }
    });
    
    // Achievement thresholds for perfect scores
    const perfectScoreThresholds = [1, 5, 10, 25];
    
    for (const threshold of perfectScoreThresholds) {
      if (perfectScores === threshold) {
        // Find the achievement for perfect scores
        const achievement = await prisma.achievement.findFirst({
          where: {
            achievementType: 'GRAMMAR_MASTERY',
            threshold
          }
        });
        
        if (achievement) {
          // Check if user already has this achievement
          const existingAchievement = await prisma.userAchievement.findFirst({
            where: {
              userId,
              achievementId: achievement.id
            }
          });
          
          if (!existingAchievement) {
            // Award the achievement
            await prisma.userAchievement.create({
              data: {
                userId,
                achievementId: achievement.id
              }
            });
            
            // Create notification
            await prisma.notification.create({
              data: {
                userId,
                type: 'ACHIEVEMENT_EARNED',
                title: 'Achievement Unlocked!',
                message: `You've earned the "${achievement.name}" achievement by getting perfect scores in ${threshold} grammar practice sessions.`,
                read: false
              }
            });
          }
        }
      }
    }
  } catch (error) {
    console.error('Error checking for achievements:', error);
  }
}

================
File: app/api/learn/speaking/start-call/route.js
================
// app/api/learn/speaking/start-call/route.js
import { NextResponse } from 'next/server';
import { verifyAuth } from '@/lib/auth/verify';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request) {
  try {
    console.log('Starting speaking call...');
    // Verify authentication
    const auth = await verifyAuth();
    
    if (!auth.success) {
      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get request body
    const body = await request.json();
    const { 
      languageCode, 
      proficiencyLevel, 
      systemPrompt, 
      voice,
      topic,
      userChallengeId 
    } = body;

    console.log('Request body:', body);
    
    // Validate required fields
    if (!languageCode || !systemPrompt) {
      return NextResponse.json({ 
        success: false, 
        error: 'Language code and system prompt are required' 
      }, { status: 400 });
    }

    // Configure Ultravox API request
    const ultravoxConfig = {
      systemPrompt,
      model: "fixie-ai/ultravox",
      voice:   "Jessica",
      temperature: 0.7,
      firstSpeaker: "FIRST_SPEAKER_AGENT",
      experimentalSettings: {
        metadata: {
          userId: auth.userId,
          languageCode,
          proficiencyLevel,
          topic,
          userChallengeId
        }
      },
      medium: {
        webRtc: {}
      }
    };
    console.log('Ultravox API config:', ultravoxConfig);

    // Make request to Ultravox API
    const response = await fetch('https://api.ultravox.ai/api/calls', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': process.env.ULTRAVOX_API_KEY
      },
      body: JSON.stringify(ultravoxConfig)
    });
    console.log('Ultravox API response:', response);

    const data = await response.json();
    console.log('Ultravox API response:', data);
    
    // Check for errors
    if (!data.joinUrl) {
      throw new Error(data.detail || 'Failed to create call');
    }
    
    // Store call data in database
  // Store call data in database
  await prisma.speakingSession.create({
    data: {
      userId: auth.userId,
      languageCode,
      proficiencyLevel: proficiencyLevel || 'BEGINNER',
      ultravoxCallId: data.callId,
      topic: topic || '',
      userChallengeId: userChallengeId || null,
      startedAt: new Date(),
      status: 'ACTIVE'
    }
  });

  // Return success with call data
  return NextResponse.json({ 
    success: true, 
    data: {
      callId: data.callId,
      joinUrl: data.joinUrl
    } 
  });
} catch (error) {
  console.error('Error creating speaking session call:', error);
  return NextResponse.json(
    { success: false, error: error.message || 'Failed to create speaking session' },
    { status: 500 }
  );
}
}

================
File: app/api/learn/vocabulary/generate/route.js
================
// app/api/learn/vocabulary/generate/route.js
import { NextResponse } from 'next/server';
import { verifyAuth } from '@/lib/auth/verify';

// Function to generate vocabulary questions using DeepSeek via OpenRouter
async function generateVocabularyQuestions(languageCode, proficiencyLevel, count = 10) {
  try {
    // Set up the prompt based on language and proficiency level
    const prompt = createPromptForLanguage(languageCode, proficiencyLevel, count);
    
    // OpenRouter API key from environment variables
    const apiKey = process.env.OPENROUTER_API_KEY;
    
    // Make API request to DeepSeek via OpenRouter
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
        "HTTP-Referer": "http://localhost:3000" // Required by OpenRouter
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-r1:free",
        messages: [
          {
            role: "system",
            content: "You are a language learning assistant that creates vocabulary exercises. Your responses should be in valid JSON format."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        response_format: { type: "json_object" },
        temperature: 0.7,
        max_tokens: 2048
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('DeepSeek API error:', errorData);
      throw new Error(`DeepSeek API error: ${response.status}`);
    }
    
    // Extract and parse the generated content
    const responseData = await response.json();
    const jsonContent = responseData.choices[0].message.content;
    
    // Parse the generated content to extract the questions
    const questions = parseGeneratedResponse(jsonContent, languageCode);
    
    return questions.slice(0, count).map((q, index) => ({
      id: index + 1,
      ...q
    }));
  } catch (error) {
    console.error("Error generating vocabulary questions:", error);
    
    // If API fails, fall back to predefined questions for this language/level
    return getFallbackQuestions(languageCode, proficiencyLevel);
  }
}

// Parse the generated content to extract questions
function parseGeneratedResponse(content, languageCode) {
  try {
    // Try to parse the content directly as JSON
    let parsedData;
    
    try {
      parsedData = JSON.parse(content);
    } catch (parseError) {
      // If direct parsing fails, try to extract JSON from the text
      console.error("Error directly parsing JSON:", parseError);
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsedData = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error("Could not extract JSON from response");
      }
    }
    
    // Check if the parsed data has a questions property that is an array
    if (parsedData.questions && Array.isArray(parsedData.questions)) {
      return parsedData.questions.filter(q => 
        q.question && 
        Array.isArray(q.options) && 
        q.options.length === 4 &&
        typeof q.correctAnswerIndex === 'number' &&
        q.correctAnswerIndex >= 0 &&
        q.correctAnswerIndex <= 3 &&
        q.explanation
      );
    }
    
    // If not a "questions" array, check if the response itself is an array
    if (Array.isArray(parsedData)) {
      return parsedData.filter(q => 
        q.question && 
        Array.isArray(q.options) && 
        q.options.length === 4 &&
        typeof q.correctAnswerIndex === 'number' &&
        q.correctAnswerIndex >= 0 &&
        q.correctAnswerIndex <= 3 &&
        q.explanation
      );
    }
    
    throw new Error("Response did not contain valid questions format");
  } catch (error) {
    console.error("Error parsing generated questions:", error);
    return getFallbackQuestions(languageCode, 'BEGINNER');
  }
}

// Create the prompt for the given language and proficiency level
function createPromptForLanguage(languageCode, proficiencyLevel, count) {
  const languageName = getLanguageName(languageCode);
  const level = proficiencyLevel.toLowerCase();
  
  return `Generate ${count} multiple-choice vocabulary questions for ${level} level ${languageName} language learners. 
  
For each question:
1. Create a question about a vocabulary word appropriate for ${level} level
2. Provide exactly 4 answer options labeled A, B, C, and D
3. Indicate which option is correct (include the correct answer index as: correctAnswerIndex: 0 for A, 1 for B, 2 for C, or 3 for D)
4. Include a brief explanation of why the answer is correct
5. For non-English languages, include both the target language word and its translation

Return the data in this JSON format:
{
  "questions": [
    {
      "question": "What does [word] mean?",
      "options": ["option A", "option B", "option C", "option D"],
      "correctAnswerIndex": 0,
      "explanation": "Explanation of why option A is correct"
    },
    ... more questions
  ]
}

For the questions, use vocabulary appropriate for ${level} level ${languageName} learners.`;
}

// Fallback questions in case API fails
function getFallbackQuestions(languageCode, proficiencyLevel) {
  // Sample questions for Japanese
  if (languageCode === 'ja') {
    return [
      {
        id: 1,
        question: 'What does "おはよう" mean?',
        options: ['Good morning', 'Good afternoon', 'Good evening', 'Goodbye'],
        correctAnswerIndex: 0,
        explanation: '"おはよう" (Ohayou) means "Good morning" in Japanese.'
      },
      {
        id: 2,
        question: 'Which word means "thank you" in Japanese?',
        options: ['さようなら', 'ありがとう', 'すみません', 'はい'],
        correctAnswerIndex: 1,
        explanation: '"ありがとう" (Arigatou) means "thank you" in Japanese.'
      },
      {
        id: 3,
        question: 'What does "水" mean?',
        options: ['Fire', 'Earth', 'Water', 'Wind'],
        correctAnswerIndex: 2,
        explanation: '"水" (Mizu) means "water" in Japanese.'
      },
      {
        id: 4,
        question: 'Which word means "food" in Japanese?',
        options: ['たべもの', 'のみもの', 'くるま', 'いえ'],
        correctAnswerIndex: 0,
        explanation: '"たべもの" (Tabemono) means "food" in Japanese.'
      },
      {
        id: 5,
        question: 'What does "ねこ" mean?',
        options: ['Dog', 'Cat', 'Bird', 'Fish'],
        correctAnswerIndex: 1,
        explanation: '"ねこ" (Neko) means "cat" in Japanese.'
      }
    ];
  }
  
  // Sample questions for Spanish
  if (languageCode === 'es') {
    return [
      {
        id: 1,
        question: 'What does "hola" mean?',
        options: ['Goodbye', 'Hello', 'Thank you', 'Please'],
        correctAnswerIndex: 1,
        explanation: '"Hola" means "hello" in Spanish.'
      },
      {
        id: 2,
        question: 'Which word means "water" in Spanish?',
        options: ['Pan', 'Leche', 'Agua', 'Vino'],
        correctAnswerIndex: 2,
        explanation: '"Agua" means "water" in Spanish.'
      },
      {
        id: 3,
        question: 'What does "gato" mean?',
        options: ['Dog', 'Cat', 'Bird', 'Mouse'],
        correctAnswerIndex: 1,
        explanation: '"Gato" means "cat" in Spanish.'
      },
      {
        id: 4,
        question: 'Which word means "house" in Spanish?',
        options: ['Casa', 'Carro', 'Libro', 'Mesa'],
        correctAnswerIndex: 0,
        explanation: '"Casa" means "house" in Spanish.'
      },
      {
        id: 5,
        question: 'What does "gracias" mean?',
        options: ['Please', 'Sorry', 'Thank you', 'You\'re welcome'],
        correctAnswerIndex: 2,
        explanation: '"Gracias" means "thank you" in Spanish.'
      }
    ];
  }
  
  // Default questions for English
  return [
    {
      id: 1,
      question: 'What does "hello" mean?',
      options: ['Goodbye', 'A greeting when meeting someone', 'Thank you', 'I don\'t know'],
      correctAnswerIndex: 1,
      explanation: '"Hello" is a greeting used when meeting someone.'
    },
    {
      id: 2,
      question: 'Which word means "a place where people live"?',
      options: ['Car', 'House', 'Tree', 'Phone'],
      correctAnswerIndex: 1,
      explanation: 'A "house" is a place where people live.'
    },
    {
      id: 3,
      question: 'What is the opposite of "hot"?',
      options: ['Warm', 'Cold', 'Wet', 'Dry'],
      correctAnswerIndex: 1,
      explanation: 'The opposite of "hot" is "cold".'
    },
    {
      id: 4,
      question: 'Which word describes water falling from the sky?',
      options: ['Wind', 'Snow', 'Rain', 'Cloud'],
      correctAnswerIndex: 2,
      explanation: '"Rain" describes water falling from the sky.'
    },
    {
      id: 5,
      question: 'What animal says "meow"?',
      options: ['Dog', 'Cat', 'Bird', 'Fish'],
      correctAnswerIndex: 1,
      explanation: 'A cat says "meow".'
    }
  ];
}

// Helper function to get language name from code
function getLanguageName(code) {
  const languages = {
    'en': 'English',
    'es': 'Spanish',
    'fr': 'French',
    'de': 'German',
    'it': 'Italian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'zh': 'Chinese',
    'ru': 'Russian',
    'pt': 'Portuguese',
    'ar': 'Arabic',
    'hi': 'Hindi'
  };
  
  return languages[code] || code;
}

// API Route Handler
export async function POST(request) {
  // Verify authentication
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const body = await request.json();
    const { languageCode, proficiencyLevel, count } = body;
    
    // Validate request parameters
    if (!languageCode) {
      return NextResponse.json({ error: 'Language code is required' }, { status: 400 });
    }
    
    // Default to BEGINNER if proficiency level is not provided
    const level = proficiencyLevel || 'BEGINNER';
    
    // Generate questions
    const questions = await generateVocabularyQuestions(languageCode, level, count || 10);
    
    return NextResponse.json({ questions });
  } catch (error) {
    console.error('Error in vocabulary generation API:', error);
    return NextResponse.json(
      { error: 'Failed to generate vocabulary questions' },
      { status: 500 }
    );
  }
}

================
File: app/api/learn/vocabulary/save-result/route.js
================
// app/api/learn/vocabulary/save-result/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';
const prisma = new PrismaClient();

export async function POST(request) {
  // Verify authentication
  const auth = await verifyAuth();
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const body = await request.json();
    const { languageCode, proficiencyLevel, score, totalQuestions, userChallengeId } = body;
    
    // Validate required fields
    if (!languageCode || score === undefined || !totalQuestions) {
      return NextResponse.json({
        error: 'Language code, score, and total questions are required'
      }, { status: 400 });
    }
    
    // Calculate percentage score
    const percentage = Math.round((score / totalQuestions) * 100);
    
    // Save practice result
    const practiceResult = await prisma.vocabularyPractice.create({
      data: {
        userId: auth.userId,
        languageCode,
        proficiencyLevel: proficiencyLevel || 'BEGINNER',
        score,
        totalQuestions,
        percentageCorrect: percentage,
        userChallengeId: userChallengeId || null,
        completedAt: new Date()
      }
    });
    
    // Update user's vocabulary size estimate based on performance
    await updateVocabularySize(auth.userId, languageCode, proficiencyLevel, percentage);
    
    // Check if user earned any achievements
    await checkForAchievements(auth.userId, languageCode);
    
    return NextResponse.json({
      success: true,
      practiceId: practiceResult.id,
      percentage
    });
  } catch (error) {
    console.error('Error saving vocabulary practice result:', error);
    return NextResponse.json({
      error: 'Failed to save practice result'
    }, { status: 500 });
  }
}

// Helper function to update user's vocabulary size estimate
async function updateVocabularySize(userId, languageCode, proficiencyLevel, percentageCorrect) {
  try {
    // Get the latest progress record for this language
    const latestRecord = await prisma.progressRecord.findFirst({
      where: {
        userId,
        languageCode
      },
      orderBy: {
        recordDate: 'desc'
      }
    });
    
    // Base vocabulary size based on proficiency level
    const baseVocabSize = {
      'BEGINNER': 500,
      'ELEMENTARY': 1500,
      'INTERMEDIATE': 3000,
      'ADVANCED': 6000,
      'FLUENT': 10000
    }[proficiencyLevel] || 500;
    
    // Current vocabulary size (if record exists) or base size
    const currentSize = latestRecord?.vocabularySize || baseVocabSize;
    
    // Calculate vocabulary size adjustment based on performance
    // Strong performance increases estimated vocabulary size
    let newSize = currentSize;
    if (percentageCorrect >= 90) {
      // Excellent performance - increase by 5-10%
      newSize = Math.round(currentSize * (1 + (0.05 + Math.random() * 0.05)));
    } else if (percentageCorrect >= 70) {
      // Good performance - increase by 2-5%
      newSize = Math.round(currentSize * (1 + (0.02 + Math.random() * 0.03)));
    } else if (percentageCorrect < 50) {
      // Poor performance - slight decrease
      newSize = Math.round(currentSize * 0.98);
    }
    
    // Create new progress record
    await prisma.progressRecord.create({
      data: {
        userId,
        languageCode,
        recordDate: new Date(),
        vocabularySize: newSize,
        // Estimate other metrics based on vocabulary performance
        grammarAccuracy: latestRecord?.grammarAccuracy || percentageCorrect,
        speakingFluency: latestRecord?.speakingFluency || null,
        listeningComprehension: latestRecord?.listeningComprehension || null,
        overallLevel: proficiencyLevel
      }
    });
    
    return newSize;
  } catch (error) {
    console.error('Error updating vocabulary size:', error);
    return null;
  }
}

// Helper function to check for achievements
async function checkForAchievements(userId, languageCode) {
  try {
    // Get count of vocabulary practices for this user and language
    const practiceCount = await prisma.vocabularyPractice.count({
      where: {
        userId,
        languageCode
      }
    });
    
    // Check for vocabulary practice count achievement
    const practiceCountThresholds = [1, 5, 10, 25, 50, 100];
    
    for (const threshold of practiceCountThresholds) {
      if (practiceCount === threshold) {
        // Find the achievement for this threshold
        const achievement = await prisma.achievement.findFirst({
          where: {
            achievementType: 'VOCABULARY_PRACTICE',
            threshold
          }
        });
        
        if (achievement) {
          // Check if user already has this achievement
          const existingAchievement = await prisma.userAchievement.findFirst({
            where: {
              userId,
              achievementId: achievement.id
            }
          });
          
          if (!existingAchievement) {
            // Award the achievement
            await prisma.userAchievement.create({
              data: {
                userId,
                achievementId: achievement.id
              }
            });
            
            // Create notification
            await prisma.notification.create({
              data: {
                userId,
                type: 'ACHIEVEMENT_EARNED',
                title: 'Achievement Unlocked!',
                message: `You've earned the "${achievement.name}" achievement by completing ${threshold} vocabulary practice sessions.`,
                read: false
              }
            });
          }
        }
      }
    }
  } catch (error) {
    console.error('Error checking for achievements:', error);
  }
}

================
File: app/api/notifications/[id]/route.js
================
// app/api/notifications/[id]/read/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function POST(request, { params }) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const { id } = params;
    
    // Verify notification belongs to user
    const notification = await prisma.notification.findUnique({
      where: {
        id,
        userId: auth.userId
      }
    });
    
    if (!notification) {
      return NextResponse.json({ error: 'Notification not found' }, { status: 404 });
    }
    
    // Mark as read
    const updatedNotification = await prisma.notification.update({
      where: { id },
      data: { read: true }
    });
    
    return NextResponse.json(updatedNotification);
  } catch (error) {
    console.error('Error marking notification as read:', error);
    return NextResponse.json({ error: 'Failed to update notification' }, { status: 500 });
  }
}

================
File: app/api/notifications/read-all/route.js
================
// app/api/notifications/read-all/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function POST(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    // Mark all user's notifications as read
    const result = await prisma.notification.updateMany({
      where: {
        userId: auth.userId,
        read: false
      },
      data: {
        read: true
      }
    });
    
    return NextResponse.json({ 
      success: true, 
      count: result.count 
    });
  } catch (error) {
    console.error('Error marking all notifications as read:', error);
    return NextResponse.json({ error: 'Failed to update notifications' }, { status: 500 });
  }
}

================
File: app/api/notifications/unread-count/route.js
================
// app/api/notifications/unread-count/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    // Count unread notifications
    const count = await prisma.notification.count({
      where: {
        userId: auth.userId,
        read: false
      }
    });
    
    return NextResponse.json({ count });
  } catch (error) {
    console.error('Error counting unread notifications:', error);
    return NextResponse.json({ error: 'Failed to count notifications' }, { status: 500 });
  }
}

================
File: app/api/notifications/route.js
================
// app/api/notifications/route.js (update to proper implementation)
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    // Get notifications sorted by creation date (newest first)
    const notifications = await prisma.notification.findMany({
      where: {
        userId: auth.userId
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 50 // Limit to most recent 50
    });
    
    return NextResponse.json(notifications);
  } catch (error) {
    console.error('Error fetching notifications:', error);
    return NextResponse.json({ error: 'Failed to fetch notifications' }, { status: 500 });
  }
}

================
File: app/api/users/activity/route.js
================
// app/api/users/activity/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    // Get combination of different activity types
    const userId = auth.userId;
    
    // Get recent conversations
    const conversations = await prisma.aIConversation.findMany({
      where: { userId },
      orderBy: { startedAt: 'desc' },
      take: 5,
      include: {
        messages: {
          take: 1,
          orderBy: { timestamp: 'desc' }
        }
      }
    });
    
    // Get challenge activities
    const challengeActivities = await prisma.userChallenge.findMany({
      where: { userId },
      orderBy: { startDate: 'desc' },
      take: 5,
      include: {
        challenge: true
      }
    });
    
    // Get achievements
    const achievements = await prisma.userAchievement.findMany({
      where: { userId },
      orderBy: { earnedAt: 'desc' },
      take: 5,
      include: {
        achievement: true
      }
    });
    
    // Combine and format activities
    const formattedActivities = [
      // Format conversation activities
      ...conversations.map(conv => ({
        id: `conv-${conv.id}`,
        type: 'practice',
        language: conv.languageCode,
        details: `Practiced ${conv.durationMinutes || 0} minutes of conversation`,
        timestamp: conv.startedAt.toISOString()
      })),
      
      // Format challenge activities
      ...challengeActivities.map(uc => ({
        id: `challenge-${uc.id}`,
        type: 'challenge',
        language: uc.challenge.languageCode,
        details: `${uc.status === 'ACTIVE' ? 'Joined' : uc.status === 'COMPLETED' ? 'Completed' : 'Participated in'} "${uc.challenge.title}"`,
        timestamp: uc.startDate.toISOString()
      })),
      
      // Format achievement activities
      ...achievements.map(ua => ({
        id: `achievement-${ua.id}`,
        type: 'achievement',
        language: '', // Achievement might not have a specific language
        details: `Earned "${ua.achievement.name}" achievement`,
        timestamp: ua.earnedAt.toISOString()
      }))
    ];
    
    // Sort by timestamp, most recent first
    formattedActivities.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    // Return the top 10 activities
    return NextResponse.json({ 
      activities: formattedActivities.slice(0, 10) 
    });
  } catch (error) {
    console.error('Error fetching user activities:', error);
    return NextResponse.json({ error: 'Failed to fetch activities' }, { status: 500 });
  }
}

================
File: app/api/users/analytics/route.js
================
// app/api/users/analytics/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    // Get query parameters
    const searchParams = request.nextUrl.searchParams;
    const languageCode = searchParams.get('languageCode');
    const period = searchParams.get('period') || 'month'; // 'week', 'month', 'year'
    
    // Calculate date range based on period
    const endDate = new Date();
    const startDate = new Date();
    
    switch (period) {
      case 'week':
        startDate.setDate(startDate.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(startDate.getMonth() - 1);
        break;
      case 'year':
        startDate.setFullYear(startDate.getFullYear() - 1);
        break;
      default:
        startDate.setMonth(startDate.getMonth() - 1);
    }
    
    // Build query filters
    const filters = {
      userId: auth.userId,
      recordDate: {
        gte: startDate,
        lte: endDate
      }
    };
    
    if (languageCode) {
      filters.languageCode = languageCode;
    }
    
    // Get progress records
    const progressRecords = await prisma.progressRecord.findMany({
      where: filters,
      orderBy: {
        recordDate: 'desc'
      }
    });
    
    // Get challenge completions
    const challengeCompletions = await prisma.userChallenge.findMany({
      where: {
        userId: auth.userId,
        status: 'COMPLETED',
        endDate: {
          gte: startDate,
          lte: endDate
        }
      },
      include: {
        challenge: {
          select: {
            title: true,
            languageCode: true,
            stakeAmount: true,
            yieldPercentage: true
          }
        }
      }
    });
    
    // Get practice minutes
    const practiceMinutes = await prisma.dailyProgress.findMany({
      where: {
        userChallenge: {
          userId: auth.userId
        },
        date: {
          gte: startDate,
          lte: endDate
        }
      },
      select: {
        date: true,
        minutesPracticed: true,
        userChallenge: {
          select: {
            challenge: {
              select: {
                languageCode: true
              }
            }
          }
        }
      }
    });
    
    // Aggregate practice minutes by day and language
    const practiceByDay = {};
    
    practiceMinutes.forEach(record => {
      const lang = record.userChallenge.challenge.languageCode;
      const dateStr = record.date.toISOString().split('T')[0]; // YYYY-MM-DD
      
      if (!practiceByDay[dateStr]) {
        practiceByDay[dateStr] = {};
      }
      
      if (!practiceByDay[dateStr][lang]) {
        practiceByDay[dateStr][lang] = 0;
      }
      
      practiceByDay[dateStr][lang] += record.minutesPracticed;
    });
    
    // Get current streaks for each language
    const userLanguages = await prisma.userLanguage.findMany({
      where: {
        userId: auth.userId
      }
    });
    
    const streaksByLanguage = {};
    
    for (const lang of userLanguages) {
      // Get daily progress records for this language
      const langProgress = await prisma.dailyProgress.findMany({
        where: {
          userChallenge: {
            userId: auth.userId,
            challenge: {
              languageCode: lang.languageCode
            }
          },
          completed: true
        },
        orderBy: {
          date: 'desc'
        },
        select: {
          date: true
        }
      });
      
      // Calculate current streak
      let streak = 0;
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // Check if there's a record for today
      const hasToday = langProgress.some(p => {
        const recordDate = new Date(p.date);
        recordDate.setHours(0, 0, 0, 0);
        return recordDate.getTime() === today.getTime();
      });
      
      if (hasToday) {
        streak = 1;
        
        // Check previous days
        let checkDate = new Date(today);
        checkDate.setDate(checkDate.getDate() - 1);
        
        while (true) {
          const hasDay = langProgress.some(p => {
            const recordDate = new Date(p.date);
            recordDate.setHours(0, 0, 0, 0);
            return recordDate.getTime() === checkDate.getTime();
          });
          
          if (hasDay) {
            streak++;
            checkDate.setDate(checkDate.getDate() - 1);
          } else {
            break;
          }
        }
      }
      
      streaksByLanguage[lang.languageCode] = streak;
    }
    
    // Compile analytics data
    const analytics = {
      progressRecords,
      challengeCompletions,
      practiceByDay,
      streaksByLanguage,
      summary: {
        totalPracticeMinutes: practiceMinutes.reduce((sum, record) => sum + record.minutesPracticed, 0),
        challengesCompleted: challengeCompletions.length,
        totalEarned: challengeCompletions.reduce((sum, challenge) => {
          const reward = challenge.challenge.stakeAmount * (1 + challenge.challenge.yieldPercentage / 100);
          return sum + reward;
        }, 0)
      }
    };
    
    return NextResponse.json(analytics);
  } catch (error) {
    console.error('Error fetching analytics:', error);
    return NextResponse.json({ error: 'Failed to fetch analytics' }, { status: 500 });
  }
}

================
File: app/api/users/language-stats/route.js
================
// app/api/users/language-stats/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const { searchParams } = new URL(request.url);
    const languageCode = searchParams.get('languageCode');
    
    if (!languageCode) {
      return NextResponse.json({ error: 'Language code is required' }, { status: 400 });
    }
    
    const userId = auth.userId;
    
    // Get user language data
    const userLanguage = await prisma.userLanguage.findUnique({
      where: {
        userId_languageCode: {
          userId,
          languageCode
        }
      }
    });
    
    if (!userLanguage) {
      return NextResponse.json({ error: 'User is not learning this language' }, { status: 404 });
    }
    
    // Get conversation data
    const conversations = await prisma.aIConversation.findMany({
      where: {
        userId,
        languageCode
      },
      orderBy: {
        startedAt: 'desc'
      },
      take: 100
    });
    
    // Calculate total practice time
    const totalMinutesPracticed = conversations.reduce((total, conv) => {
      return total + (conv.durationMinutes || 0);
    }, 0);
    
    // Get last practiced date
    const lastPracticed = conversations.length > 0 ? conversations[0].startedAt : null;
    
    // Get progress records for vocabulary size
    const latestProgress = await prisma.progressRecord.findFirst({
      where: {
        userId,
        languageCode
      },
      orderBy: {
        recordDate: 'desc'
      }
    });
    
    // Calculate streak
    const streak = await calculateStreak(userId, languageCode);
    
    // Create stats object
    const stats = {
      currentStreak: streak,
      vocabularySize: latestProgress?.vocabularySize || 0,
      totalMinutesPracticed,
      lastPracticed: lastPracticed?.toISOString() || null,
      grammarAccuracy: latestProgress?.grammarAccuracy || 0,
      speakingFluency: latestProgress?.speakingFluency || 0,
      proficiencyLevel: userLanguage.proficiencyLevel
    };
    
    return NextResponse.json(stats);
  } catch (error) {
    console.error('Error fetching language stats:', error);
    return NextResponse.json({ error: 'Failed to fetch language statistics' }, { status: 500 });
  }
}

// Helper function to calculate streak
async function calculateStreak(userId, languageCode) {
  // Get all conversation sessions ordered by date
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const conversations = await prisma.aIConversation.findMany({
    where: {
      userId,
      languageCode
    },
    select: {
      startedAt: true
    },
    orderBy: {
      startedAt: 'desc'
    }
  });
  
  if (conversations.length === 0) {
    return 0;
  }
  
  // Check if practiced today
  const latestDate = new Date(conversations[0].startedAt);
  latestDate.setHours(0, 0, 0, 0);
  
  if (latestDate.getTime() !== today.getTime()) {
    return 0; // No practice today, streak is 0
  }
  
  // Count consecutive days
  let streak = 1;
  let currentDate = new Date(today);
  
  for (let i = 1; i <= 100; i++) { // Limit to 100 days back
    currentDate.setDate(currentDate.getDate() - 1);
    
    // Check if there's a session for this day
    const hasPractice = conversations.some(conv => {
      const convDate = new Date(conv.startedAt);
      convDate.setHours(0, 0, 0, 0);
      return convDate.getTime() === currentDate.getTime();
    });
    
    if (hasPractice) {
      streak++;
    } else {
      break;
    }
  }
  
  return streak;
}

================
File: app/api/users/profile/route.js
================
// app/api/users/profile/route.js
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { verifyAuth } from '@/lib/auth/verify';

const prisma = new PrismaClient();

export async function GET(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const user = await prisma.user.findUnique({
      where: { id: auth.userId },
      include: {
        learningLanguages: true
      }
    });
    
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }
    
    return NextResponse.json({
      id: user.id,
      walletAddress: user.walletAddress,
      username: user.username,
      email: user.email,
      avatarUrl: user.avatarUrl,
      nativeLanguage: user.nativeLanguage,
      learningLanguages: user.learningLanguages,
      createdAt: user.createdAt
    });
  } catch (error) {
    console.error('Error fetching user profile:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}


// Update user profile
export async function PUT(request) {
  const auth = await verifyAuth();
  
  if (!auth.success) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    const body = await request.json();
    
    // Validate request body
    if (!body.username || !body.email) {
      return NextResponse.json({ error: 'Username and email are required' }, { status: 400 });
    }
    
    // Create transaction to update user and learning languages
    const updatedUser = await prisma.$transaction(async (tx) => {
      // Update user basic info
      const user = await tx.user.update({
        where: { id: auth.userId },
        data: {
          username: body.username,
          email: body.email,
          nativeLanguage: body.nativeLanguage,
          avatarUrl: body.avatarUrl,
        },
        include: {
          learningLanguages: true
        }
      });
      
      // Update learning languages if provided
      if (body.learningLanguages && body.learningLanguages.length > 0) {
        // Get existing language codes for this user
        const existingLanguages = user.learningLanguages.map(lang => lang.languageCode);
        
        // Find languages to add (not in existing languages)
        const languagesToAdd = body.learningLanguages.filter(
          lang => !existingLanguages.includes(lang.languageCode)
        );
        
        // Add new languages
        if (languagesToAdd.length > 0) {
          await Promise.all(
            languagesToAdd.map(lang => 
              tx.userLanguage.create({
                data: {
                  userId: auth.userId,
                  languageCode: lang.languageCode,
                  proficiencyLevel: lang.proficiencyLevel,
                }
              })
            )
          );
        }
        
        // Update existing languages
        await Promise.all(
          body.learningLanguages
            .filter(lang => existingLanguages.includes(lang.languageCode))
            .map(lang => 
              tx.userLanguage.update({
                where: {
                  userId_languageCode: {
                    userId: auth.userId,
                    languageCode: lang.languageCode
                  }
                },
                data: {
                  proficiencyLevel: lang.proficiencyLevel
                }
              })
            )
        );
      }
      
      // Return updated user with fresh learning languages
      return tx.user.findUnique({
        where: { id: auth.userId },
        include: {
          learningLanguages: true
        }
      });
    });
    
    return NextResponse.json({
      id: updatedUser.id,
      walletAddress: updatedUser.walletAddress,
      username: updatedUser.username,
      email: updatedUser.email,
      avatarUrl: updatedUser.avatarUrl,
      nativeLanguage: updatedUser.nativeLanguage,
      learningLanguages: updatedUser.learningLanguages,
      createdAt: updatedUser.createdAt
    });
  } catch (error) {
    console.error('Error updating user profile:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

================
File: app/auth/signin/page.jsx
================
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { ChevronRight } from "lucide-react";
import WalletConnectButton from "@/components/auth/WalletConnectButton";
import UserProfileForm from "@/components/auth/UserProfileForm";
import { ChevronLeft } from "lucide-react";

export default function SignIn() {
  const router = useRouter();
  const [step, setStep] = useState("connect"); // 'connect' or 'profile'
  const [walletData, setWalletData] = useState(null);
  const [error, setError] = useState(null);

  const handleWalletSuccess = (data) => {
    setWalletData(data);
    // If user is already registered and profile is complete, redirect to dashboard
    if (!data.isNewUser) {
      router.push("/dashboard");
      return;
    }
    // Otherwise, proceed to profile setup
    setStep("profile");
  };

  const handleWalletError = (errorMessage) => {
    setError(errorMessage);
  };

  const handleProfileSuccess = () => {
    router.push("/dashboard");
  };

  const handleProfileError = (errorMessage) => {
    setError(errorMessage);
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-100">
      <header className="bg-white py-4 shadow-sm">
        <div className="container mx-auto px-6">
          <div className="flex items-center">
            <div className="flex items-center space-x-2">
              {/* <Image
                src="/logo.png"
                alt="ShinoLearn Logo"
                width={800}
                height={800}
                className="rounded-lg"
              /> */}
              <span className="text-xl font-bold bg-gradient-to-r from-[#4d9fff] to-[#009ec2] bg-clip-text text-transparent">
                ShinoLearn
              </span>
            </div>
          </div>
        </div>
      </header>

      <main className="flex-1 flex items-center justify-center p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-10 max-w-5xl w-full">
          {/* Left Side */}
          <div className="bg-gradient-to-br from-[#e0f7ff] to-[#f0fdfd] p-10 rounded-3xl shadow-xl relative flex flex-col justify-center">
            <h1 className="text-2xl font-semibold text-gray-800 mb-1">
              Welcome to
            </h1>
            <h2 className="text-3xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-[#4d9fff] to-[#00d9ff] mb-4">
              ShinoLearn
            </h2>
            <p className="text-gray-600 mb-8">
              Master languages with cutting-edge AI technology
            </p>

            <div className="flex justify-center mb-8">
              <div className="w-52 h-52 relative">
                <Image
                  src="/ninja.png"
                  alt="Ninja Character"
                  layout="fill"
                  objectFit="contain"
                  className="drop-shadow-2xl"
                />
              </div>
            </div>

            <div className="flex justify-between items-center mt-6">
              {/* Language Info */}
              <div className="flex items-center space-x-3">
                <div className="bg-blue-100 p-2 rounded-full">
                  <ChevronRight className="w-5 h-5 text-blue-500" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-700">
                    30+ Languages
                  </p>
                  <p className="text-xs text-gray-500">To explore</p>
                </div>
              </div>

              {/* AI Powered */}
              <div className="flex items-center space-x-3">
                <div className="bg-teal-100 p-2 rounded-full">
                  <ChevronRight className="w-5 h-5 text-teal-500" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-700">
                    AI Powered
                  </p>
                  <p className="text-xs text-gray-500">Learning path</p>
                </div>
              </div>
            </div>
          </div>

          {/* Right Side */}
          <div className="bg-white p-10 rounded-3xl shadow-xl w-full">
            {error && (
              <div className="mb-6 p-4 bg-red-50 border border-red-100 text-red-600 rounded-2xl flex justify-between items-center max-w-full">
                <div className="flex-1 max-h-20 overflow-auto scrollbar-hide">
                  <p className="text-sm">{error}</p>
                </div>
                <button
                  className="cursor-pointer text-red-400 hover:text-red-600 focus:outline-none"
                  onClick={() => setError(null)}
                >
                  <span className="font-semibold">×</span>
                </button>
              </div>
            )}

            {step === "connect" ? (
              <div className="space-y-6 flex flex-col justify-center gap-5">
                <div>
                  <h1 className="text-2xl font-bold text-gray-800">Sign In</h1>
                  <p className="text-sm text-gray-500 mt-1">
                    Connect your wallet to continue your journey
                  </p>
                </div>

                <div className="bg-blue-50 p-4 rounded-2xl text-sm text-gray-600">
                  <p className="mb-2 font-medium text-gray-700 flex items-center space-x-2">
                    <span className="bg-blue-100 p-2 rounded-full">
                      <ChevronRight className="w-4 h-4 text-blue-500" />
                    </span>
                    <span>Why connect a wallet?</span>
                  </p>
                  <p className="ml-10 text-xs">
                    Your progress is securely stored on the blockchain, allowing
                    you to own your learning journey.
                  </p>
                </div>

                <div className="mt-4 flex justify-center">
                  <WalletConnectButton
                    onSuccess={handleWalletSuccess}
                    onError={handleWalletError}
                    className="w-full max-w-xs py-4 bg-gradient-to-r from-[#a0e9ff] to-[#4d9fff] text-white font-semibold rounded-2xl flex justify-center items-center space-x-2 shadow-md hover:shadow-lg transition-all"
                  />
                </div>

                <p className="text-xs text-center text-gray-500 mt-6">
                  By connecting, you agree to our{" "}
                  <a href="#" className="text-blue-500 hover:underline">
                    Terms of Service
                  </a>{" "}
                  and{" "}
                  <a href="#" className="text-blue-500 hover:underline">
                    Privacy Policy
                  </a>
                </p>
              </div>
            ) : (
              <div className="space-y-6">
                <div>
                  <h1 className="text-2xl font-bold text-gray-800">
                    Complete Your Profile
                  </h1>
                  <p className="text-sm text-gray-500 mt-1">
                    Personalize your learning experience
                  </p>
                </div>

                <div className="bg-gradient-to-r from-blue-50 to-teal-50 p-4 rounded-2xl mb-6">
                  <div className="flex items-center space-x-3">
                    <div className="bg-blue-400 text-white rounded-full w-8 h-8 flex items-center justify-center">
                      <ChevronRight className="w-4 h-4" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">
                        Wallet Connected
                      </p>
                      <p className="text-xs text-gray-500">
                        {walletData?.walletAddress.slice(0, 6)}...
                        {walletData?.walletAddress.slice(-4)}
                      </p>
                    </div>
                  </div>
                </div>

                <UserProfileForm
                  walletAddress={walletData?.walletAddress}
                  onSuccess={handleProfileSuccess}
                  onError={handleProfileError}
                  className="space-y-4"
                  buttonClassName="cursor-pointer w-full py-4 bg-gradient-to-r from-[#a0e9ff] to-[#4d9fff] text-white font-medium rounded-2xl flex items-center justify-center space-x-2 hover:opacity-90 transition-opacity"
                />
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}

================
File: app/dashboard/challenges/[id]/page.jsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import DashboardLayout from "@/components/layout/DashboardLayout";
import YieldInformation from "@/components/challenge/YieldInformation";
import JoinChallengeFlow from "@/components/challenge/JoinChallengeFlow";
import { useStaking } from "@/lib/web3/hooks/useStaking";
import { useContract } from "@/lib/web3/hooks/useContract";
import LoadingState from "@/components/ui/LoadingState";
import ErrorMessage from "@/components/ui/ErrorMessage";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";

export default function ChallengePage({ params }) {
  const router = useRouter();
  const id = params.id;
  const [challenge, setChallenge] = useState(null);
  const [userParticipation, setUserParticipation] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showJoinFlow, setShowJoinFlow] = useState(false);
  const [isCompletingChallenge, setIsCompletingChallenge] = useState(false);
  const [completionError, setCompletionError] = useState(null);
  const [completionStatus, setCompletionStatus] = useState(null);
  const [isExitingChallenge, setIsExitingChallenge] = useState(false);

  const { isConnected, signer } = useContract();
  const { getStakeDetails } = useStaking();

  useEffect(() => {
    async function fetchChallengeData() {
      try {
        setIsLoading(true);
        setError(null);

        // Fetch challenge details
        const challengeRes = await fetch(`/api/challenges/${id}`);

        if (!challengeRes.ok) {
          throw new Error("Failed to fetch challenge details");
        }

        const challengeData = await challengeRes.json();
        setChallenge(challengeData);

        // Check if user is already participating
        const participationRes = await fetch(
          `/api/challenges/user?challengeId=${id}`
        );

        if (participationRes.ok) {
          const participationData = await participationRes.json();

          if (participationData.length > 0) {
            const participation = participationData[0];

            // Fetch today's progress if the user is participating
            if (participation.status === "ACTIVE") {
              const todayRes = await fetch(
                `/api/challenges/daily-progress?userChallengeId=${participation.id}`
              );
              if (todayRes.ok) {
                const todayData = await todayRes.json();
                participation.todayProgress = todayData;
              }
            }

            // If user is connected to wallet, get on-chain stake details
            if (isConnected && signer) {
              try {
                const address = await signer.getAddress();
                const stakeDetails = await getStakeDetails(address, id);

                // Merge on-chain data with database data
                if (stakeDetails) {
                  participation.onChain = stakeDetails;
                }
              } catch (walletError) {
                console.error(
                  "Error fetching on-chain stake details:",
                  walletError
                );
                // We can still continue with database info if on-chain lookup fails
              }
            }

            setUserParticipation(participation);
          }
        }
      } catch (error) {
        console.error("Error fetching challenge data:", error);
        setError(error.message || "Failed to load challenge data");
      } finally {
        setIsLoading(false);
      }
    }

    if (id) {
      fetchChallengeData();
    }
  }, [id, isConnected, signer, getStakeDetails]);

  const renderProgressSection = () => {
    if (!userParticipation) return null;

    const { progressPercentage, currentStreak, longestStreak, status } =
      userParticipation;

    return (
      <div className="bg-white rounded-lg border border-slate-200 p-4 shadow-sm mb-6">
        <h3 className="text-lg font-medium text-slate-800 mb-4">
          Your Progress
        </h3>

        <div className="space-y-4">
          {/* Overall progress */}
          <div>
            <div className="flex justify-between text-sm text-slate-600 mb-1">
              <span>Overall Progress</span>
              <span>{progressPercentage}%</span>
            </div>
            <div className="w-full bg-slate-200 rounded-full h-2">
              <div
                className="bg-gradient-to-r from-cyan-400 to-teal-500 h-2 rounded-full"
                style={{ width: `${progressPercentage}%` }}
              ></div>
            </div>
          </div>

          {/* Today's progress */}
          {userParticipation.status === "ACTIVE" &&
            userParticipation.todayProgress && (
              <div>
                <div className="flex justify-between text-sm text-slate-600 mb-1">
                  <span>Today's Practice</span>
                  <span>
                    {userParticipation.todayProgress.minutesPracticed}/
                    {challenge.dailyRequirement} minutes
                  </span>
                </div>
                <div className="w-full bg-slate-200 rounded-full h-2">
                  <div
                    className={`h-2 rounded-full ${
                      userParticipation.todayProgress.completed
                        ? "bg-green-500"
                        : "bg-gradient-to-r from-cyan-400 to-teal-500"
                    }`}
                    style={{
                      width: `${Math.min(100, (userParticipation.todayProgress.minutesPracticed / challenge.dailyRequirement) * 100)}%`,
                    }}
                  ></div>
                </div>
                {userParticipation.todayProgress.completed && (
                  <p className="text-sm text-green-600 mt-1">
                    ✓ Daily goal completed! Great job!
                  </p>
                )}
              </div>
            )}

          {/* Streak info */}
          <div className="flex space-x-4">
            <div className="flex-1 bg-slate-50 rounded-lg p-3 border border-slate-200">
              <div className="text-sm text-slate-500">Current Streak</div>
              <div className="font-bold text-lg">{currentStreak} days</div>
            </div>

            <div className="flex-1 bg-slate-50 rounded-lg p-3 border border-slate-200">
              <div className="text-sm text-slate-500">Longest Streak</div>
              <div className="font-bold text-lg">{longestStreak} days</div>
            </div>
          </div>

          {userParticipation.status === "ACTIVE" &&
            userParticipation.progressPercentage >= 80 && (
              <div>
                {completionError && (
                  <div className="mb-4 bg-red-50 text-red-700 border border-red-200 rounded-md p-3">
                    <p className="font-medium">Error completing challenge</p>
                    <p className="text-sm">{completionError}</p>
                  </div>
                )}

                <button
                  onClick={handleCompleteChallenge}
                  disabled={isCompletingChallenge}
                  className="cursor-pointer w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white px-6 py-3 rounded-lg font-medium shadow-md transition-all disabled:opacity-50 flex items-center justify-center"
                >
                  {isCompletingChallenge ? (
                    <>
                      <LoadingSpinner
                        size="small"
                        color="white"
                        className="mr-2"
                      />
                      Processing...
                    </>
                  ) : (
                    "Complete Challenge & Claim Rewards"
                  )}
                </button>
              </div>
            )}

          {/* Exit Challenge option for non-hardcore challenges */}
          {userParticipation.status === "ACTIVE" && !challenge.isHardcore && (
            <div className="mt-4">
              <button
                onClick={handleExitChallenge}
                disabled={isExitingChallenge}
                className="cursor-pointer w-full border border-red-300 text-red-600 px-6 py-3 rounded-lg font-medium shadow-sm transition-all hover:bg-red-50 disabled:opacity-50 flex items-center justify-center"
              >
                {isExitingChallenge ? (
                  <>
                    <LoadingSpinner
                      size="small"
                      color="red"
                      className="mr-2"
                    />
                    Processing...
                  </>
                ) : (
                  "Exit Challenge"
                )}
              </button>
              <p className="text-xs text-gray-500 mt-2 text-center">
                You can exit this challenge, but you'll lose your progress.
              </p>
            </div>
          )}

          {/* Show completion status if available */}
          {completionStatus && (
            <div
              className={`mt-4 p-4 rounded-md ${
                completionStatus.success
                  ? "bg-green-50 border border-green-200 text-green-700"
                  : "bg-red-50 border border-red-200 text-red-700"
              }`}
            >
              <p className="font-medium">
                {completionStatus.success ? "Success!" : "Error"}
              </p>
              <p className="text-sm mt-1">{completionStatus.message}</p>

              {completionStatus.transactionHash && (
                <a
                  href={`https://mumbai.polygonscan.com/tx/${completionStatus.transactionHash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-xs mt-2 inline-block underline"
                >
                  View transaction
                </a>
              )}
            </div>
          )}

          {/* If challenge is completed */}
          {status === "COMPLETED" && (
            <div className="bg-green-50 text-green-700 border border-green-200 rounded-md p-3">
              <p className="font-medium">Challenge Completed!</p>
              <p className="text-sm mt-1">
                You successfully completed this challenge and earned your
                rewards.
              </p>
            </div>
          )}

          {/* If challenge is failed */}
          {status === "FAILED" && (
            <div className="bg-red-50 text-red-700 border border-red-200 rounded-md p-3">
              <p className="font-medium">Challenge Failed</p>
              <p className="text-sm mt-1">
                Unfortunately, this challenge was not completed successfully.
              </p>
            </div>
          )}

          {/* If challenge is withdrawn */}
          {status === "WITHDRAWN" && (
            <div className="bg-amber-50 text-amber-700 border border-amber-200 rounded-md p-3">
              <p className="font-medium">Challenge Withdrawn</p>
              <p className="text-sm mt-1">
                You've withdrawn from this challenge.
              </p>
            </div>
          )}
        </div>
      </div>
    );
  };

  const handleCompleteChallenge = async () => {
    if (!userParticipation || userParticipation.status !== "ACTIVE") {
      return;
    }

    try {
      setIsCompletingChallenge(true);
      setCompletionError(null);

      const res = await fetch("/api/challenges/complete", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userChallengeId: userParticipation.id,
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "Failed to complete challenge");
      }

      const data = await res.json();

      // Show success message
      setCompletionStatus({
        success: true,
        message: `Congratulations! You've completed the challenge and earned ${formatCurrency(data.reward)}`,
        transactionHash: data.transactionHash,
      });

      // Refresh challenge data after a short delay
      setTimeout(() => {
        router.refresh();
      }, 3000);
    } catch (error) {
      console.error("Error completing challenge:", error);
      setCompletionError(error.message || "Failed to complete challenge");
      setCompletionStatus({
        success: false,
        message: error.message || "Failed to complete challenge",
      });
    } finally {
      setIsCompletingChallenge(false);
    }
  };
  const handleExitChallenge = async () => {
    if (!userParticipation || userParticipation.status !== "ACTIVE") {
      return;
    }

    // Confirm with user
    if (!confirm("Are you sure you want to exit this challenge? You'll lose your progress.")) {
      return;
    }

    try {
      setIsExitingChallenge(true);
      setCompletionError(null);

      const res = await fetch(`/api/challenges/${challenge.id}/exit`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        }
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "Failed to exit challenge");
      }

      const data = await res.json();

      // Show success message
      setCompletionStatus({
        success: true,
        message: `You've successfully exited the challenge with ${data.progress}% progress.`,
      });

      // Refresh challenge data after a short delay
      setTimeout(() => {
        router.refresh();
      }, 3000);
    } catch (error) {
      console.error("Error exiting challenge:", error);
      setCompletionError(error.message || "Failed to exit challenge");
      setCompletionStatus({
        success: false,
        message: error.message || "Failed to exit challenge",
      });
    } finally {
      setIsExitingChallenge(false);
    }
  };

  const handleJoinSuccess = (txHash) => {
    // Refresh the page data after successful join
    router.refresh();
    setShowJoinFlow(false);
  };

  // Get language flag emoji
  const getLanguageFlag = (code) => {
    const flags = {
      ja: "🇯🇵",
      ko: "🇰🇷",
      zh: "🇨🇳",
      en: "🇬🇧",
      es: "🇪🇸",
      fr: "🇫🇷",
      de: "🇩🇪",
      it: "🇮🇹",
      ru: "🇷🇺",
    };
    return flags[code] || "🌐";
  };

  // Format currency
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(amount);
  };

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8">
          <LoadingState message="Loading challenge details..." height="96" />
        </div>
      </DashboardLayout>
    );
  }

  if (error) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8">
          <ErrorMessage
            title="Failed to load challenge"
            message={error}
            retry={() => router.refresh()}
          />
        </div>
      </DashboardLayout>
    );
  }

  if (!challenge) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8">
          <div className="text-center max-w-lg mx-auto">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">
              Challenge Not Found
            </h1>
            <p className="text-gray-600 mb-6">
              The challenge you're looking for doesn't exist or has been
              removed.
            </p>
            <button
              onClick={() => router.push("/dashboard/challenges")}
              className="cursor-pointer px-4 py-2 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-lg hover:from-cyan-600 hover:to-teal-600"
            >
              View All Challenges
            </button>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Show Join Flow if requested
  if (showJoinFlow) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8">
          <JoinChallengeFlow
            challenge={challenge}
            onSuccess={handleJoinSuccess}
            onCancel={() => setShowJoinFlow(false)}
          />
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Challenge header */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden mb-8">
            <div className="bg-gradient-to-r from-cyan-500 to-teal-500 px-6 py-4 text-white">
              <div className="flex items-center">
                <span className="text-3xl mr-3">
                  {getLanguageFlag(challenge.languageCode)}
                </span>
                <h1 className="text-2xl font-bold">{challenge.title}</h1>
              </div>
            </div>

            <div className="p-6">
              <p className="text-gray-600 mb-6">{challenge.description}</p>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <div className="bg-gray-50 p-4 rounded-lg border border-gray-100">
                  <h3 className="font-medium text-gray-700 mb-2">Duration</h3>
                  <p className="text-2xl font-bold text-gray-800">
                    {challenge.durationDays} days
                  </p>
                </div>

                <div className="bg-gray-50 p-4 rounded-lg border border-gray-100">
                  <h3 className="font-medium text-gray-700 mb-2">
                    Daily Requirement
                  </h3>
                  <p className="text-2xl font-bold text-gray-800">
                    {challenge.dailyRequirement} min/day
                  </p>
                </div>

                <div className="bg-gray-50 p-4 rounded-lg border border-gray-100">
                  <h3 className="font-medium text-gray-700 mb-2">
                    Stake Amount
                  </h3>
                  <p className="text-2xl font-bold text-gray-800">
                    {formatCurrency(challenge.stakeAmount)}
                  </p>
                </div>
              </div>

              {/* Yield Information */}
              {userParticipation ? (
                <YieldInformation
                  stakedAmount={challenge.stakeAmount}
                  yieldPercentage={challenge.yieldPercentage}
                  durationDays={challenge.durationDays}
                  challengeStartDate={userParticipation.startDate}
                  isHardcore={challenge.isHardcore}
                />
              ) : (
                <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 mb-6">
                  <h3 className="font-medium text-amber-800 mb-2">
                    Reward Potential
                  </h3>
                  <p className="text-gray-700">
                    Complete this challenge to earn back your{" "}
                    {formatCurrency(challenge.stakeAmount)} stake plus up to{" "}
                    {challenge.yieldPercentage}% in additional rewards.
                  </p>
                </div>
              )}

              {challenge.isHardcore && !userParticipation && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                  <h3 className="font-medium text-red-800 mb-2">
                    Hardcore Challenge
                  </h3>
                  <p className="text-gray-700">
                    This is a hardcore challenge. If you fail to meet the daily
                    requirements, your stake will be forfeited to the community
                    pool.
                  </p>
                </div>
              )}

              {userParticipation ? (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                  <h3 className="font-medium text-green-800 mb-2">
                    You're Participating!
                  </h3>
                  <p className="text-gray-700 mb-4">
                    You joined this challenge on{" "}
                    {new Date(userParticipation.startDate).toLocaleDateString()}
                    . Your current progress is{" "}
                    {userParticipation.progressPercentage}%.
                  </p>

                  <button
                    onClick={() =>
                      router.push(
                        `/dashboard/learn?challengeId=${challenge.id}`
                      )
                    }
                    className="cursor-pointer bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-6 py-3 rounded-lg font-medium shadow-md transition-all w-full"
                  >
                    Continue Practice
                  </button>
                </div>
              ) : (
                <button
                  onClick={() => setShowJoinFlow(true)}
                  className="cursor-pointer bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-6 py-3 rounded-lg font-medium shadow-md transition-all w-full disabled:opacity-50"
                >
                  {`Stake ${formatCurrency(challenge.stakeAmount)} & Join Challenge`}
                </button>
              )}
            </div>
          </div>

          {/* User Progress Section */}
          {renderProgressSection()}

          {/* Challenge details */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-100">
              <h2 className="text-xl font-bold text-gray-800">
                How This Challenge Works
              </h2>
            </div>

            <div className="p-6">
              <div className="space-y-6">
                <div className="flex">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-cyan-100 flex items-center justify-center text-cyan-600 mr-4">
                    1
                  </div>
                  <div>
                    <h3 className="font-medium text-gray-800 mb-1">
                      Stake your USDC
                    </h3>
                    <p className="text-gray-600">
                      Commit to your learning by staking{" "}
                      {formatCurrency(challenge.stakeAmount)}. Your funds are
                      securely locked in our smart contract.
                    </p>
                  </div>
                </div>

                <div className="flex">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-cyan-100 flex items-center justify-center text-cyan-600 mr-4">
                    2
                  </div>
                  <div>
                    <h3 className="font-medium text-gray-800 mb-1">
                      Practice daily
                    </h3>
                    <p className="text-gray-600">
                      Complete at least {challenge.dailyRequirement} minutes of
                      language practice each day with our AI tutors.
                    </p>
                  </div>
                </div>

                <div className="flex">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-cyan-100 flex items-center justify-center text-cyan-600 mr-4">
                    3
                  </div>
                  <div>
                    <h3 className="font-medium text-gray-800 mb-1">
                      Track your progress
                    </h3>
                    <p className="text-gray-600">
                      Monitor your learning streak and vocabulary growth on your
                      dashboard. Our AI will evaluate your language
                      improvements.
                    </p>
                  </div>
                </div>

                <div className="flex">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-cyan-100 flex items-center justify-center text-cyan-600 mr-4">
                    4
                  </div>
                  <div>
                    <h3 className="font-medium text-gray-800 mb-1">
                      Earn rewards
                    </h3>
                    <p className="text-gray-600">
                      Complete the {challenge.durationDays}-day challenge to
                      earn back your stake plus additional rewards from
                      generated yield.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}

================
File: app/dashboard/challenges/create/page.jsx
================
'use client';

// app/dashboard/challenges/create/page.jsx
import dynamic from 'next/dynamic';
import { Suspense } from 'react';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';

// Dynamically import the challenge creation form to avoid hydration issues with wallet connection
const CreateChallengeForm = dynamic(
  () => import('@/components/challenge/CreateChallengeForm'),
  { 
    ssr: false,
    loading: () => (
      <div className="flex justify-center items-center py-12">
        <LoadingSpinner size="large" />
      </div>
    )
  }
);

export default function Page() {
  return (
    <Suspense fallback={
      <DashboardLayout>
        <div className="py-8">
          <div className="max-w-3xl mx-auto text-center">
            <LoadingSpinner size="large" />
            <p className="mt-4 text-gray-500">Loading challenge creation form...</p>
          </div>
        </div>
      </DashboardLayout>
    }>
      <CreateChallengeForm />
    </Suspense>
  );
}

================
File: app/dashboard/challenges/page.jsx
================
// app/dashboard/challenges/page.jsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import DashboardLayout from "@/components/layout/DashboardLayout";
import ChallengeCard from "@/components/dashboard/ChallengeCard";
import LoadingState from "@/components/ui/LoadingState";
import EmptyState from "@/components/ui/EmptyState";

export default function ChallengesPage() {
  const router = useRouter();
  const [challenges, setChallenges] = useState([]);
  const [activeChallenges, setActiveChallenges] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    async function fetchChallenges() {
      try {
        setIsLoading(true);

        // Fetch active challenges for this user
        const activeRes = await fetch("/api/challenges/user?status=ACTIVE");

        if (!activeRes.ok) {
          throw new Error("Failed to fetch active challenges");
        }

        const activeData = await activeRes.json();
        setActiveChallenges(activeData);

        // Fetch available challenges
        const availableRes = await fetch("/api/challenges");

        if (!availableRes.ok) {
          throw new Error("Failed to fetch available challenges");
        }

        const availableData = await availableRes.json();
        setChallenges(availableData);
      } catch (error) {
        console.error("Error fetching challenges:", error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    }

    fetchChallenges();
  }, []);

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8 px-4">
          <LoadingState message="Loading challenges..." height="64" />
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="min-h-screen px-4 py-8">
        <div className="max-w-7xl mx-auto">
          {/* Page Header */}
          <div className="flex flex-col md:flex-row justify-between items-start md:items-end gap-6 mb-12">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                Language Challenges
              </h1>
              <p className="text-lg text-gray-600 max-w-2xl">
                Level up your skills through focused challenges and community
                learning
              </p>
            </div>
            <Link
              href="/dashboard/challenges/create"
              className="flex items-center justify-center gap-2 bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-6 py-3 rounded-xl font-medium shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-0.5"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                  clipRule="evenodd"
                />
              </svg>
              Create New Challenge
            </Link>
          </div>

          {error && (
            <div className="mb-8 bg-red-50 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-sm">
              <div className="flex items-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                    clipRule="evenodd"
                  />
                </svg>
                <h3 className="font-bold">Error loading challenges</h3>
              </div>
              <p className="ml-7 mt-1 text-sm">{error}</p>
            </div>
          )}

          {/* Active Challenges Section */}
          <section className="mb-16">
            <div className="flex items-center mb-8">
              <div className="w-3 h-8 bg-gradient-to-b from-cyan-500 to-teal-500 rounded-full mr-3"></div>
              <h2 className="text-2xl font-bold text-gray-900">
                Your Active Challenges
              </h2>
              <span className="ml-auto bg-cyan-100 text-cyan-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                {activeChallenges.length} ongoing
              </span>
            </div>

            {activeChallenges.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {activeChallenges.map((challenge) => (
                  <ChallengeCard
                    key={challenge.id}
                    challenge={challenge.challenge}
                    userChallenge={challenge}
                    isActive={true}
                    onClick={() =>
                      router.push(
                        `/dashboard/challenges/${challenge.challengeId}`
                      )
                    }
                  />
                ))}
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
                <div className="mx-auto w-24 h-24 bg-blue-50 rounded-full flex items-center justify-center mb-4">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-10 w-10 text-blue-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  No Active Challenges
                </h3>
                <p className="text-gray-600 mb-6 max-w-md mx-auto">
                  Join an existing challenge or create your own to track your
                  progress and compete with others!
                </p>
                <button
                  onClick={() => router.push("/dashboard/challenges/create")}
                  className="cursor-pointer inline-flex items-center px-6 py-3 bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white font-medium rounded-lg shadow-md transition-all"
                >
                  Create Your First Challenge
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 ml-2"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </button>
              </div>
            )}
          </section>

          {/* Available Challenges Section */}
          <section className="mb-8">
            <div className="flex items-center mb-8">
              <div className="w-3 h-8 bg-gradient-to-b from-teal-500 to-cyan-500 rounded-full mr-3"></div>
              <h2 className="text-2xl font-bold text-gray-900">
                Available Challenges
              </h2>
              <span className="ml-auto bg-teal-100 text-teal-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                {challenges.length} total
              </span>
            </div>

            {challenges.filter(
              (c) => !activeChallenges.some((ac) => ac.challengeId === c.id)
            ).length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {challenges
                  .filter(
                    (c) =>
                      !activeChallenges.some((ac) => ac.challengeId === c.id)
                  )
                  .map((challenge) => (
                    <ChallengeCard
                      key={challenge.id}
                      challenge={challenge}
                      isActive={false}
                      onClick={() =>
                        router.push(`/dashboard/challenges/${challenge.id}`)
                      }
                    />
                  ))}
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
                <div className="mx-auto w-24 h-24 bg-purple-50 rounded-full flex items-center justify-center mb-4">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-10 w-10 text-purple-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  No Available Challenges
                </h3>
                <p className="text-gray-600 mb-6 max-w-md mx-auto">
                  Be the pioneer! Create the first challenge and inspire others
                  to join your language learning journey.
                </p>
                <button
                  onClick={() => router.push("/dashboard/challenges/create")}
                  className="cursor-pointer inline-flex items-center px-6 py-3 bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white font-medium rounded-lg shadow-md transition-all"
                >
                  Start a New Challenge
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 ml-2"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </button>
              </div>
            )}
          </section>

          {/* Community CTA */}
          <div className="bg-gradient-to-r from-cyan-500 to-teal-500 rounded-2xl p-8 md:p-10 text-white shadow-xl mt-12 mb-10">
            <div className="flex flex-col md:flex-row items-center">
              <div className="flex-1 mb-6 md:mb-0">
                <h3 className="text-2xl font-bold mb-2">
                  Create Your Own Challenge
                </h3>
                <p className="opacity-90 max-w-lg">
                  Design a custom challenge with your goals and invite friends
                  to join. Set the rules, duration, and rewards!
                </p>
              </div>
              <button
                onClick={() => router.push("/dashboard/challenges/create")}
                className="cursor-pointer flex-shrink-0 bg-white text-cyan-600 hover:bg-gray-100 font-bold px-8 py-3 rounded-lg shadow-md transition-colors flex items-center gap-2"
              >
                Get Started
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                    clipRule="evenodd"
                  />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}

================
File: app/dashboard/learn/conversation/page.jsx
================
'use client';
import ConversationInterface from '@/components/learn/ConversationInterface'
import React from 'react'
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import ErrorMessage from '@/components/ui/ErrorMessage';

const CoversationPage = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [userChallenge, setUserChallenge] = useState(null);
  const [challengeId, setChallengeId] = useState(null);
  const [languageCode, setLanguageCode] = useState('en');
  const [isLoading, setIsLoading] = useState(true);
  const [showConversation, setShowConversation] = useState(false);
  
    
  useEffect(() => {
    async function fetchUserChallengeData() {
      try {
        setIsLoading(true);
        const id = searchParams.get('challengeId');
        
        if (id) {
          setChallengeId(id);
          
          // Fetch challenge participation details
          const res = await fetch(`/api/challenges/user?challengeId=${id}`);
          
          if (res.ok) {
            const data = await res.json();
            if (data.length > 0) {
              setUserChallenge(data[0]);
              
              // Fetch language code from challenge
              const challengeRes = await fetch(`/api/challenges/${id}`);
              if (challengeRes.ok) {
                const challengeData = await challengeRes.json();
                setLanguageCode(challengeData.languageCode);
              }
            }
          }
        } else {
          // No challenge ID provided, use user's preferred language
          const userRes = await fetch('/api/users/profile');
          if (userRes.ok) {
            const userData = await userRes.json();
            if (userData.learningLanguages && userData.learningLanguages.length > 0) {
              setLanguageCode(userData.learningLanguages[0].languageCode);
            }
          }
        }
      } catch (error) {
        console.error('Error fetching challenge data:', error);
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchUserChallengeData();
  }, [searchParams]);
  
  return (
    <div>
        <ConversationInterface  languageCode={languageCode} 
        userChallengeId={userChallenge?.id}  />
    </div>
  )
}

export default CoversationPage

================
File: app/dashboard/learn/grammar/page.jsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
import ErrorMessage from "@/components/ui/ErrorMessage";

export default function GrammarPracticePage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [languageCode, setLanguageCode] = useState("");
  const [proficiencyLevel, setProficiencyLevel] = useState("");
  const [userChallengeId, setUserChallengeId] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [isAnswerChecked, setIsAnswerChecked] = useState(false);
  const [score, setScore] = useState(0);
  const [isSessionComplete, setIsSessionComplete] = useState(false);
  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false);
  const [grammarConcepts, setGrammarConcepts] = useState([]);

  useEffect(() => {
    // Load language and challenge data from URL parameters
    const challengeId = searchParams.get("challengeId");
    const language = searchParams.get("language");

    if (language) {
      setLanguageCode(language);
    }

    async function loadInitialData() {
      try {
        setIsLoading(true);
        setError(null);

        // If there's a challenge ID, get its details
        if (challengeId) {
          const challengeRes = await fetch(`/api/challenges/${challengeId}`);
          if (!challengeRes.ok) {
            throw new Error("Failed to fetch challenge details");
          }

          const challengeData = await challengeRes.json();
          setLanguageCode(challengeData.languageCode);
          setProficiencyLevel(challengeData.proficiencyLevel);

          // Get user challenge data to track progress
          const userChallengeRes = await fetch(
            `/api/challenges/user?challengeId=${challengeId}`
          );
          if (userChallengeRes.ok) {
            const userChallengeData = await userChallengeRes.json();
            if (userChallengeData.length > 0) {
              setUserChallengeId(userChallengeData[0].id);
            }
          }
        } else if (language) {
          // If no challenge but language is specified, get user's proficiency level
          const profileRes = await fetch("/api/users/profile");
          if (profileRes.ok) {
            const profileData = await profileRes.json();
            const learningLanguage = profileData.learningLanguages?.find(
              (lang) => lang.languageCode === language
            );
            if (learningLanguage) {
              setProficiencyLevel(learningLanguage.proficiencyLevel);
            } else {
              setProficiencyLevel("BEGINNER");
            }
          } else {
            setProficiencyLevel("BEGINNER"); // Default if profile fetch fails
          }
        } else {
          // If no parameters, redirect to learn page
          router.push("/dashboard/learn");
          return;
        }
      } catch (error) {
        console.error("Error loading grammar practice data:", error);
        setError("Failed to load practice data. Please try again.");
      } finally {
        setIsLoading(false);
      }
    }

    loadInitialData();
  }, [searchParams, router]);

  // Generate questions when language and proficiency level are set
  useEffect(() => {
    if (
      languageCode &&
      proficiencyLevel &&
      !isGeneratingQuestions &&
      questions.length === 0
    ) {
      generateGrammarQuestions();
    }
  }, [languageCode, proficiencyLevel]);

  // Function to generate grammar questions using API
  const generateGrammarQuestions = async () => {
    if (!languageCode || !proficiencyLevel || isGeneratingQuestions) return;

    try {
      setIsGeneratingQuestions(true);
      setError(null);

      // Call the API to generate grammar questions
      const response = await fetch("/api/learn/grammar/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          languageCode,
          proficiencyLevel,
          count: 10, // Request 10 questions
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error || "Failed to generate grammar questions"
        );
      }

      const data = await response.json();
      setQuestions(data.questions);

      // Extract grammar concepts for tracking
      const concepts = data.questions
        .map((q) => q.grammarConcept)
        .filter(Boolean);
      setGrammarConcepts(concepts);
    } catch (error) {
      console.error("Error generating grammar questions:", error);
      setError("Failed to generate grammar questions. Please try again.");
    } finally {
      setIsGeneratingQuestions(false);
    }
  };

  // Function to handle answer selection
  const handleAnswerSelect = (answerIndex) => {
    if (isAnswerChecked) return; // Prevent changing answer after checking
    setSelectedAnswer(answerIndex);
  };

  // Function to check the selected answer
  const checkAnswer = () => {
    if (selectedAnswer === null) return;

    const currentQuestion = questions[currentQuestionIndex];
    const isCorrect = selectedAnswer === currentQuestion.correctAnswerIndex;

    if (isCorrect) {
      setScore((prevScore) => prevScore + 1);
    }

    setIsAnswerChecked(true);
  };

  // Function to move to the next question
  const handleNextQuestion = async () => {
    setSelectedAnswer(null);
    setIsAnswerChecked(false);

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);
    } else {
      // End of questions, update progress
      setIsSessionComplete(true);

      if (userChallengeId) {
        // Update challenge progress
        try {
          await fetch("/api/challenges/update-progress", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              userChallengeId,
              minutes: 10, // Assume 10 minutes of practice for grammar
              isSessionEnd: true,
              activityType: "GRAMMAR",
            }),
          });
        } catch (error) {
          console.error("Error updating challenge progress:", error);
        }
      }

      // Save grammar practice results
      try {
        await fetch("/api/learn/grammar/save-result", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            languageCode,
            proficiencyLevel,
            score,
            totalQuestions: questions.length,
            userChallengeId: userChallengeId || null,
            grammarConcepts,
          }),
        });
      } catch (error) {
        console.error("Error saving grammar practice results:", error);
      }
    }
  };

  // Function to restart the practice or go back to dashboard
  const handleFinish = () => {
    if (userChallengeId) {
      router.push(`/dashboard/challenges/${searchParams.get("challengeId")}`);
    } else {
      router.push("/dashboard/learn");
    }
  };

  // Render functions for different states
  const renderQuestion = () => {
    const currentQuestion = questions[currentQuestionIndex];

    return (
      <div className="space-y-6">
        <div className="text-center mb-8">
          <h1 className="text-xl font-bold text-gray-900">Grammar Practice</h1>
          <p className="text-sm text-gray-500">
            Question {currentQuestionIndex + 1} of {questions.length}
          </p>
          <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
            <div
              className="bg-gradient-to-r from-green-400 to-green-500 h-2 rounded-full"
              style={{
                width: `${((currentQuestionIndex + 1) / questions.length) * 100}%`,
              }}
            ></div>
          </div>
        </div>

        <div className="bg-white shadow-sm rounded-lg p-6 border border-gray-200">
          {currentQuestion.grammarConcept && (
            <div className="mb-4">
              <span className="text-xs font-medium px-2 py-1 bg-green-100 text-green-800 rounded-full">
                {currentQuestion.grammarConcept}
              </span>
            </div>
          )}

          <h2 className="text-lg font-medium text-gray-900 mb-4">
            {currentQuestion.question}
          </h2>

          <div className="space-y-3">
            {currentQuestion.options.map((option, index) => (
              <div
                key={index}
                className={`p-3 rounded-lg border ${
                  selectedAnswer === index
                    ? isAnswerChecked
                      ? index === currentQuestion.correctAnswerIndex
                        ? "bg-green-50 border-green-500"
                        : "bg-red-50 border-red-500"
                      : "bg-green-50 border-green-500"
                    : "border-gray-200 hover:border-gray-300"
                } cursor-pointer transition-colors`}
                onClick={() => handleAnswerSelect(index)}
              >
                <div className="flex items-center">
                  <div
                    className={`w-6 h-6 rounded-full mr-3 flex items-center justify-center ${
                      selectedAnswer === index
                        ? isAnswerChecked
                          ? index === currentQuestion.correctAnswerIndex
                            ? "bg-green-500 text-white"
                            : "bg-red-500 text-white"
                          : "bg-green-500 text-white"
                        : "bg-gray-100"
                    }`}
                  >
                    {String.fromCharCode(65 + index)}
                  </div>
                  <span className="text-gray-900">{option}</span>
                </div>
              </div>
            ))}
          </div>

          {isAnswerChecked && (
            <div className="mt-4 p-4 rounded-lg bg-blue-50 border border-blue-200">
              <p className="text-blue-800">
                <span className="font-medium">Explanation:</span>{" "}
                {currentQuestion.explanation}
              </p>
            </div>
          )}

          <div className="mt-6 flex justify-end">
            {!isAnswerChecked ? (
              <button
                onClick={checkAnswer}
                disabled={selectedAnswer === null}
                className="cursor-pointer px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg disabled:opacity-50"
              >
                Check Answer
              </button>
            ) : (
              <button
                onClick={handleNextQuestion}
                className="cursor-pointer px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg"
              >
                {currentQuestionIndex < questions.length - 1
                  ? "Next Question"
                  : "Finish Practice"}
              </button>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderResults = () => {
    const percentage = Math.round((score / questions.length) * 100);

    return (
      <div className="text-center">
        <div className="mb-8">
          <h1 className="text-2xl font-bold text-gray-900">
            Practice Complete!
          </h1>
          <p className="text-gray-600 mt-2">
            You've completed today's grammar practice.
          </p>
        </div>

        <div className="bg-white shadow-sm rounded-lg p-8 border border-gray-200 max-w-md mx-auto">
          <div className="mb-6">
            <div className="relative w-32 h-32 mx-auto">
              <div className="absolute inset-0 rounded-full bg-green-100 flex items-center justify-center">
                <span className="text-3xl font-bold text-green-600">
                  {percentage}%
                </span>
              </div>
              <svg className="w-32 h-32" viewBox="0 0 100 100">
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="#e2e8f0"
                  strokeWidth="8"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="#22c55e"
                  strokeWidth="8"
                  strokeDasharray={`${percentage * 2.83} 283`}
                  strokeLinecap="round"
                  transform="rotate(-90 50 50)"
                />
              </svg>
            </div>
          </div>

          <p className="text-lg font-medium">
            You scored {score} out of {questions.length} questions
          </p>

          <div className="mt-2 mb-6 text-gray-600">
            {percentage >= 80 ? (
              <p>Excellent work! Your grammar is very strong.</p>
            ) : percentage >= 60 ? (
              <p>Good job! Keep practicing to improve your grammar skills.</p>
            ) : (
              <p>
                Keep practicing to improve your understanding of grammar rules.
              </p>
            )}
          </div>

          {grammarConcepts.length > 0 && (
            <div className="mb-6 text-left">
              <p className="font-medium text-gray-700 mb-2">
                Grammar concepts covered:
              </p>
              <div className="flex flex-wrap gap-2">
                {[...new Set(grammarConcepts)].map((concept, index) => (
                  <span
                    key={index}
                    className="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full"
                  >
                    {concept}
                  </span>
                ))}
              </div>
            </div>
          )}

          <div className="flex flex-col space-y-3">
            <button
              onClick={() => {
                setCurrentQuestionIndex(0);
                setSelectedAnswer(null);
                setIsAnswerChecked(false);
                setScore(0);
                setIsSessionComplete(false);
                generateGrammarQuestions();
              }}
              className="cursor-pointer px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg"
            >
              Practice Again
            </button>

            <button
              onClick={handleFinish}
              className="cursor-pointer px-4 py-2 border border-gray-300 text-gray-700 rounded-lg"
            >
              Return to Dashboard
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Render loading state
  if (isLoading || isGeneratingQuestions) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8 px-4">
          <div className="flex flex-col justify-center items-center min-h-[400px]">
            <LoadingSpinner size="large" />
            <p className="mt-4 text-gray-500">
              {isGeneratingQuestions
                ? "Generating grammar questions..."
                : "Loading practice..."}
            </p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Render error state
  if (error) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8 px-4">
          <ErrorMessage
            title="Failed to load grammar practice"
            message={error}
            retry={() => {
              if (questions.length === 0) {
                generateGrammarQuestions();
              } else {
                window.location.reload();
              }
            }}
          />
        </div>
      </DashboardLayout>
    );
  }

  // Render empty questions state
  if (!isGeneratingQuestions && questions.length === 0) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8 px-4">
          <div className="max-w-md mx-auto text-center">
            <h2 className="text-xl font-bold text-gray-900 mb-4">
              No Grammar Questions Available
            </h2>
            <p className="text-gray-600 mb-6">
              We couldn't generate grammar questions at this time. This might be
              due to a temporary issue.
            </p>
            <button
              onClick={generateGrammarQuestions}
              className="cursor-pointer px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg"
            >
              Try Again
            </button>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Render main content
  return (
    <DashboardLayout>
      <div className="container mx-auto py-8 px-4">
        <div className="max-w-3xl mx-auto">
          {isSessionComplete ? renderResults() : renderQuestion()}
        </div>
      </div>
    </DashboardLayout>
  );
}

================
File: app/dashboard/learn/speaking/page.jsx
================
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
import ErrorMessage from "@/components/ui/ErrorMessage";

export default function SpeakingPracticePage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [languageCode, setLanguageCode] = useState("");
  const [proficiencyLevel, setProficiencyLevel] = useState("");
  const [nativeLanguage, setNativeLanguage] = useState("");
  const [userChallengeId, setUserChallengeId] = useState(null);
  const [joinUrl, setJoinUrl] = useState(null);
  const [callId, setCallId] = useState(null);
  const [iframeLoaded, setIframeLoaded] = useState(false);
  const [callStartTime, setCallStartTime] = useState(null);
  const [callDuration, setCallDuration] = useState(0);
  const [callStatus, setCallStatus] = useState("idle"); // idle, connecting, active, completed, error
  const [selectedTopic, setSelectedTopic] = useState("");
  const [availableTopics, setAvailableTopics] = useState([]);
  const [userFeedback, setUserFeedback] = useState(null);
  const [callEnded, setCallEnded] = useState(false);
  const iframeRef = useRef(null);
  const durationTimerRef = useRef(null);

  useEffect(() => {
    // Load language and challenge data from URL parameters
    const challengeId = searchParams.get("challengeId");
    const language = searchParams.get("language");

    if (language) {
      setLanguageCode(language);
    }

    async function loadInitialData() {
      try {
        setIsLoading(true);
        setError(null);

        // If there's a challenge ID, get its details
        if (challengeId) {
          const challengeRes = await fetch(`/api/challenges/${challengeId}`);
          if (!challengeRes.ok) {
            throw new Error("Failed to fetch challenge details");
          }

          const challengeData = await challengeRes.json();
          setLanguageCode(challengeData.languageCode);
          setProficiencyLevel(challengeData.proficiencyLevel);

          // Get user challenge data to track progress
          const userChallengeRes = await fetch(
            `/api/challenges/user?challengeId=${challengeId}`
          );
          if (userChallengeRes.ok) {
            const userChallengeData = await userChallengeRes.json();
            if (userChallengeData.length > 0) {
              setUserChallengeId(userChallengeData[0].id);
            }
          }
        } else if (language) {
          // If no challenge but language is specified, get user's proficiency level
          const profileRes = await fetch("/api/users/profile");
          if (profileRes.ok) {
            const profileData = await profileRes.json();
            setNativeLanguage(profileData.nativeLanguage || "en");

            const learningLanguage = profileData.learningLanguages?.find(
              (lang) => lang.languageCode === language
            );
            if (learningLanguage) {
              setProficiencyLevel(learningLanguage.proficiencyLevel);
            } else {
              setProficiencyLevel("BEGINNER");
            }
          } else {
            setProficiencyLevel("BEGINNER"); // Default if profile fetch fails
          }
        } else {
          // If no parameters, redirect to learn page
          router.push("/dashboard/learn");
          return;
        }

        // Generate available topics based on language and level
        generateTopicSuggestions(language);
      } catch (error) {
        console.error("Error loading speaking practice data:", error);
        setError("Failed to load practice data. Please try again.");
      } finally {
        setIsLoading(false);
      }
    }

    loadInitialData();

    // Cleanup on component unmount
    return () => {
      if (durationTimerRef.current) {
        clearInterval(durationTimerRef.current);
      }
    };
  }, [searchParams, router]);

  // Function to generate topic suggestions based on language and level
  const generateTopicSuggestions = (language) => {
    // Basic topics for all languages
    const basicTopics = [
      "Introduce yourself",
      "Talk about your hobbies",
      "Describe your daily routine",
      "Talk about your family",
      "Describe your favorite food",
    ];

    // Add language-specific topics
    let topics = [...basicTopics];

    if (language === "ja") {
      topics.push("Japanese culture", "Anime and manga", "Travel in Japan");
    } else if (language === "es") {
      topics.push(
        "Hispanic culture",
        "Latin American food",
        "Travel in Spanish-speaking countries"
      );
    } else if (language === "fr") {
      topics.push("French cuisine", "Art and museums", "French literature");
    }

    // Set available topics
    setAvailableTopics(topics);
  };

  // Format language name
  const getLanguageName = (code) => {
    const languages = {
      en: "English",
      es: "Spanish",
      fr: "French",
      de: "German",
      it: "Italian",
      ja: "Japanese",
      ko: "Korean",
      zh: "Chinese",
      ru: "Russian",
      pt: "Portuguese",
      ar: "Arabic",
      hi: "Hindi",
    };

    return languages[code] || code;
  };

  // Get appropriate voice for language
  const getVoiceForLanguage = (languageCode) => {
    const voices = {
      en: "alloy",
      es: "nova",
      fr: "alloy",
      de: "nova",
      it: "alloy",
      ja: "nova",
      zh: "alloy",
      ko: "nova",
      ru: "alloy",
      pt: "nova",
      ar: "alloy",
      hi: "nova",
    };

    return voices[languageCode] || "alloy";
  };

  // Start WebRTC call with Ultravox AI
  const startSpeakingPractice = async () => {
    if (!languageCode || !selectedTopic) return;

    try {
      setCallStatus("connecting");

      // Construct the system prompt based on language, proficiency, and topic
      const systemPrompt = createSystemPrompt(
        languageCode,
        proficiencyLevel,
        selectedTopic,
        nativeLanguage
      );

      // Call our API to create an Ultravox call
      const response = await fetch("/api/learn/speaking/start-call", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          languageCode,
          proficiencyLevel,
          systemPrompt,
          voice: getVoiceForLanguage(languageCode),
          topic: selectedTopic,
          userChallengeId,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to start speaking practice");
      }

      const data = await response.json();

      // Store the joining URL and call ID
      setJoinUrl(data.data.joinUrl);
      setCallId(data.data.callId);

      // Set call start time
      const startTime = new Date();
      setCallStartTime(startTime);

      // Start a timer to track call duration
      durationTimerRef.current = setInterval(() => {
        const now = new Date();
        const durationInSeconds = Math.floor((now - startTime) / 1000);
        setCallDuration(durationInSeconds);
      }, 1000);

      setCallStatus("active");
    } catch (error) {
      console.error("Error starting speaking practice:", error);
      setError(error.message || "Failed to start speaking practice");
      setCallStatus("error");
    }
  };

  // Create system prompt for Ultravox AI
  const createSystemPrompt = (
    languageCode,
    proficiencyLevel,
    topic,
    nativeLanguage
  ) => {
    const languageName = getLanguageName(languageCode);
    const level = proficiencyLevel.toLowerCase();

    return `You are a friendly and supportive ${languageName} language tutor named Shinobi. Your mission is to help the student practice speaking ${languageName}.

The student's proficiency level is ${level}, and their native language is ${nativeLanguage || "English"}.

Current conversation topic: ${topic}

Guidelines:
1. Speak naturally and conversationally in ${languageName}, adjusting your complexity to the student's ${level} level.
2. For beginners, use simple vocabulary and sentence structures. For advanced learners, use more complex language.
3. Allow the student time to respond and formulate their thoughts.
4. If the student makes mistakes, gently correct them by repeating their sentence correctly.
5. Ask open-ended questions to encourage the student to speak more.
6. Keep the conversation flowing naturally around the topic.
7. If the student struggles significantly, you can briefly provide a word or phrase in English to help them, but primarily stay in ${languageName}.
8. At the end of the conversation, provide brief feedback on what the student did well and areas for improvement.

Remember that your primary goal is to build the student's confidence in speaking ${languageName}. Be encouraging and supportive!

First, greet the student in ${languageName} and introduce yourself as their language tutor. Then ask a simple question about the topic to get the conversation started.`;
  };

  // End the call and save results
  const endSpeakingPractice = async () => {
    try {
      if (durationTimerRef.current) {
        clearInterval(durationTimerRef.current);
      }

      setCallStatus("completed");
      setCallEnded(true);

      // If there's a challenge ID, update progress
      if (userChallengeId) {
        // Calculate practice minutes (rounded up)
        const practiceMinutes = Math.ceil(callDuration / 60);

        try {
          await fetch("/api/challenges/update-progress", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              userChallengeId,
              minutes: practiceMinutes,
              isSessionEnd: true,
              activityType: "SPEAKING",
            }),
          });
        } catch (progressError) {
          console.error("Error updating challenge progress:", progressError);
        }
      }

      // Save practice session details
      try {
        await fetch("/api/learn/speaking/save-result", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            languageCode,
            proficiencyLevel,
            pronunciationScore: userFeedback?.pronunciation || 70, // Default value if no feedback
            fluencyScore: userFeedback?.fluency || 70,
            accuracyScore: userFeedback?.accuracy || 70,
            overallScore: userFeedback?.overall || 70,
            prompt: selectedTopic,
            userChallengeId: userChallengeId || null,
            durationSeconds: callDuration,
          }),
        });
      } catch (saveError) {
        console.error("Error saving speaking practice results:", saveError);
      }
    } catch (error) {
      console.error("Error ending speaking practice:", error);
      setError(
        "Failed to save practice results, but your practice session was completed."
      );
    }
  };

  // Handle iframe message events
  useEffect(() => {
    const handleMessage = (event) => {
      // Check if the message is from Ultravox
      if (event.data && event.data.type === "ULTRAVOX_EVENT") {
        console.log("Ultravox event:", event.data);

        // Handle call ended event
        if (event.data.event === "CALL_ENDED") {
          endSpeakingPractice();

          // If there's feedback data in the event, save it
          if (event.data.feedback) {
            try {
              const feedback = JSON.parse(event.data.feedback);
              setUserFeedback(feedback);
            } catch (e) {
              console.error("Error parsing feedback:", e);
            }
          }
        }

        // Handle call started event
        if (event.data.event === "CALL_STARTED") {
          setCallStatus("active");
        }
      }
    };

    window.addEventListener("message", handleMessage);

    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, [
    callId,
    userChallengeId,
    callDuration,
    selectedTopic,
    languageCode,
    proficiencyLevel,
  ]);

  // Format time for display (MM:SS)
  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`;
  };

  // Render topic selection
  const renderTopicSelection = () => {
    return (
      <div className="space-y-6">
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold text-gray-900">
            Speaking Practice
          </h1>
          <p className="text-gray-600 mt-2">
            Choose a topic to start practicing your{" "}
            {getLanguageName(languageCode)} speaking skills
          </p>
        </div>

        <div className="bg-white shadow-sm rounded-lg p-6 border border-gray-200">
          <h2 className="text-lg font-medium text-gray-900 mb-4">
            Select a Conversation Topic
          </h2>

          <div className="space-y-3 mb-6">
            {availableTopics.map((topic, index) => (
              <div
                key={index}
                className={`p-3 rounded-lg border ${
                  selectedTopic === topic
                    ? "bg-amber-50 border-amber-500"
                    : "border-gray-200 hover:border-gray-300"
                } cursor-pointer transition-colors`}
                onClick={() => setSelectedTopic(topic)}
              >
                <div className="flex items-center">
                  <div
                    className={`w-6 h-6 rounded-full mr-3 flex items-center justify-center ${
                      selectedTopic === topic
                        ? "bg-amber-500 text-white"
                        : "bg-gray-100"
                    }`}
                  >
                    {index + 1}
                  </div>
                  <span className="text-gray-900">{topic}</span>
                </div>
              </div>
            ))}
          </div>

          <div className="mt-6">
            <h3 className="text-md font-medium text-gray-700 mb-2">
              Or suggest your own topic:
            </h3>
            <div className="flex space-x-2">
              <input
                type="text"
                value={
                  selectedTopic === availableTopics.includes(selectedTopic)
                    ? ""
                    : selectedTopic
                }
                onChange={(e) => setSelectedTopic(e.target.value)}
                placeholder="Enter a custom topic..."
                className="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-500"
              />
            </div>
          </div>

          <div className="mt-6 flex justify-end">
            <button
              onClick={startSpeakingPractice}
              disabled={!selectedTopic}
              className="cursor-pointer px-4 py-2 bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-lg disabled:opacity-50"
            >
              Start Speaking Practice
            </button>
          </div>
        </div>

        <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 text-amber-800">
          <h3 className="font-medium mb-2">How Speaking Practice Works</h3>
          <ul className="list-disc list-inside space-y-1 text-sm">
            <li>You'll have a real conversation with our AI language tutor</li>
            <li>
              Speak naturally and try to express your thoughts in{" "}
              {getLanguageName(languageCode)}
            </li>
            <li>
              The tutor will adjust to your proficiency level and help you
              improve
            </li>
            <li>
              You'll receive feedback on your pronunciation, fluency, and
              grammar
            </li>
            <li>Allow microphone access when prompted</li>
          </ul>
        </div>
      </div>
    );
  };

  // Render active call with WebRTC
  const renderWebRTCCall = () => {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-xl font-bold text-gray-900">
            Speaking Practice: {selectedTopic}
          </h1>
          <div className="flex items-center bg-amber-100 text-amber-800 px-3 py-1 rounded-full">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4 mr-1"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                clipRule="evenodd"
              />
            </svg>
            <span className="font-medium">{formatTime(callDuration)}</span>
          </div>
        </div>

        <div className="bg-white shadow-sm rounded-lg overflow-hidden border border-gray-200">
          <div className="aspect-w-16 aspect-h-9 relative">
            {joinUrl && (
              <iframe
                ref={iframeRef}
                src={joinUrl}
                className="w-full h-[600px] border-0"
                allow="camera; microphone; clipboard-write"
                onLoad={() => setIframeLoaded(true)}
              ></iframe>
            )}

            {!iframeLoaded && (
              <div className="absolute inset-0 flex flex-col items-center justify-center bg-gray-100">
                <LoadingSpinner size="large" />
                <p className="mt-4 text-gray-600">
                  Connecting to your speaking practice session...
                </p>
              </div>
            )}
          </div>

          <div className="p-4 border-t border-gray-200">
            <div className="flex justify-between items-center">
              <div>
                <p className="text-sm text-gray-600">
                  Practicing:{" "}
                  <span className="font-medium text-gray-900">
                    {getLanguageName(languageCode)}
                  </span>
                </p>
                <p className="text-sm text-gray-600">
                  Topic:{" "}
                  <span className="font-medium text-gray-900">
                    {selectedTopic}
                  </span>
                </p>
              </div>

              <button
                onClick={endSpeakingPractice}
                className="cursor-pointer px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg"
              >
                End Practice
              </button>
            </div>
          </div>
        </div>

        <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 text-amber-800">
          <h3 className="font-medium mb-2">
            Tips for a Great Practice Session
          </h3>
          <ul className="list-disc list-inside space-y-1 text-sm">
            <li>Speak clearly and at a comfortable pace</li>
            <li>
              Don't worry about making mistakes - they're part of learning!
            </li>
            <li>Try to express your thoughts using vocabulary you know</li>
            <li>
              If you don't understand something, ask: "Could you repeat that?"
              or "Could you speak more slowly?"
            </li>
            <li>
              Take your time to formulate responses - pauses are natural in
              conversation
            </li>
          </ul>
        </div>
      </div>
    );
  };

  // Render practice results
  const renderResults = () => {
    // Create feedback stats if we have user feedback
    const feedbackStats = userFeedback
      ? [
          {
            name: "Pronunciation",
            value: userFeedback.pronunciation,
            color: "bg-blue-500",
          },
          {
            name: "Fluency",
            value: userFeedback.fluency,
            color: "bg-green-500",
          },
          {
            name: "Accuracy",
            value: userFeedback.accuracy,
            color: "bg-purple-500",
          },
          {
            name: "Overall",
            value: userFeedback.overall,
            color: "bg-amber-500",
          },
        ]
      : [];

    return (
      <div className="text-center">
        <div className="mb-8">
          <h1 className="text-2xl font-bold text-gray-900">
            Practice Complete!
          </h1>
          <p className="text-gray-600 mt-2">
            You've completed your {getLanguageName(languageCode)} speaking
            practice.
          </p>
        </div>

        <div className="bg-white shadow-sm rounded-lg p-8 border border-gray-200 mb-6">
          <div className="mb-6">
            <h2 className="text-lg font-bold text-gray-900 mb-4">
              Your Practice Summary
            </h2>

            <div className="grid grid-cols-2 gap-4 mb-6">
              <div className="bg-amber-50 rounded-lg p-4 border border-amber-100">
                <p className="text-sm text-amber-800">Practice Duration</p>
                <p className="text-xl font-bold text-amber-900">
                  {formatTime(callDuration)}
                </p>
              </div>

              <div className="bg-blue-50 rounded-lg p-4 border border-blue-100">
                <p className="text-sm text-blue-800">Language</p>
                <p className="text-xl font-bold text-blue-900">
                  {getLanguageName(languageCode)}
                </p>
              </div>

              <div className="bg-green-50 rounded-lg p-4 border border-green-100">
                <p className="text-sm text-green-800">Topic</p>
                <p className="text-xl font-bold text-green-900 truncate">
                  {selectedTopic}
                </p>
              </div>

              <div className="bg-purple-50 rounded-lg p-4 border border-purple-100">
                <p className="text-sm text-purple-800">Level</p>
                <p className="text-xl font-bold text-purple-900">
                  {proficiencyLevel.charAt(0) +
                    proficiencyLevel.slice(1).toLowerCase()}
                </p>
              </div>
            </div>

            {/* Display user feedback if available */}
            {userFeedback && (
              <div className="mt-8">
                <h3 className="text-md font-bold text-gray-800 mb-4">
                  Performance Scores
                </h3>

                <div className="space-y-4">
                  {feedbackStats.map((stat, index) => (
                    <div key={index}>
                      <div className="flex justify-between mb-1">
                        <span className="text-sm font-medium text-gray-700">
                          {stat.name}
                        </span>
                        <span className="text-sm font-medium text-gray-700">
                          {stat.value}/100
                        </span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div
                          className={`${stat.color} h-2 rounded-full`}
                          style={{ width: `${stat.value}%` }}
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>

                {userFeedback.suggestions &&
                  userFeedback.suggestions.length > 0 && (
                    <div className="mt-6 text-left">
                      <h3 className="text-md font-bold text-gray-800 mb-2">
                        Improvement Suggestions
                      </h3>
                      <ul className="list-disc list-inside space-y-1 text-sm text-gray-700">
                        {userFeedback.suggestions.map((suggestion, index) => (
                          <li key={index}>{suggestion}</li>
                        ))}
                      </ul>
                    </div>
                  )}
              </div>
            )}
          </div>

          <div className="flex flex-col space-y-3">
            <button
              onClick={() => {
                setCallStatus("idle");
                setCallEnded(false);
                setJoinUrl(null);
                setCallId(null);
                setIframeLoaded(false);
                setCallDuration(0);
                setUserFeedback(null);
              }}
              className="cursor-pointer px-4 py-2 bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-lg"
            >
              Practice Again
            </button>

            <button
              onClick={() => router.push("/dashboard/learn")}
              className="cursor-pointer px-4 py-2 border border-gray-300 text-gray-700 rounded-lg"
            >
              Return to Dashboard
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Render loading state
  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8 px-4">
          <div className="flex flex-col justify-center items-center min-h-[400px]">
            <LoadingSpinner size="large" />
            <p className="mt-4 text-gray-500">Loading speaking practice...</p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Render error state
  if (error) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8 px-4">
          <ErrorMessage
            title="Failed to load speaking practice"
            message={error}
            retry={() => window.location.reload()}
          />
        </div>
      </DashboardLayout>
    );
  }

  // Render main content based on current state
  return (
    <DashboardLayout>
      <div className="container mx-auto py-8 px-4">
        <div className="max-w-3xl mx-auto">
          {callStatus === "idle" && !callEnded && renderTopicSelection()}
          {["connecting", "active"].includes(callStatus) && renderWebRTCCall()}
          {callEnded && renderResults()}
        </div>
      </div>
    </DashboardLayout>
  );
}

================
File: app/dashboard/learn/vocabulary/page.jsx
================
// app/dashboard/learn/vocabulary/page.jsx
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
import ErrorMessage from "@/components/ui/ErrorMessage";

export default function VocabularyPracticePage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [languageCode, setLanguageCode] = useState("");
  const [proficiencyLevel, setProficiencyLevel] = useState("");
  const [userChallengeId, setUserChallengeId] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [isAnswerChecked, setIsAnswerChecked] = useState(false);
  const [score, setScore] = useState(0);
  const [isSessionComplete, setIsSessionComplete] = useState(false);
  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false);

  useEffect(() => {
    // Load language and challenge data from URL parameters
    const challengeId = searchParams.get("challengeId");
    const language = searchParams.get("language");

    if (language) {
      setLanguageCode(language);
    }

    async function loadInitialData() {
      try {
        setIsLoading(true);
        setError(null);

        // If there's a challenge ID, get its details
        if (challengeId) {
          const challengeRes = await fetch(`/api/challenges/${challengeId}`);
          if (!challengeRes.ok) {
            throw new Error("Failed to fetch challenge details");
          }

          const challengeData = await challengeRes.json();
          setLanguageCode(challengeData.languageCode);
          setProficiencyLevel(challengeData.proficiencyLevel);

          // Get user challenge data to track progress
          const userChallengeRes = await fetch(
            `/api/challenges/user?challengeId=${challengeId}`
          );
          if (userChallengeRes.ok) {
            const userChallengeData = await userChallengeRes.json();
            if (userChallengeData.length > 0) {
              setUserChallengeId(userChallengeData[0].id);
            }
          }
        } else if (language) {
          // If no challenge but language is specified, get user's proficiency level
          const profileRes = await fetch("/api/users/profile");
          if (profileRes.ok) {
            const profileData = await profileRes.json();
            const learningLanguage = profileData.learningLanguages?.find(
              (lang) => lang.languageCode === language
            );
            if (learningLanguage) {
              setProficiencyLevel(learningLanguage.proficiencyLevel);
            } else {
              setProficiencyLevel("BEGINNER");
            }
          } else {
            setProficiencyLevel("BEGINNER"); // Default if profile fetch fails
          }
        } else {
          // If no parameters, redirect to learn page
          router.push("/dashboard/learn");
          return;
        }
      } catch (error) {
        console.error("Error loading vocabulary practice data:", error);
        setError("Failed to load practice data. Please try again.");
      } finally {
        setIsLoading(false);
      }
    }

    loadInitialData();
  }, [searchParams, router]);

  // Generate questions when language and proficiency level are set
  useEffect(() => {
    if (
      languageCode &&
      proficiencyLevel &&
      !isGeneratingQuestions &&
      questions.length === 0
    ) {
      generateVocabularyQuestions();
    }
  }, [languageCode, proficiencyLevel]);

  // Function to generate vocabulary questions using AI
  const generateVocabularyQuestions = async () => {
    if (!languageCode || !proficiencyLevel || isGeneratingQuestions) return;

    try {
      setIsGeneratingQuestions(true);
      setError(null);

      // Call the API to generate vocabulary questions
      const response = await fetch("/api/learn/vocabulary/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          languageCode,
          proficiencyLevel,
          count: 10, // Request 10 questions
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error || "Failed to generate vocabulary questions"
        );
      }

      const data = await response.json();
      setQuestions(data.questions);
    } catch (error) {
      console.error("Error generating vocabulary questions:", error);
      setError("Failed to generate vocabulary questions. Please try again.");
    } finally {
      setIsGeneratingQuestions(false);
    }
  };

  // Function to handle answer selection
  const handleAnswerSelect = (answerIndex) => {
    if (isAnswerChecked) return; // Prevent changing answer after checking
    setSelectedAnswer(answerIndex);
  };

  // Function to check the selected answer
  const checkAnswer = () => {
    if (selectedAnswer === null) return;

    const currentQuestion = questions[currentQuestionIndex];
    const isCorrect = selectedAnswer === currentQuestion.correctAnswerIndex;

    if (isCorrect) {
      setScore((prevScore) => prevScore + 1);
    }

    setIsAnswerChecked(true);
  };

  // Function to move to the next question
  const handleNextQuestion = async () => {
    setSelectedAnswer(null);
    setIsAnswerChecked(false);

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);
    } else {
      // End of questions, update progress
      setIsSessionComplete(true);

      if (userChallengeId) {
        // Update challenge progress
        try {
          await fetch("/api/challenges/update-progress", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              userChallengeId,
              minutes: 10, // Assume 10 minutes of practice for vocabulary
              isSessionEnd: true,
              activityType: "VOCABULARY",
            }),
          });
        } catch (error) {
          console.error("Error updating challenge progress:", error);
        }
      }

      // Save vocabulary practice results
      try {
        await fetch("/api/learn/vocabulary/save-result", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            languageCode,
            proficiencyLevel,
            score,
            totalQuestions: questions.length,
            userChallengeId: userChallengeId || null,
          }),
        });
      } catch (error) {
        console.error("Error saving vocabulary practice results:", error);
      }
    }
  };

  // Function to restart the practice or go back to dashboard
  const handleFinish = () => {
    if (userChallengeId) {
      router.push(`/dashboard/challenges/${searchParams.get("challengeId")}`);
    } else {
      router.push("/dashboard/learn");
    }
  };

  // Render functions for different states

  // Render functions for different states
  const renderQuestion = () => {
    const currentQuestion = questions[currentQuestionIndex];

    return (
      <div className="space-y-6">
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold  bg-gradient-to-r from-cyan-500 to-teal-500 bg-clip-text text-transparent">
            Vocabulary Practice
          </h1>
          <p className="text-sm text-gray-600 mt-2">
            Building your language skills one word at a time
          </p>
          <div className="flex items-center justify-center space-x-3 mt-4">
            <span className="font-medium text-gray-700">
              Question {currentQuestionIndex + 1} of {questions.length}
            </span>
            <div className="w-48 h-3 bg-gray-200 rounded-full overflow-hidden">
              <div
                className="h-full bg-gradient-to-r from-pink-400 via-purple-400 to-cyan-400 rounded-full"
                style={{
                  width: `${((currentQuestionIndex + 1) / questions.length) * 100}%`,
                }}
              ></div>
            </div>
            <span className="text-sm font-medium text-cyan-600">
              {Math.round(
                ((currentQuestionIndex + 1) / questions.length) * 100
              )}
              %
            </span>
          </div>
        </div>

        <div className="bg-white shadow-lg rounded-2xl p-6 border border-gray-100 relative overflow-hidden">
          <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-b from-cyan-100 to-transparent rounded-bl-full opacity-30"></div>
          <div className="absolute bottom-0 left-0 w-32 h-32 bg-gradient-to-t from-teal-100 to-transparent rounded-tr-full opacity-30"></div>

          <div className="flex items-center mb-6">
            <div className="h-10 w-2 bg-gradient-to-b from-cyan-500 to-teal-500 rounded-full mr-3"></div>
            <h2 className="text-xl font-medium text-gray-800">
              {currentQuestion.question}
            </h2>
          </div>

          <div className="space-y-4 relative z-10">
            {currentQuestion.options.map((option, index) => {
              let bgClass = "bg-white hover:bg-gray-50";
              let borderClass = "border-gray-200";
              let iconColor = "bg-gray-100 text-gray-600";

              if (selectedAnswer === index) {
                if (isAnswerChecked) {
                  if (index === currentQuestion.correctAnswerIndex) {
                    bgClass = "bg-green-50";
                    borderClass = "border-green-400";
                    iconColor = "bg-green-500 text-white";
                  } else {
                    bgClass = "bg-red-50";
                    borderClass = "border-red-400";
                    iconColor = "bg-red-500 text-white";
                  }
                } else {
                  bgClass = "bg-cyan-50";
                  borderClass = "border-cyan-400";
                  iconColor = "bg-cyan-500 text-white";
                }
              }

              return (
                <div
                  key={index}
                  className={`p-4 rounded-xl border-2 ${borderClass} ${bgClass} cursor-pointer transition-all transform hover:scale-101 hover:shadow-md`}
                  onClick={() => handleAnswerSelect(index)}
                >
                  <div className="flex items-center">
                    <div
                      className={`w-8 h-8 rounded-full mr-4 flex items-center justify-center font-medium ${iconColor} shadow transition-colors`}
                    >
                      {String.fromCharCode(65 + index)}
                    </div>
                    <span className="text-gray-800 text-lg">{option}</span>

                    {isAnswerChecked &&
                      index === currentQuestion.correctAnswerIndex && (
                        <div className="ml-auto">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-6 w-6 text-green-500"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M5 13l4 4L19 7"
                            />
                          </svg>
                        </div>
                      )}
                  </div>
                </div>
              );
            })}
          </div>

          {isAnswerChecked && (
            <div className="mt-6 p-5 rounded-xl bg-blue-50 border border-blue-200 relative overflow-hidden transition-all duration-300 animate-fadeIn">
              <div className="absolute top-0 right-0 opacity-10">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-16 w-16 text-blue-500"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
              </div>
              <h3 className="font-bold text-blue-800 mb-2">Explanation</h3>
              <p className="text-blue-800">{currentQuestion.explanation}</p>
            </div>
          )}

          <div className="mt-8 flex justify-end">
            {!isAnswerChecked ? (
              <button
                onClick={checkAnswer}
                disabled={selectedAnswer === null}
                className="cursor-pointer px-6 py-3 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-xl font-medium shadow-lg shadow-cyan-100 transform transition-all hover:translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none"
              >
                Check Answer
              </button>
            ) : (
              <button
                onClick={handleNextQuestion}
                className="cursor-pointer px-6 py-3 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-xl font-medium shadow-lg shadow-cyan-100 transform transition-all hover:translate-y-0.5"
              >
                {currentQuestionIndex < questions.length - 1
                  ? "Next Question"
                  : "Finish Practice"}
              </button>
            )}
          </div>
        </div>

        <div className="mt-4 flex justify-between items-center px-2">
          <div className="text-sm text-gray-500">
            Score: {score}/{currentQuestionIndex + (isAnswerChecked ? 1 : 0)}
          </div>
          <div className="text-sm font-medium text-cyan-600">
            Keep going, you're doing great!
          </div>
        </div>
      </div>
    );
  };

  const renderResults = () => {
    const percentage = Math.round((score / questions.length) * 100);
    let feedbackMessage, feedbackColor, emoji;

    if (percentage >= 90) {
      feedbackMessage = "Outstanding! You've mastered these words!";
      feedbackColor = "text-purple-600";
      emoji = "🏆";
    } else if (percentage >= 70) {
      feedbackMessage = "Great job! Your vocabulary is growing stronger!";
      feedbackColor = "text-cyan-600";
      emoji = "🌟";
    } else if (percentage >= 50) {
      feedbackMessage = "Good effort! Keep practicing these words.";
      feedbackColor = "text-blue-600";
      emoji = "👍";
    } else {
      feedbackMessage = "Keep going! Practice makes perfect.";
      feedbackColor = "text-teal-600";
      emoji = "💪";
    }

    return (
      <div className="text-center">
        <div className="mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-cyan-500 to-purple-500 bg-clip-text text-transparent">
            Practice Complete!
          </h1>
          <p className="text-gray-600 mt-2">
            You've completed today's vocabulary challenge
          </p>
        </div>

        <div className="bg-white shadow-lg rounded-2xl p-8 border border-gray-200 max-w-md mx-auto relative overflow-hidden">
          <div className="absolute top-0 left-0 right-0 h-2 bg-gradient-to-r from-cyan-400 via-purple-400 to-teal-400"></div>
          <div className="absolute top-0 right-0 w-40 h-40 bg-gradient-to-b from-purple-100 to-transparent rounded-bl-full opacity-30"></div>
          <div className="absolute bottom-0 left-0 w-40 h-40 bg-gradient-to-t from-cyan-100 to-transparent rounded-tr-full opacity-30"></div>

          <div className="mb-6 relative">
            <div className="relative w-40 h-40 mx-auto">
              {/* <div className="absolute inset-0 rounded-full flex items-center justify-center text-5xl">
                {emoji}
              </div> */}
              <svg className="w-40 h-40" viewBox="0 0 100 100">
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="#e2e8f0"
                  strokeWidth="6"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="url(#gradient)"
                  strokeWidth="6"
                  strokeDasharray={`${percentage * 2.83} 283`}
                  strokeLinecap="round"
                  transform="rotate(-90 50 50)"
                />
                <defs>
                  <linearGradient
                    id="gradient"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="0%"
                  >
                    <stop offset="0%" stopColor="#0ea5e9" />
                    <stop offset="100%" stopColor="#a855f7" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <div>
                  <div className="text-4xl font-bold text-gray-800">
                    {percentage}%
                  </div>
                  {/* <div className="text-sm text-gray-500">Score</div> */}
                </div>
              </div>
            </div>
          </div>

          <p className="text-xl font-medium text-gray-800">
            You scored {score} out of {questions.length} {emoji}
          </p>

          <div className={`mt-3 mb-6 ${feedbackColor} font-medium`}>
            {feedbackMessage}
          </div>

          <div className="flex flex-col space-y-3 relative z-10">
            <button
              onClick={() => {
                setCurrentQuestionIndex(0);
                setSelectedAnswer(null);
                setIsAnswerChecked(false);
                setScore(0);
                setIsSessionComplete(false);
                generateVocabularyQuestions();
              }}
              className="cursor-pointer px-5 py-3 bg-gradient-to-r from-cyan-500 to-purple-500 text-white rounded-xl font-medium shadow-lg shadow-purple-100 transform transition-all hover:translate-y-0.5"
            >
              Practice Again
            </button>

            <button
              onClick={handleFinish}
              className="cursor-pointer px-5 py-3 border-2 border-gray-200 text-gray-700 rounded-xl font-medium transition-colors hover:bg-gray-50"
            >
              Return to Dashboard
            </button>
          </div>
        </div>

        <div className="mt-8 max-w-md mx-auto p-5 bg-gradient-to-r from-cyan-50 to-teal-50 rounded-xl border border-cyan-100">
          <h3 className="font-medium text-gray-800 mb-2">Learning Tip</h3>
          <p className="text-gray-600 text-sm">
            Consistent practice is key to language mastery. Try using these
            vocabulary words in sentences throughout your day to reinforce your
            learning!
          </p>
        </div>
      </div>
    );
  };

  // Render loading state
  if (isLoading || isGeneratingQuestions) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-12 px-4">
          <div className="flex flex-col justify-center items-center min-h-[400px]">
            <div className="relative">
              <div className="w-16 h-16 border-4 border-cyan-200 border-t-cyan-500 rounded-full animate-spin"></div>
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-8 h-8 bg-white rounded-full"></div>
              </div>
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-6 h-6 border-2 border-teal-200 border-t-teal-500 rounded-full animate-spin"></div>
              </div>
            </div>
            <p className="mt-6 text-lg font-medium text-gray-700">
              {isGeneratingQuestions
                ? "Crafting your vocabulary challenge..."
                : "Loading practice..."}
            </p>
            <p className="text-sm text-gray-500 mt-2 max-w-xs text-center">
              We're preparing personalized vocabulary content for your learning
              journey
            </p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Render error state
  if (error) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-12 px-4">
          <div className="max-w-md mx-auto text-center bg-white shadow-lg rounded-2xl p-8 border border-gray-200">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-5">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-8 w-8 text-red-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </div>
            <h2 className="text-xl font-bold text-gray-900 mb-3">
              Oops! Something went wrong
            </h2>
            <p className="text-gray-600 mb-6">{error}</p>
            <button
              onClick={() => {
                if (questions.length === 0) {
                  generateVocabularyQuestions();
                } else {
                  window.location.reload();
                }
              }}
              className="cursor-pointer px-5 py-3 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-xl font-medium shadow-md"
            >
              Try Again
            </button>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Render empty questions state
  if (!isGeneratingQuestions && questions.length === 0) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-12 px-4">
          <div className="max-w-md mx-auto text-center bg-white shadow-lg rounded-2xl p-8 border border-gray-200">
            <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-8 w-8 text-yellow-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M20 12H4"
                />
              </svg>
            </div>
            <h2 className="text-xl font-bold text-gray-900 mb-3">
              No Questions Available
            </h2>
            <p className="text-gray-600 mb-6">
              We couldn't generate vocabulary questions at this time. This might
              be due to a temporary issue.
            </p>
            <button
              onClick={generateVocabularyQuestions}
              className="cursor-pointer px-5 py-3 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-xl font-medium shadow-md"
            >
              Try Again
            </button>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Render main content
  return (
    <DashboardLayout>
      <div className="bg-gradient-to-b from-cyan-50 via-white to-cyan-50 min-h-screen">
        <div className="container mx-auto py-10 px-4">
          <div className="max-w-3xl mx-auto">
            {isSessionComplete ? renderResults() : renderQuestion()}
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}

================
File: app/dashboard/learn/page.jsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import DashboardLayout from "@/components/layout/DashboardLayout";
import Link from "next/link";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";

export default function LearnPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [userChallengeId, setUserChallengeId] = useState(null);
  const [challengeId, setChallengeId] = useState(null);
  const [languageCode, setLanguageCode] = useState("en");
  const [proficiencyLevel, setProficiencyLevel] = useState("BEGINNER");
  const [isLoading, setIsLoading] = useState(true);
  const [practiceInfo, setPracticeInfo] = useState(null);

  useEffect(() => {
    async function fetchUserChallengeData() {
      try {
        setIsLoading(true);
        const id = searchParams.get("challengeId");

        if (id) {
          setChallengeId(id);

          // Fetch challenge participation details
          const res = await fetch(`/api/challenges/user?challengeId=${id}`);

          if (res.ok) {
            const data = await res.json();
            if (data.length > 0) {
              setUserChallengeId(data[0].id);

              // Fetch language code from challenge
              const challengeRes = await fetch(`/api/challenges/${id}`);
              if (challengeRes.ok) {
                const challengeData = await challengeRes.json();
                setLanguageCode(challengeData.languageCode);
                setProficiencyLevel(challengeData.proficiencyLevel);

                // Fetch practice info
                if (data[0].id) {
                  const practiceInfoRes = await fetch(
                    `/api/challenges/practice-info?userChallengeId=${data[0].id}`
                  );
                  if (practiceInfoRes.ok) {
                    const practiceData = await practiceInfoRes.json();
                    setPracticeInfo(practiceData);
                  }
                }
              }
            }
          }
        } else {
          // No challenge ID provided, use user's preferred language
          const userRes = await fetch("/api/users/profile");
          if (userRes.ok) {
            const userData = await userRes.json();
            if (
              userData.learningLanguages &&
              userData.learningLanguages.length > 0
            ) {
              setLanguageCode(userData.learningLanguages[0].languageCode);
              setProficiencyLevel(
                userData.learningLanguages[0].proficiencyLevel
              );
            }
          }
        }
      } catch (error) {
        console.error("Error fetching challenge data:", error);
      } finally {
        setIsLoading(false);
      }
    }

    fetchUserChallengeData();
  }, [searchParams]);

  // Format language name
  const getLanguageName = (code) => {
    const languages = {
      en: "English",
      es: "Spanish",
      fr: "French",
      de: "German",
      it: "Italian",
      ja: "Japanese",
      ko: "Korean",
      zh: "Chinese",
      ru: "Russian",
      pt: "Portuguese",
      ar: "Arabic",
      hi: "Hindi",
    };

    return languages[code] || code;
  };

  // Format language flag emoji
  const getLanguageFlag = (code) => {
    const flags = {
      ja: "🇯🇵",
      ko: "🇰🇷",
      zh: "🇨🇳",
      en: "🇬🇧",
      es: "🇪🇸",
      fr: "🇫🇷",
      de: "🇩🇪",
      it: "🇮🇹",
      ru: "🇷🇺",
      pt: "🇵🇹",
      ar: "🇸🇦",
      hi: "🇮🇳",
    };

    return flags[code] || "🌐";
  };

  // Generate URL with parameters
  const getLearningModuleUrl = (path) => {
    const params = new URLSearchParams();
    if (challengeId) {
      params.append("challengeId", challengeId);
    } else {
      params.append("language", languageCode);
    }

    return `${path}?${params.toString()}`;
  };

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8">
          <div className="flex justify-center items-center h-64">
            <LoadingSpinner size="large" />
          </div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="min-h-screen px-4 py-8">
        <div className="max-w-7xl mx-auto">
          {/* Header with Language Info */}
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div className="flex items-center mb-4 md:mb-0">
              <span className="text-4xl mr-4">
                {getLanguageFlag(languageCode)}
              </span>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  {getLanguageName(languageCode)} Learning Center
                </h1>
                <p className="text-lg text-gray-600">
                  {proficiencyLevel.charAt(0) +
                    proficiencyLevel.slice(1).toLowerCase()}{" "}
                  Level
                </p>
              </div>
            </div>

            {practiceInfo && (
              <div className="w-full md:w-auto bg-white rounded-xl shadow-md p-4 border border-gray-100">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-gray-700 font-medium">
                    Today's Progress
                  </span>
                  <span
                    className={`font-semibold ${practiceInfo.todayCompleted ? "text-green-600" : "text-blue-600"}`}
                  >
                    {practiceInfo.todayProgress}/{practiceInfo.dailyRequirement}{" "}
                    min
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2.5 mb-2">
                  <div
                    className={`h-2.5 rounded-full ${practiceInfo.todayCompleted ? "bg-green-500" : "bg-gradient-to-r from-blue-400 to-cyan-500"}`}
                    style={{
                      width: `${Math.min(100, (practiceInfo.todayProgress / practiceInfo.dailyRequirement) * 100)}%`,
                    }}
                  ></div>
                </div>
                <div className="flex justify-between text-sm text-gray-500">
                  <span>🔥 {practiceInfo.currentStreak}-day streak</span>
                  <span>⭐ {practiceInfo.totalMinutes} total minutes</span>
                </div>
              </div>
            )}
          </div>

          {/* Learning Modules Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6 mb-12">
            {/* Conversation Practice */}
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              <div className="p-6">
                <div className="flex items-start mb-5">
                  <div className="p-3 bg-blue-100 rounded-xl mr-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-8 w-8 text-blue-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-gray-900 mb-1">
                      Conversation
                    </h2>
                    <p className="text-gray-600">
                      Practice real dialogues with AI feedback
                    </p>
                  </div>
                </div>
                <Link
                  href={getLearningModuleUrl("/dashboard/learn/conversation")}
                  className="inline-flex items-center justify-center w-full py-3 px-6 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-medium rounded-lg transition-all duration-300"
                >
                  Start Talking
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 ml-2"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </Link>
              </div>
            </div>

            {/* Vocabulary Practice */}
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              <div className="p-6">
                <div className="flex items-start mb-5">
                  <div className="p-3 bg-purple-100 rounded-xl mr-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-8 w-8 text-purple-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-gray-900 mb-1">
                      Vocabulary
                    </h2>
                    <p className="text-gray-600">
                      Learn and practice essential words
                    </p>
                  </div>
                </div>
                <Link
                  href={getLearningModuleUrl("/dashboard/learn/vocabulary")}
                  className="inline-flex items-center justify-center w-full py-3 px-6 bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white font-medium rounded-lg transition-all duration-300"
                >
                  Expand Vocabulary
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 ml-2"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </Link>
              </div>
            </div>

            {/* Grammar Exercises */}
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              <div className="p-6">
                <div className="flex items-start mb-5">
                  <div className="p-3 bg-green-100 rounded-xl mr-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-8 w-8 text-green-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-gray-900 mb-1">
                      Grammar
                    </h2>
                    <p className="text-gray-600">
                      Master language rules and structures
                    </p>
                  </div>
                </div>
                <Link
                  href={getLearningModuleUrl("/dashboard/learn/grammar")}
                  className="inline-flex items-center justify-center w-full py-3 px-6 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-medium rounded-lg transition-all duration-300"
                >
                  Learn Grammar
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 ml-2"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </Link>
              </div>
            </div>

            {/* Speaking Practice */}
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              <div className="p-6">
                <div className="flex items-start mb-5">
                  <div className="p-3 bg-amber-100 rounded-xl mr-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-8 w-8 text-amber-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-gray-900 mb-1">
                      Pronunciation
                    </h2>
                    <p className="text-gray-600">
                      Improve your accent and speaking
                    </p>
                  </div>
                </div>
                <Link
                  href={getLearningModuleUrl("/dashboard/learn/speaking")}
                  className="inline-flex items-center justify-center w-full py-3 px-6 bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white font-medium rounded-lg transition-all duration-300"
                >
                  Practice Speaking
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 ml-2"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </Link>
              </div>
            </div>
          </div>

          {/* Learning Tips */}
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 mb-10">
            <div className="px-6 py-5 bg-gray-50 border-b border-gray-200">
              <h2 className="text-2xl font-bold text-gray-900">
                Learning Strategies
              </h2>
              <p className="text-gray-600 mt-1">
                Proven techniques to accelerate your progress
              </p>
            </div>
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="flex items-start">
                  <div className="flex-shrink-0 bg-green-100 p-2 rounded-lg mr-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-6 w-6 text-green-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
                      />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-1">
                      Daily Consistency
                    </h3>
                    <p className="text-gray-600">
                      Short daily sessions (15-30 min) are more effective than
                      occasional long study marathons.
                    </p>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="flex-shrink-0 bg-blue-100 p-2 rounded-lg mr-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-6 w-6 text-blue-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-1">
                      Active Recall
                    </h3>
                    <p className="text-gray-600">
                      Test yourself frequently to strengthen memory retention
                      and identify weak areas.
                    </p>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="flex-shrink-0 bg-purple-100 p-2 rounded-lg mr-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-6 w-6 text-purple-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-1">
                      Spaced Repetition
                    </h3>
                    <p className="text-gray-600">
                      Review material at increasing intervals to optimize
                      long-term memorization.
                    </p>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="flex-shrink-0 bg-amber-100 p-2 rounded-lg mr-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-6 w-6 text-amber-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-1">
                      Immersion
                    </h3>
                    <p className="text-gray-600">
                      Supplement with media (music, shows) in your target
                      language for natural exposure.
                    </p>
                  </div>
                </div>
              </div>

              <div className="mt-8 bg-blue-50 rounded-xl p-5 border border-blue-100">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-6 w-6 text-blue-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-lg font-medium text-blue-800">
                      Pro Tip
                    </h3>
                    <div className="mt-2 text-blue-700">
                      <p>
                        Combine multiple methods for best results! For example,
                        learn vocabulary in context through conversation
                        practice rather than isolated word lists.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}

================
File: app/dashboard/profile/page.jsx
================
// app/dashboard/profile/page.jsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import ErrorMessage from '@/components/ui/ErrorMessage';
import TransactionStatus from '@/components/ui/TransactionStatus';
import { useContract } from '@/lib/web3/hooks/useContract';

export default function ProfilePage() {
  const router = useRouter();
  const { isConnected, connectWallet } = useContract();
  
  const [profile, setProfile] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    nativeLanguage: '',
    learningLanguages: []
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState(null);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [achievements, setAchievements] = useState([]);
  const [transactions, setTransactions] = useState([]);
  const [activeTab, setActiveTab] = useState('profile');
  const [challenges, setChallenges] = useState([]);
  
  // Define language options
  const LANGUAGES = [
    { code: 'en', name: 'English' },
    { code: 'es', name: 'Spanish' },
    { code: 'fr', name: 'French' },
    { code: 'de', name: 'German' },
    { code: 'it', name: 'Italian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'ko', name: 'Korean' },
    { code: 'zh', name: 'Chinese' },
    { code: 'ru', name: 'Russian' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'ar', name: 'Arabic' },
    { code: 'hi', name: 'Hindi' }
  ];
  
  // Define proficiency levels
  const PROFICIENCY_LEVELS = [
    { value: 'BEGINNER', label: 'Beginner' },
    { value: 'ELEMENTARY', label: 'Elementary' },
    { value: 'INTERMEDIATE', label: 'Intermediate' },
    { value: 'ADVANCED', label: 'Advanced' },
    { value: 'FLUENT', label: 'Fluent' }
  ];
  
  useEffect(() => {
    async function fetchProfileData() {
      try {
        setIsLoading(true);
        setError(null);
        
        // Fetch user profile
        const profileRes = await fetch('/api/users/profile');
        
        if (!profileRes.ok) {
          if (profileRes.status === 401) {
            router.push('/auth/signin');
            return;
          }
          throw new Error('Failed to fetch user profile');
        }
        
        const profileData = await profileRes.json();
        setProfile(profileData);
        
        // Initialize form data with current profile values
        setFormData({
          username: profileData.username || '',
          email: profileData.email || '',
          nativeLanguage: profileData.nativeLanguage || '',
          learningLanguages: profileData.learningLanguages?.length > 0 
            ? [...profileData.learningLanguages] 
            : [{
                languageCode: '',
                proficiencyLevel: 'BEGINNER'
              }]
        });
        
        // Fetch active challenges
        const challengesRes = await fetch('/api/challenges/user?status=ACTIVE');
        if (challengesRes.ok) {
          const challengesData = await challengesRes.json();
          setChallenges(challengesData);
        }
        
        // Fetch achievements (TODO: implement API endpoint)
        // For now, using placeholder data
        setAchievements([
          {
            id: '1',
            name: '5-Day Streak',
            description: 'Practiced language for 5 consecutive days',
            earnedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
            badgeUrl: '/badges/streak.svg',
            achievementType: 'STREAK_DAYS'
          },
          {
            id: '2',
            name: '100 Words Mastered',
            description: 'Learned and mastered 100 vocabulary words',
            earnedAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),
            badgeUrl: '/badges/vocabulary.svg',
            achievementType: 'VOCABULARY_SIZE'
          }
        ]);
        
        // Fetch transactions (TODO: implement API endpoint)
        // For now, using placeholder data
        setTransactions([
          {
            id: '1',
            transactionType: 'STAKE',
            amount: 100,
            currency: 'USDC',
            txHash: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',
            status: 'COMPLETED',
            createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
            completedAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()
          },
          {
            id: '2',
            transactionType: 'REWARD',
            amount: 105,
            currency: 'USDC',
            txHash: '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890',
            status: 'COMPLETED',
            createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
            completedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
          }
        ]);
        
      } catch (error) {
        console.error('Error fetching profile data:', error);
        setError(error.message || 'Failed to load profile data');
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchProfileData();
  }, [router]);
  
  // Handle form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Handle learning language changes
  const handleLearningLanguageChange = (index, field, value) => {
    setFormData(prev => {
      const newLearningLanguages = [...prev.learningLanguages];
      newLearningLanguages[index] = {
        ...newLearningLanguages[index],
        [field]: value
      };
      return { ...prev, learningLanguages: newLearningLanguages };
    });
  };
  
  // Add a new learning language
  const addLearningLanguage = () => {
    setFormData(prev => ({
      ...prev,
      learningLanguages: [
        ...prev.learningLanguages,
        { languageCode: '', proficiencyLevel: 'BEGINNER' }
      ]
    }));
  };
  
  // Remove a learning language
  const removeLearningLanguage = (index) => {
    setFormData(prev => {
      const newLearningLanguages = [...prev.learningLanguages];
      newLearningLanguages.splice(index, 1);
      return { ...prev, learningLanguages: newLearningLanguages };
    });
  };
  
  // Start editing profile
  const handleEditProfile = () => {
    setIsEditing(true);
    setSubmitSuccess(false);
    setSubmitError(null);
  };
  
  // Cancel editing
  const handleCancelEdit = () => {
    // Reset form to current profile data
    setFormData({
      username: profile.username || '',
      email: profile.email || '',
      nativeLanguage: profile.nativeLanguage || '',
      learningLanguages: profile.learningLanguages?.length > 0 
        ? [...profile.learningLanguages] 
        : [{
            languageCode: '',
            proficiencyLevel: 'BEGINNER'
          }]
    });
    setIsEditing(false);
    setSubmitError(null);
  };
  
  // Submit profile updates
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validate form
    if (!formData.username.trim()) {
      setSubmitError('Username is required');
      return;
    }
    
    if (!formData.email.trim()) {
      setSubmitError('Email is required');
      return;
    }
    
    if (!formData.nativeLanguage) {
      setSubmitError('Native language is required');
      return;
    }
    
    // Validate learning languages
    if (formData.learningLanguages.some(lang => !lang.languageCode)) {
      setSubmitError('Please select all learning languages or remove empty ones');
      return;
    }
    
    try {
      setIsSubmitting(true);
      setSubmitError(null);
      
      const response = await fetch('/api/users/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to update profile');
      }
      
      const updatedProfile = await response.json();
      
      // Update local state with the response
      setProfile(updatedProfile);
      setIsEditing(false);
      setSubmitSuccess(true);
      
      // Show success message briefly
      setTimeout(() => {
        setSubmitSuccess(false);
      }, 3000);
      
    } catch (error) {
      console.error('Error updating profile:', error);
      setSubmitError(error.message || 'Failed to update profile');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Handle exiting a challenge
  const handleExitChallenge = async (challengeId) => {
    try {
      const response = await fetch(`/api/challenges/${challengeId}/exit`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to exit challenge');
      }
      
      // Refresh challenges
      const challengesRes = await fetch('/api/challenges/user?status=ACTIVE');
      if (challengesRes.ok) {
        const challengesData = await challengesRes.json();
        setChallenges(challengesData);
      }
      
    } catch (error) {
      console.error('Error exiting challenge:', error);
      alert(error.message || 'Failed to exit challenge');
    }
  };
  
  // Get language name from code
  const getLanguageName = (code) => {
    const language = LANGUAGES.find(lang => lang.code === code);
    return language ? language.name : code;
  };
  
  // Format date
  const formatDate = (dateString) => {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    }).format(date);
  };
  
  // Format transaction type
  const formatTransactionType = (type) => {
    const types = {
      'STAKE': 'Stake',
      'UNSTAKE': 'Unstake',
      'REWARD': 'Reward',
      'YIELD': 'Yield'
    };
    
    return types[type] || type;
  };
  
  // Format currency amount
  const formatCurrency = (amount, currency) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency === 'USDC' ? 'USD' : currency,
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount);
  };
  
  // Get language flag emoji
  const getLanguageFlag = (code) => {
    const flags = {
      ja: "🇯🇵",
      ko: "🇰🇷",
      zh: "🇨🇳",
      en: "🇬🇧",
      es: "🇪🇸",
      fr: "🇫🇷",
      de: "🇩🇪",
      it: "🇮🇹",
      ru: "🇷🇺",
      pt: "🇵🇹",
      ar: "🇸🇦",
      hi: "🇮🇳",
    };
    return flags[code] || "🌐";
  };
  
  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8 px-4">
          <div className="flex justify-center items-center min-h-[400px]">
            <LoadingSpinner size="large" />
          </div>
        </div>
      </DashboardLayout>
    );
  }
  
  if (error) {
    return (
      <DashboardLayout>
        <div className="container mx-auto py-8 px-4">
          <ErrorMessage
            title="Failed to load profile"
            message={error}
            retry={() => window.location.reload()}
          />
        </div>
      </DashboardLayout>
    );
  }
  
  return (
    <DashboardLayout>
      <div className="container mx-auto py-8 px-4">
        <div className="max-w-4xl mx-auto">
          {/* Tabs */}
          <div className="mb-8 border-b border-gray-200">
            <ul className="flex flex-wrap -mb-px text-sm font-medium text-center">
              <li className="mr-2">
                <button
                  className={`inline-block p-4 rounded-t-lg ${
                    activeTab === 'profile'
                      ? 'border-b-2 border-cyan-500 text-cyan-600'
                      : 'hover:text-gray-600 hover:border-gray-300'
                  }`}
                  onClick={() => setActiveTab('profile')}
                >
                  Profile
                </button>
              </li>
              <li className="mr-2">
                <button
                  className={`inline-block p-4 rounded-t-lg ${
                    activeTab === 'challenges'
                      ? 'border-b-2 border-cyan-500 text-cyan-600'
                      : 'hover:text-gray-600 hover:border-gray-300'
                  }`}
                  onClick={() => setActiveTab('challenges')}
                >
                  My Challenges
                </button>
              </li>
              
              <li>
                <button
                  className={`inline-block p-4 rounded-t-lg ${
                    activeTab === 'transactions'
                      ? 'border-b-2 border-cyan-500 text-cyan-600'
                      : 'hover:text-gray-600 hover:border-gray-300'
                  }`}
                  onClick={() => setActiveTab('transactions')}
                >
                  Transactions
                </button>
              </li>
            </ul>
          </div>
          
          {/* Profile Tab */}
          {activeTab === 'profile' && (
            <div>
              {/* Profile Header */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden mb-8">
                <div className="bg-gradient-to-r from-cyan-500 to-teal-500 px-6 py-4">
                  <div className="flex items-center">
                    <div className="w-16 h-16 bg-white rounded-full shadow-md flex items-center justify-center text-cyan-600 font-bold text-2xl mr-4">
                      {profile?.username?.charAt(0)?.toUpperCase() || 'U'}
                    </div>
                    <div className="text-white">
                      <h1 className="text-2xl font-bold">{profile?.username || 'User'}</h1>
                      <p className="text-cyan-100">
                        {profile?.walletAddress ? 
                          `${profile.walletAddress.slice(0, 6)}...${profile.walletAddress.slice(-4)}` : 
                          'No wallet connected'}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="p-6">
                  {submitSuccess && (
                    <div className="mb-6 bg-green-50 text-green-700 border border-green-200 rounded-md p-4">
                      <p className="font-medium">Profile updated successfully!</p>
                    </div>
                  )}
                  
                  {isEditing ? (
                    <form onSubmit={handleSubmit} className="space-y-6">
                      {submitError && (
                        <div className="bg-red-50 text-red-700 border border-red-200 rounded-md p-4">
                          <p className="font-medium">Error</p>
                          <p className="text-sm">{submitError}</p>
                        </div>
                      )}
                      
                      <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                        {/* Username */}
                        <div>
                          <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-1">
                            Username<span className="text-red-500">*</span>
                          </label>
                          <input
                            type="text"
                            id="username"
                            name="username"
                            value={formData.username}
                            onChange={handleChange}
                            className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-1 focus:ring-cyan-500 focus:border-cyan-500"
                            required
                          />
                        </div>
                        
                        {/* Email */}
                        <div>
                          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                            Email<span className="text-red-500">*</span>
                          </label>
                          <input
                            type="email"
                            id="email"
                            name="email"
                            value={formData.email}
                            onChange={handleChange}
                            className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-1 focus:ring-cyan-500 focus:border-cyan-500"
                            required
                          />
                        </div>
                      </div>
                      
                      {/* Native Language */}
                      <div>
                        <label htmlFor="nativeLanguage" className="block text-sm font-medium text-gray-700 mb-1">
                          Native Language<span className="text-red-500">*</span>
                        </label>
                        <select
                          id="nativeLanguage"
                          name="nativeLanguage"
                          value={formData.nativeLanguage}
                          onChange={handleChange}
                          className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-1 focus:ring-cyan-500 focus:border-cyan-500"
                          required
                        >
                          <option value="">Select your native language</option>
                          {LANGUAGES.map(lang => (
                            <option key={lang.code} value={lang.code}>
                              {lang.name}
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      {/* Learning Languages */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-3">
                          Learning Languages<span className="text-red-500">*</span>
                        </label>
                        
                        {formData.learningLanguages.map((lang, index) => (
                          <div key={index} className="flex items-center space-x-4 mb-4">
                            <div className="flex-1">
                              <select
                                value={lang.languageCode}
                                onChange={(e) => handleLearningLanguageChange(index, 'languageCode', e.target.value)}
                                className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-1 focus:ring-cyan-500 focus:border-cyan-500"
                                required
                              >
                                <option value="">Select language</option>
                                {LANGUAGES.map(option => (
                                  <option key={option.code} value={option.code}>
                                    {option.name}
                                  </option>
                                ))}
                              </select>
                            </div>
                            
                            <div className="flex-1">
                              <select
                                value={lang.proficiencyLevel}
                                onChange={(e) => handleLearningLanguageChange(index, 'proficiencyLevel', e.target.value)}
                                className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-1 focus:ring-cyan-500 focus:border-cyan-500"
                                required
                              >
                                {PROFICIENCY_LEVELS.map(option => (
                                  <option key={option.value} value={option.value}>
                                    {option.label}
                                  </option>
                                ))}
                              </select>
                            </div>
                            
                            {formData.learningLanguages.length > 1 && (
                              <button
                                type="button"
                                onClick={() => removeLearningLanguage(index)}
                                className="text-red-500 hover:text-red-700"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                                </svg>
                              </button>
                            )}
                          </div>
                        ))}
                        
                        <button
                          type="button"
                          onClick={addLearningLanguage}
                          className="mt-2 flex items-center text-cyan-600 hover:text-cyan-800"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
                          </svg>
                          Add Language
                        </button>
                      </div>
                      
                      <div className="flex justify-end space-x-3">
                        <button
                          type="button"
                          onClick={handleCancelEdit}
                          className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                        >
                          Cancel
                        </button>
                        <button
                          type="submit"
                          disabled={isSubmitting}
                          className="px-4 py-2 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-md hover:from-cyan-600 hover:to-teal-600 disabled:opacity-50"
                        >
                          {isSubmitting ? 'Saving...' : 'Save Changes'}
                        </button>
                      </div>
                    </form>
                  ) : (
                    <div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                          <h3 className="text-sm font-medium text-gray-500 mb-1">Username</h3>
                          <p className="font-medium text-gray-900">{profile?.username || 'Not set'}</p>
                        </div>
                        
                        <div>
                          <h3 className="text-sm font-medium text-gray-500 mb-1">Email</h3>
                          <p className="font-medium text-gray-900">{profile?.email || 'Not set'}</p>
                        </div>
                        
                        <div>
                          <h3 className="text-sm font-medium text-gray-500 mb-1">Native Language</h3>
                          <p className="font-medium text-gray-900">
                            {profile?.nativeLanguage ? getLanguageName(profile.nativeLanguage) : 'Not set'}
                          </p>
                        </div>
                      </div>
                      
                      <div className="mb-6">
                        <h3 className="text-sm font-medium text-gray-500 mb-3">Learning Languages</h3>
                        
                        {profile?.learningLanguages?.length > 0 ? (
                          <div className="space-y-3">
                            {profile.learningLanguages.map((lang, index) => (
                              <div key={index} className="flex items-center bg-gray-50 rounded-lg p-3 border border-gray-100">
                                <span className="text-2xl mr-3">
                                  {getLanguageFlag(lang.languageCode)}
                                </span>
                                <div>
                                  <p className="font-medium text-gray-900">{getLanguageName(lang.languageCode)}</p>
                                  <p className="text-sm text-gray-500">
                                    {PROFICIENCY_LEVELS.find(level => level.value === lang.proficiencyLevel)?.label || lang.proficiencyLevel}
                                  </p>
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <p className="text-gray-500">No learning languages set</p>
                        )}
                      </div>
                      
                      <div className="flex justify-end">
                        <button
                          onClick={handleEditProfile}
                          className="px-4 py-2 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-md hover:from-cyan-600 hover:to-teal-600"
                        >
                          Edit Profile
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
          
          {/* Challenges Tab */}
          {activeTab === 'challenges' && (
            <div>
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden mb-8">
                <div className="px-6 py-4 border-b border-gray-100 bg-gray-50">
                  <h2 className="text-xl font-bold text-gray-800">My Active Challenges</h2>
                </div>
                
                <div className="p-6">
                  {challenges.length > 0 ? (
                    <div className="space-y-6">
                      {challenges.map(challenge => (
                        <div key={challenge.id} className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                          <div className="flex justify-between">
                            <div className="flex items-start">
                              <span className="text-2xl mr-3">
                                {getLanguageFlag(challenge.challenge.languageCode)}
                              </span>
                              <div>
                                <h3 className="font-medium text-gray-900">{challenge.challenge.title}</h3>
                                <div className="flex mt-1 space-x-2">
                                  <span className="text-xs px-2 py-0.5 bg-cyan-100 text-cyan-800 rounded-full">
                                    {calculateDaysRemaining(challenge.endDate)} days left
                                  </span>
                                  <span className="text-xs px-2 py-0.5 bg-gray-100 text-gray-800 rounded-full">
                                    {challenge.challenge.dailyRequirement} min/day
                                  </span>
                                </div>
                              </div>
                            </div>
                            <div className="flex flex-col items-end">
                              <span className="text-sm font-medium px-2 py-1 bg-amber-100 text-amber-800 rounded-full">
                                {formatCurrency(challenge.stakedAmount, 'USDC')}
                              </span>
                            </div>
                          </div>

                          <div className="mt-4">
                            <div className="flex justify-between text-sm text-gray-600 mb-1">
                              <span>Progress</span>
                              <span className="font-medium text-gray-900">
                                {challenge.progressPercentage}%
                              </span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2">
                              <div
                                className="bg-gradient-to-r from-cyan-400 to-teal-500 h-2 rounded-full"
                                style={{ width: `${challenge.progressPercentage}%` }}
                              ></div>
                            </div>
                          </div>

                          <div className="flex flex-wrap mt-4 gap-2">
                            <button
                              onClick={() => router.push(`/dashboard/challenges/${challenge.challengeId}`)}
                              className="px-3 py-1.5 bg-cyan-500 text-white rounded-md hover:bg-cyan-600 text-sm"
                            >
                              View Details
                            </button>
                            <button
                              onClick={() => router.push(`/dashboard/learn?challengeId=${challenge.challengeId}`)}
                              className="px-3 py-1.5 bg-teal-500 text-white rounded-md hover:bg-teal-600 text-sm"
                            >
                              Practice Now
                            </button>
                            <button
                              onClick={() => handleExitChallenge(challenge.challengeId)}
                              className="px-3 py-1.5 border border-red-300 text-red-600 rounded-md hover:bg-red-50 text-sm"
                            >
                              Exit Challenge
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                      </svg>
                      <h3 className="mt-4 text-lg font-medium text-gray-900">No active challenges</h3>
                      <p className="mt-1 text-gray-500">You haven't joined any challenges yet.</p>
                      <button
                        onClick={() => router.push('/dashboard/challenges')}
                        className="mt-4 px-4 py-2 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-md hover:from-cyan-600 hover:to-teal-600"
                      >
                        Browse Challenges
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
          
        
          {/* Transactions Tab */}
          {activeTab === 'transactions' && (
            <div>
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden mb-8">
                <div className="px-6 py-4 border-b border-gray-100 bg-gray-50">
                  <h2 className="text-xl font-bold text-gray-800">Transaction History</h2>
                </div>
                
                <div className="p-6">
                  {transactions.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Type
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Amount
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Date
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Status
                            </th>
                           
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {transactions.map(transaction => (
                            <tr key={transaction.id}>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  transaction.transactionType === 'STAKE' 
                                    ? 'bg-blue-100 text-blue-800'
                                    : transaction.transactionType === 'REWARD' 
                                      ? 'bg-green-100 text-green-800'
                                      : transaction.transactionType === 'UNSTAKE'
                                        ? 'bg-amber-100 text-amber-800'
                                        : 'bg-purple-100 text-purple-800'
                                }`}>
                                  {formatTransactionType(transaction.transactionType)}
                                </span>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <div className="text-sm font-medium text-gray-900">
                                  {formatCurrency(transaction.amount, transaction.currency)}
                                </div>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <div className="text-sm text-gray-500">
                                  {formatDate(transaction.createdAt)}
                                </div>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  transaction.status === 'COMPLETED' 
                                    ? 'bg-green-100 text-green-800'
                                    : transaction.status === 'PENDING' 
                                      ? 'bg-yellow-100 text-yellow-800'
                                      : 'bg-red-100 text-red-800'
                                }`}>
                                  {transaction.status}
                                </span>
                              </td>
                            
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <h3 className="mt-4 text-lg font-medium text-gray-900">No transactions yet</h3>
                      <p className="mt-1 text-gray-500">Your transaction history will appear here.</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </DashboardLayout>
  );
  
  // Helper function to calculate days remaining
  function calculateDaysRemaining(endDate) {
    const end = new Date(endDate);
    const now = new Date();
    const diffTime = end - now;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays > 0 ? diffDays : 0;
  }
}

================
File: app/dashboard/statistics/page.jsx
================
// app/dashboard/statistics/page.jsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import PracticeChart from "@/components/dashboard/PracticeChart";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { format, subDays, eachDayOfInterval } from "date-fns";

export default function StatisticsPage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [analyticsData, setAnalyticsData] = useState(null);
  const [selectedLanguage, setSelectedLanguage] = useState("all");
  const [timeRange, setTimeRange] = useState("month");

  useEffect(() => {
    async function fetchAnalytics() {
      try {
        setIsLoading(true);

        // Construct query params
        const params = new URLSearchParams();
        if (selectedLanguage !== "all") {
          params.append("languageCode", selectedLanguage);
        }
        params.append("period", timeRange);

        const response = await fetch(
          `/api/users/analytics?${params.toString()}`
        );

        if (!response.ok) {
          if (response.status === 401) {
            router.push("/auth/signin");
            return;
          }
          throw new Error("Failed to fetch analytics");
        }

        const data = await response.json();
        setAnalyticsData(data);
      } catch (error) {
        console.error("Error fetching analytics:", error);
      } finally {
        setIsLoading(false);
      }
    }

    fetchAnalytics();
  }, [selectedLanguage, timeRange, router]);

  // Function to generate chart data
  const generateChartData = () => {
    if (!analyticsData?.practiceByDay) return [];

    // Calculate date range
    const endDate = new Date();
    let startDate;

    switch (timeRange) {
      case "week":
        startDate = subDays(endDate, 7);
        break;
      case "month":
        startDate = subDays(endDate, 30);
        break;
      case "year":
        startDate = subDays(endDate, 365);
        break;
      default:
        startDate = subDays(endDate, 30);
    }

    // Generate all dates in range
    const dateRange = eachDayOfInterval({ start: startDate, end: endDate });

    // Format dates and map to practice minutes
    return dateRange.map((date) => {
      const dateString = format(date, "yyyy-MM-dd");
      const dayData = analyticsData.practiceByDay[dateString] || {};

      // If specific language selected, return only that language data
      if (selectedLanguage !== "all") {
        return {
          date: format(date, "MMM dd"),
          minutes: dayData[selectedLanguage] || 0,
        };
      }

      // Otherwise, sum all languages
      const totalMinutes = Object.values(dayData).reduce(
        (sum, min) => sum + min,
        0
      );

      return {
        date: format(date, "MMM dd"),
        minutes: totalMinutes,
      };
    });
  };

  if (isLoading) {
    return (
      <DashboardLayout>
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-6xl mx-auto">
            <div className="animate-pulse space-y-6">
              <div className="h-10 bg-slate-200 rounded-lg w-1/4"></div>
              <div className="h-4 bg-slate-200 rounded w-2/4"></div>

              <div className="flex flex-wrap gap-4">
                <div className="h-16 bg-slate-200 rounded-xl w-48"></div>
                <div className="h-16 bg-slate-200 rounded-xl w-48"></div>
              </div>

              <div className="h-80 bg-slate-200 rounded-2xl"></div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="h-32 bg-slate-200 rounded-xl"></div>
                <div className="h-32 bg-slate-200 rounded-xl"></div>
                <div className="h-32 bg-slate-200 rounded-xl"></div>
              </div>

              <div className="h-64 bg-slate-200 rounded-2xl"></div>
            </div>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  const chartData = generateChartData();

  // Get language name from language code
  const getLanguageName = (code) => {
    const languages = {
      en: "English",
      es: "Spanish",
      fr: "French",
      de: "German",
      it: "Italian",
      ja: "Japanese",
      ko: "Korean",
      zh: "Chinese",
      ru: "Russian",
      pt: "Portuguese",
      ar: "Arabic",
      hi: "Hindi",
    };

    return languages[code] || code;
  };

  return (
    <DashboardLayout>
      <div className="min-h-screen px-4 py-8">
        <div className="max-w-7xl mx-auto">
          {/* Page Header */}
          <div className="mb-10">
            <div className="relative inline-block">
              <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-3 z-10 relative">
                Your Learning Statistics
              </h1>
              <div className="absolute bottom-0 left-0 w-full h-3 bg-gradient-to-r from-indigo-300 to-cyan-300 opacity-50 rounded-full z-0"></div>
            </div>
            <p className="text-lg text-gray-600 max-w-2xl mt-1">
              Track your progress, celebrate milestones, and optimize your
              language learning journey
            </p>
          </div>

          {/* Filters and Summary Cards */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
            {/* Language Selector */}
            <div className="bg-white p-5 rounded-2xl shadow-sm border border-gray-100">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Language
              </label>
              <div className="relative">
                <select
                  value={selectedLanguage}
                  onChange={(e) => setSelectedLanguage(e.target.value)}
                  className="w-full px-4 py-3 pr-10 border border-gray-200 rounded-xl bg-white shadow-xs focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400 appearance-none text-gray-800"
                >
                  <option value="all">All Languages</option>
                  {analyticsData?.streaksByLanguage &&
                    Object.keys(analyticsData.streaksByLanguage).map((lang) => (
                      <option key={lang} value={lang}>
                        {getLanguageName(lang)}
                      </option>
                    ))}
                </select>
                <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg
                    className="h-5 w-5 text-gray-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </div>
              </div>
            </div>

            {/* Time Range Selector */}
            <div className="bg-white p-5 rounded-2xl shadow-sm border border-gray-100">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Time Period
              </label>
              <div className="relative">
                <select
                  value={timeRange}
                  onChange={(e) => setTimeRange(e.target.value)}
                  className="w-full px-4 py-3 pr-10 border border-gray-200 rounded-xl bg-white shadow-xs focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400 appearance-none text-gray-800"
                >
                  <option value="week">Last 7 days</option>
                  <option value="month">Last 30 days</option>
                  <option value="year">Last 365 days</option>
                </select>
                <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg
                    className="h-5 w-5 text-gray-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </div>
              </div>
            </div>

            {/* Quick Stats */}
            <div className="bg-gradient-to-r from-cyan-500 to-teal-500 p-5 rounded-2xl shadow-lg text-white">
              <h3 className="text-sm font-medium mb-3 opacity-90">SUMMARY</h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm opacity-80">Total Practice</p>
                  <p className="text-2xl font-bold">
                    {analyticsData?.summary?.totalPracticeMinutes || 0} min
                  </p>
                </div>
                <div>
                  <p className="text-sm opacity-80">Challenges</p>
                  <p className="text-2xl font-bold">
                    {analyticsData?.challengeCompletions?.length || 0}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Practice Chart Section */}
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 mb-8">
            <div className="px-6 py-5 border-b border-gray-100 flex justify-between items-center">
              <div className="flex items-center">
                <div className="w-2 h-8 bg-gradient-to-b from-indigo-400 to-cyan-400 rounded-full mr-3"></div>
                <h2 className="text-xl font-bold text-gray-800">
                  Practice Activity
                </h2>
              </div>
              <div className="text-sm font-medium text-gray-500">
                {timeRange === "week"
                  ? "Weekly"
                  : timeRange === "month"
                    ? "Monthly"
                    : "Yearly"}{" "}
                View
              </div>
            </div>
            <div className="p-6">
              <div className="h-80">
                <PracticeChart data={chartData} />
              </div>
              {chartData.length > 0 &&
                chartData.every((item) => item.minutes === 0) && (
                  <div className="text-center py-8 text-gray-500">
                    No practice data available for this period
                  </div>
                )}
            </div>
          </div>

          {/* Streaks Section */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {/* Current Streaks */}
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100">
              <div className="px-6 py-5 border-b border-gray-100">
                <div className="flex items-center">
                  <div className="w-2 h-8 bg-gradient-to-b from-purple-400 to-indigo-400 rounded-full mr-3"></div>
                  <h2 className="text-xl font-bold text-gray-800">
                    Current Streaks
                  </h2>
                </div>
              </div>
              <div className="p-6">
                {analyticsData?.streaksByLanguage &&
                Object.keys(analyticsData.streaksByLanguage).length > 0 ? (
                  <div className="space-y-4">
                    {Object.entries(analyticsData.streaksByLanguage).map(
                      ([lang, streak]) => {
                        const streakLevel =
                          streak >= 30
                            ? "expert"
                            : streak >= 14
                              ? "advanced"
                              : streak >= 7
                                ? "intermediate"
                                : "beginner";
                        const colors = {
                          expert:
                            "bg-gradient-to-r from-amber-400 to-yellow-500",
                          advanced:
                            "bg-gradient-to-r from-purple-400 to-indigo-500",
                          intermediate:
                            "bg-gradient-to-r from-cyan-400 to-blue-500",
                          beginner:
                            "bg-gradient-to-r from-teal-400 to-cyan-500",
                        };
                        const emojis = {
                          expert: "🏆",
                          advanced: "⭐",
                          intermediate: "🔥",
                          beginner: "🌱",
                        };

                        return (
                          <div
                            key={lang}
                            className="p-4 rounded-xl border border-gray-100 hover:shadow-sm transition-shadow"
                          >
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center">
                                <span className="text-2xl mr-3">
                                  {lang === "ja"
                                    ? "🇯🇵"
                                    : lang === "ko"
                                      ? "🇰🇷"
                                      : lang === "zh"
                                        ? "🇨🇳"
                                        : lang === "en"
                                          ? "🇬🇧"
                                          : lang === "es"
                                            ? "🇪🇸"
                                            : lang === "fr"
                                              ? "🇫🇷"
                                              : "🌐"}
                                </span>
                                <h3 className="font-medium">
                                  {getLanguageName(lang)}
                                </h3>
                              </div>
                              <span className="text-lg">
                                {emojis[streakLevel]}
                              </span>
                            </div>
                            <div className="flex items-baseline">
                              <span className="text-3xl font-bold mr-2">
                                {streak}
                              </span>
                              <span className="text-gray-500">days</span>
                              <div className="ml-auto text-sm font-medium text-gray-500">
                                {streakLevel.charAt(0).toUpperCase() +
                                  streakLevel.slice(1)}
                              </div>
                            </div>
                            <div className="w-full bg-gray-100 rounded-full h-2 mt-2">
                              <div
                                className={`h-2 rounded-full ${colors[streakLevel]}`}
                                style={{
                                  width: `${Math.min((streak / 30) * 100, 100)}%`,
                                }}
                              ></div>
                            </div>
                          </div>
                        );
                      }
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="inline-block p-4 bg-purple-50 rounded-full mb-4">
                      <svg
                        className="h-8 w-8 text-purple-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
                        />
                      </svg>
                    </div>
                    <h3 className="text-lg font-medium text-gray-700 mb-2">
                      No Active Streaks
                    </h3>
                    <p className="text-gray-500 max-w-md mx-auto">
                      Practice daily to start building streaks. Even 5 minutes
                      counts!
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Challenges Completed */}
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100">
              <div className="px-6 py-5 border-b border-gray-100">
                <div className="flex items-center">
                  <div className="w-2 h-8 bg-gradient-to-b from-teal-400 to-cyan-400 rounded-full mr-3"></div>
                  <h2 className="text-xl font-bold text-gray-800">
                    Challenges Completed
                  </h2>
                </div>
              </div>
              <div className="p-6">
                {analyticsData?.challengeCompletions?.length > 0 ? (
                  <div className="space-y-4">
                    {analyticsData.challengeCompletions
                      .slice(0, 3)
                      .map((completion) => (
                        <div
                          key={completion.id}
                          className="p-4 rounded-xl border border-gray-100 hover:shadow-sm transition-shadow"
                        >
                          <div className="flex items-center justify-between mb-2">
                            <h3 className="font-medium">
                              {completion.challenge.title}
                            </h3>
                            <span className="text-sm text-gray-500">
                              {completion.completionDate}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center">
                              <span className="text-xl mr-2">
                                {completion.challenge.languageCode === "ja"
                                  ? "🇯🇵"
                                  : completion.challenge.languageCode === "ko"
                                    ? "🇰🇷"
                                    : completion.challenge.languageCode === "zh"
                                      ? "🇨🇳"
                                      : completion.challenge.languageCode ===
                                          "en"
                                        ? "🇬🇧"
                                        : completion.challenge.languageCode ===
                                            "es"
                                          ? "🇪🇸"
                                          : completion.challenge
                                                .languageCode === "fr"
                                            ? "🇫🇷"
                                            : "🌐"}
                              </span>
                              <span className="text-sm text-gray-600">
                                {getLanguageName(
                                  completion.challenge.languageCode
                                )}
                              </span>
                            </div>
                            <span className="font-bold text-teal-600">
                              +$
                              {(
                                completion.challenge.stakeAmount *
                                (1 + completion.challenge.yieldPercentage / 100)
                              ).toFixed(2)}
                            </span>
                          </div>
                        </div>
                      ))}
                    {analyticsData.challengeCompletions.length > 3 && (
                      <button
                        onClick={() => router.push("/dashboard/challenges")}
                        className="cursor-pointer w-full py-2 text-sm font-medium text-teal-600 hover:text-teal-700"
                      >
                        View all {analyticsData.challengeCompletions.length}{" "}
                        challenges →
                      </button>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="inline-block p-4 bg-teal-50 rounded-full mb-4">
                      <svg
                        className="h-8 w-8 text-teal-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    </div>
                    <h3 className="text-lg font-medium text-gray-700 mb-2">
                      No Challenges Completed
                    </h3>
                    <p className="text-gray-500 max-w-md mx-auto mb-4">
                      Join challenges to track progress and earn rewards
                    </p>
                    <button
                      onClick={() => router.push("/dashboard/challenges")}
                      className="cursor-pointer px-4 py-2 bg-teal-500 hover:bg-teal-600 text-white rounded-lg font-medium shadow-sm"
                    >
                      Explore Challenges
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Personalized Tip */}
          <div className="bg-gradient-to-r from-indigo-50 to-blue-50 rounded-2xl p-6 border border-indigo-100 mb-8">
            <div className="flex items-start">
              <div className="bg-indigo-100 p-3 rounded-lg mr-4">
                <svg
                  className="h-6 w-6 text-indigo-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
              </div>
              <div>
                <h3 className="text-lg font-bold text-gray-800 mb-2">
                  Your Learning Tip
                </h3>
                <p className="text-gray-700">
                  {selectedLanguage !== "all"
                    ? `For ${getLanguageName(selectedLanguage)}, try practicing at the same time each day to build a habit. 
                      Even 10 minutes of focused practice is more effective than longer, irregular sessions.`
                    : "Focus on one language at a time for deeper learning. Master the basics before adding another language to your routine."}
                </p>
              </div>
            </div>
          </div>

          {/* Motivation Section */}
          <div className="bg-gradient-to-r from-cyan-500 to-teal-500 rounded-2xl p-8 text-white shadow-xl mb-10">
            <div className="flex flex-col md:flex-row items-center">
              <div className="flex-1 mb-6 md:mb-0">
                <h3 className="text-2xl font-bold mb-2">
                  Keep Up the Great Work!
                </h3>
                <p className="opacity-90 max-w-lg">
                  {analyticsData?.summary?.totalPracticeMinutes > 100
                    ? `You've practiced for ${analyticsData.summary.totalPracticeMinutes} minutes total - that's amazing dedication!`
                    : "Every minute of practice brings you closer to fluency. Stay consistent and you'll see progress!"}
                </p>
              </div>
              <button
                onClick={() => router.push("/dashboard/learn")}
                className="cursor-pointer flex-shrink-0 bg-white text-cyan-600 hover:bg-gray-100 font-bold px-6 py-3 rounded-lg shadow-md transition-colors"
              >
                Practice Now
              </button>
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}

================
File: app/dashboard/page.jsx
================
// app/dashboard/page.jsx - Improved version with real data fetching
"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
import ErrorMessage from "@/components/ui/ErrorMessage";

export default function Dashboard() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [profile, setProfile] = useState(null);
  const [activeChallenges, setActiveChallenges] = useState([]);
  const [todayChallenge, setTodayChallenge] = useState(null);
  const [activityData, setActivityData] = useState([]);
  const [error, setError] = useState(null);
  const [learningStats, setLearningStats] = useState({
    totalMinutesPracticed: 0,
    vocabularySize: 0,
    currentStreak: 0,
    longestStreak: 0,
  });

  useEffect(() => {
    // Main data fetching function to load all dashboard data
    async function fetchDashboardData() {
      try {
        setIsLoading(true);
        setError(null);

        // Fetch all data in parallel for efficiency
        const [profileRes, challengesRes, analyticsRes, activityRes] =
          await Promise.all([
            fetch("/api/users/profile"),
            fetch("/api/challenges/user?status=ACTIVE"),
            fetch("/api/users/analytics"),
            fetch("/api/users/activity"),
          ]);

        // Handle any authentication errors
        if (profileRes.status === 401) {
          router.push("/auth/signin");
          return;
        }

        // Handle other error responses
        if (!profileRes.ok) throw new Error("Failed to fetch user profile");
        if (!challengesRes.ok)
          throw new Error("Failed to fetch active challenges");

        // Parse response data
        const profileData = await profileRes.json();
        const challengesData = await challengesRes.json();

        // Set profile data
        setProfile(profileData);

        // Set active challenges
        setActiveChallenges(challengesData);

        // Process analytics data if available
        if (analyticsRes.ok) {
          const analyticsData = await analyticsRes.json();
          setLearningStats({
            totalMinutesPracticed:
              analyticsData.summary?.totalPracticeMinutes || 0,
            vocabularySize:
              analyticsData.progressRecords?.[0]?.vocabularySize || 0,
            currentStreak:
              Object.values(analyticsData.streaksByLanguage || {})[0] || 0,
            longestStreak:
              analyticsData.progressRecords?.[0]?.longestStreak || 0,
          });

          // Process activity data for the chart
          if (analyticsData.practiceByDay) {
            const formattedActivity = formatActivityData(
              analyticsData.practiceByDay
            );
            setActivityData(formattedActivity);
          }
        }

        // Process activity data if available
        if (activityRes.ok) {
          const activityData = await activityRes.json();
          if (!activityData.activities) {
            console.warn(
              "Activity data missing expected structure:",
              activityData
            );
          }
        }

        // Setup today's challenge if there are active challenges
        if (challengesData.length > 0) {
          await setupTodayChallenge(challengesData[0]);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
        setError(error.message || "Failed to load dashboard data");
      } finally {
        setIsLoading(false);
      }
    }

    fetchDashboardData();
  }, [router]);

  // Helper function to setup today's challenge
  const setupTodayChallenge = async (challenge) => {
    try {
      // Fetch the daily exercise data for this challenge
      const exerciseRes = await fetch(
        `/api/challenges/${challenge.challengeId}/daily-exercise`
      );

      if (exerciseRes.ok) {
        const exerciseData = await exerciseRes.json();

        setTodayChallenge({
          id: challenge.challengeId,
          title: challenge.challenge.title,
          description:
            exerciseData.description ||
            "Continue your daily practice to maintain your streak!",
          exercise:
            exerciseData.exercise ||
            `Practice ${challenge.challenge.dailyRequirement} minutes of ${getLanguageName(challenge.challenge.languageCode)} today.`,
          languageCode: challenge.challenge.languageCode,
          progress: challenge.progressPercentage,
          dailyRequirement: challenge.challenge.dailyRequirement,
          currentProgress: exerciseData.currentProgress || 0,
        });
      }
    } catch (error) {
      console.error("Error fetching daily exercise:", error);
    }
  };

  // Helper function to format activity data for the chart
  const formatActivityData = (practiceByDay) => {
    const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    const today = new Date();
    const dayOfWeek = today.getDay(); // 0 = Sunday, 6 = Saturday

    return days.map((day, index) => {
      const isToday = index === dayOfWeek;
      const dateStr = getDateString(
        new Date(
          today.getTime() - ((dayOfWeek - index + 7) % 7) * 24 * 60 * 60 * 1000
        )
      );
      const minutesForDay = practiceByDay[dateStr]
        ? Object.values(practiceByDay[dateStr]).reduce(
            (sum, val) => sum + val,
            0
          )
        : 0;

      return {
        day,
        minutes: minutesForDay,
        isToday,
      };
    });
  };

  // Helper function to get date string in YYYY-MM-DD format
  const getDateString = (date) => {
    return date.toISOString().split("T")[0];
  };

  // Helper function to get language name from code
  const getLanguageName = (code) => {
    const languages = {
      en: "English",
      es: "Spanish",
      fr: "French",
      de: "German",
      it: "Italian",
      ja: "Japanese",
      ko: "Korean",
      zh: "Chinese",
      ru: "Russian",
      pt: "Portuguese",
      ar: "Arabic",
      hi: "Hindi",
    };

    return languages[code] || code;
  };

  // Handle starting today's challenge
  const handleStartChallenge = () => {
    if (todayChallenge) {
      router.push(`/dashboard/learn?challengeId=${todayChallenge.id}`);
    }
  };

  // Handle creating a new challenge
  const handleNewChallenge = () => {
    router.push("/dashboard/challenges/create");
  };

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (error) {
    return (
      <div className="min-h-screen bg-slate-50 flex flex-col items-center justify-center p-4">
        <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full">
          <h1 className="text-2xl font-bold text-red-600 mb-4">
            Error Loading Dashboard
          </h1>
          <p className="text-slate-600 mb-6">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="cursor-pointer w-full bg-gradient-to-r from-cyan-500 to-teal-500 text-white py-3 px-6 rounded-lg font-medium shadow-md"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-50 text-slate-800">
      {/* Robot mascot floating in corner */}
      <div className="fixed bottom-20 right-6 hidden lg:block z-10 animate-float">
        <RobotAvatar size="large" />
      </div>

      {/* Dashboard Header */}
      <header className="bg-white shadow-sm py-4 px-6">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center">
            <div className="mr-3">
              <RobotAvatar size="small" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-slate-800">
                こんにちは,{" "}
                <span className="text-cyan-600">
                  {profile?.username || "Learner"}
                </span>
                !
              </h1>
              <p className="text-slate-500">
                Your learning adventure continues...
              </p>
            </div>
          </div>

          <div className="flex space-x-3">
            <button
              className="cursor-pointer bg-white border border-slate-200 hover:bg-slate-50 text-slate-700 px-4 py-2 rounded-lg flex items-center shadow-sm transition-colors"
              onClick={() => router.push("/dashboard")}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 mr-1 text-slate-400"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
              </svg>
              <span>Dashboard</span>
            </button>

            <button
              className="cursor-pointer bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-4 py-2 rounded-lg flex items-center shadow-md transition-all transform hover:translate-y-[-2px]"
              onClick={handleNewChallenge}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 mr-1"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z"
                  clipRule="evenodd"
                />
              </svg>
              <span>New Challenge</span>
            </button>
          </div>
        </div>
      </header>

      <main className="px-6 py-6">
        <div className="max-w-7xl mx-auto">
          {/* Main dashboard grid */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Left column */}
            <div className="lg:col-span-2 space-y-6">
              {/* Today's Challenge Card */}
              {todayChallenge ? (
                <TodaysChallenge
                  challenge={todayChallenge}
                  onStart={handleStartChallenge}
                />
              ) : (
                <div className="bg-white rounded-xl shadow-sm border border-slate-100 overflow-hidden">
                  <div className="border-b border-slate-100 bg-gradient-to-r from-cyan-50 to-teal-50 px-6 py-4">
                    <h2 className="text-xl font-bold text-slate-800">
                      No Active Challenges
                    </h2>
                  </div>
                  <div className="p-6">
                    <p className="text-slate-600 mb-6">
                      You don't have any active challenges yet. Start a new
                      challenge to begin your language learning journey!
                    </p>
                    <button
                      onClick={handleNewChallenge}
                      className="cursor-pointer w-full bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white py-3 px-6 rounded-lg font-medium shadow-md transition-all transform hover:translate-y-[-2px] flex items-center justify-center"
                    >
                      Create Your First Challenge
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 ml-2"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fillRule="evenodd"
                          d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                          clipRule="evenodd"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              )}

              {/* My Learning Stats */}
              <LearningStats stats={learningStats} />

              {/* Progress Charts */}
              <ActivityChart data={activityData} />
            </div>

            {/* Right column */}
            <div className="space-y-6">
              {/* User Profile Card */}
              <UserProfileCard profile={profile} />

              {/* Active Challenges */}
              <ActiveChallenges
                challenges={activeChallenges}
                onViewChallenge={(id) =>
                  router.push(`/dashboard/challenges/${id}`)
                }
                onViewAll={() => router.push("/dashboard/challenges")}
              />
            </div>
          </div>

          {/* Learning Path Section */}
          <div className="mt-8">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-slate-800">
                Your Learning Path
              </h2>
              <Link
                href="/dashboard/learn"
                className="text-cyan-600 hover:text-cyan-700 flex items-center"
              >
                View All
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 ml-1"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                    clipRule="evenodd"
                  />
                </svg>
              </Link>
            </div>

            <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-100">
              {profile?.learningLanguages?.length > 0 ? (
                <LearningPath
                  language={profile.learningLanguages[0].languageCode}
                  level={profile.learningLanguages[0].proficiencyLevel}
                  onSelectLesson={(lessonId) =>
                    router.push(`/dashboard/learn`)
                  }
                />
              ) : (
                <div className="text-center py-8">
                  <p className="text-slate-500 mb-4">
                    You haven't set up your learning languages yet.
                  </p>
                  <Link
                    href="/dashboard/profile"
                    className="inline-block bg-gradient-to-r from-cyan-500 to-teal-500 text-white px-4 py-2 rounded-lg"
                  >
                    Update Profile
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>

      {/* Bottom Navigation */}
      <nav className="fixed bottom-0 left-0 right-0 bg-white border-t border-slate-200 py-2 px-6 z-40">
        <div className="max-w-7xl mx-auto">
          <ul className="flex justify-around">
            <li>
              <Link
                href="/dashboard"
                className="flex flex-col items-center text-cyan-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
                  />
                </svg>
                <span className="text-xs mt-1">Home</span>
              </Link>
            </li>
            <li>
              <Link
                href="/dashboard/learn"
                className="flex flex-col items-center text-slate-400 hover:text-cyan-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                  />
                </svg>
                <span className="text-xs mt-1">Learn</span>
              </Link>
            </li>
            <li className="relative">
              <Link
                href="/dashboard/learn"
                className="flex flex-col items-center text-slate-700"
              >
                <div className="absolute -top-10 bg-gradient-to-r from-cyan-500 to-teal-500 rounded-full p-3 shadow-lg">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-white"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth={2}
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                    />
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                </div>
                <span className="text-xs mt-8">Practice</span>
              </Link>
            </li>
            <li>
              <Link
                href="/dashboard/challenges"
                className="flex flex-col items-center text-slate-400 hover:text-cyan-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
                  />
                </svg>
                <span className="text-xs mt-1">Challenges</span>
              </Link>
            </li>
            <li>
              <Link
                href="/dashboard/profile"
                className="flex flex-col items-center text-slate-400 hover:text-cyan-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  />
                </svg>
                <span className="text-xs mt-1">Profile</span>
              </Link>
            </li>
          </ul>
        </div>
      </nav>
    </div>
  );
}

// Robot Avatar Component
function RobotAvatar({ size = "medium" }) {
  const sizeClasses = {
    small: "w-10 h-10",
    medium: "w-16 h-16",
    large: "w-24 h-24",
  };

  return (
    <div className={`relative ${sizeClasses[size]}`}>
      <div className="relative bg-gradient-to-br from-cyan-400 to-teal-500 rounded-2xl w-full h-full flex items-center justify-center overflow-hidden border-2 border-cyan-300 shadow-md">
        {/* Eyes */}
        <div className="flex space-x-2">
          <div className="bg-yellow-300 rounded-full w-1/4 h-1/4 flex items-center justify-center border border-yellow-400">
            <div className="bg-black rounded-full w-1/2 h-1/2"></div>
          </div>
          <div className="bg-yellow-300 rounded-full w-1/4 h-1/4 flex items-center justify-center border border-yellow-400">
            <div className="bg-black rounded-full w-1/2 h-1/2"></div>
          </div>
        </div>

        {/* Antenna */}
        <div className="absolute -top-2 left-1/2 transform -translate-x-1/2">
          <div className="w-1 h-3 bg-slate-600"></div>
          <div className="w-2 h-2 rounded-full bg-red-500 animate-pulse"></div>
        </div>

        {/* Mouth */}
        <div className="absolute bottom-2 w-1/2 h-1 bg-slate-700 rounded-full"></div>
      </div>

      {/* Shadow effect */}
      <div className="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-4/5 h-1 bg-black opacity-10 rounded-full blur-sm"></div>
    </div>
  );
}

// Today's Challenge Component
function TodaysChallenge({ challenge, onStart }) {
  const getLanguageFlag = (code) => {
    const flags = {
      ja: "🇯🇵",
      ko: "🇰🇷",
      zh: "🇨🇳",
      en: "🇬🇧",
      es: "🇪🇸",
      fr: "🇫🇷",
      de: "🇩🇪",
      it: "🇮🇹",
      ru: "🇷🇺",
    };
    return flags[code] || "🌐";
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-slate-100 overflow-hidden">
      <div className="border-b border-slate-100 bg-gradient-to-r from-cyan-50 to-teal-50 px-6 py-4">
        <div className="flex items-center">
          <span className="text-2xl mr-3">
            {getLanguageFlag(challenge.languageCode)}
          </span>
          <h2 className="text-xl font-bold text-slate-800">
            {challenge.title}
          </h2>
        </div>
      </div>

      <div className="p-6">
        <p className="text-slate-600 mb-4">{challenge.description}</p>

        {/* Daily progress bar */}
        <div className="mb-4">
          <div className="flex justify-between text-sm text-slate-500 mb-1">
            <span>Today's Progress</span>
            <span>
              {challenge.currentProgress}/{challenge.dailyRequirement} minutes
            </span>
          </div>
          <div className="w-full bg-slate-200 rounded-full h-2">
            <div
              className="bg-gradient-to-r from-cyan-400 to-teal-500 h-2 rounded-full"
              style={{
                width: `${Math.min(100, (challenge.currentProgress / challenge.dailyRequirement) * 100)}%`,
              }}
            ></div>
          </div>
        </div>

        <div className="bg-slate-50 rounded-lg p-4 mb-6 border border-slate-100">
          <h3 className="font-medium text-slate-700 mb-2">Today's Exercise:</h3>
          <p className="text-slate-600">{challenge.exercise}</p>
        </div>

        <button
          onClick={onStart}
          className="cursor-pointer w-full bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white py-3 px-6 rounded-lg font-medium shadow-md transition-all transform hover:translate-y-[-2px] flex items-center justify-center"
        >
          Start Today's Challenge
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 ml-2"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
              clipRule="evenodd"
            />
          </svg>
        </button>
      </div>
    </div>
  );
}

// Learning Stats Component (continued)
function LearningStats({ stats }) {
  return (
    <div className="bg-white rounded-xl shadow-sm border border-slate-100 overflow-hidden">
      <div className="border-b border-slate-100 px-6 py-4">
        <h2 className="text-xl font-bold text-slate-800 flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 mr-2 text-cyan-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732l-3.354 1.935-1.18 4.455a1 1 0 01-1.933 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732l3.354-1.935 1.18-4.455A1 1 0 0112 2z"
              clipRule="evenodd"
            />
          </svg>
          My Learning Stats
        </h2>
      </div>

      <div className="p-6">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <StatCard
            title="Total Practice"
            value={`${stats.totalMinutesPracticed || 0} min`}
            icon={
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6 text-cyan-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth={1.5}
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            }
            color="cyan"
          />

          <StatCard
            title="Vocabulary"
            value={`${stats.vocabularySize || 0} words`}
            icon={
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6 text-purple-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth={1.5}
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"
                />
              </svg>
            }
            color="purple"
          />

          <StatCard
            title="Current Streak"
            value={`${stats.currentStreak || 0} days`}
            icon={
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6 text-amber-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth={1.5}
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M13 10V3L4 14h7v7l9-11h-7z"
                />
              </svg>
            }
            color="amber"
          />

          <StatCard
            title="Longest Streak"
            value={`${stats.currentStreak || 0} days`}
            icon={
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6 text-teal-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth={1.5}
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M11.933 12.8a1 1 0 000-1.6L6.6 7.2A1 1 0 005 8v8a1 1 0 001.6.8l5.333-4zM19.933 12.8a1 1 0 000-1.6l-5.333-4A1 1 0 0013 8v8a1 1 0 001.6.8l5.333-4z"
                />
              </svg>
            }
            color="teal"
          />
        </div>
      </div>
    </div>
  );
}
// Continuing Dashboard components...

// Stat Card Component
function StatCard({ title, value, icon, color }) {
  const bgColors = {
    cyan: "bg-gradient-to-br from-cyan-50 to-cyan-100 border-cyan-200",
    purple: "bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200",
    amber: "bg-gradient-to-br from-amber-50 to-amber-100 border-amber-200",
    teal: "bg-gradient-to-br from-teal-50 to-teal-100 border-teal-200",
  };

  const textColors = {
    cyan: "text-cyan-700",
    purple: "text-purple-700",
    amber: "text-amber-700",
    teal: "text-teal-700",
  };

  const iconColors = {
    cyan: "text-cyan-500",
    purple: "text-purple-500",
    amber: "text-amber-500",
    teal: "text-teal-500",
  };

  return (
    <div
      className={`rounded-lg p-5 shadow-md border flex flex-col ${bgColors[color]} hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1`}
    >
      <div className="flex justify-between items-start mb-3">
        <h3 className="text-sm font-medium text-slate-700">{title}</h3>
        <div className={`${iconColors[color]}`}>{icon}</div>
      </div>
      <div className={`text-2xl font-bold mt-auto ${textColors[color]}`}>
        {value}
      </div>
    </div>
  );
}

// Activity Chart Component
function ActivityChart({ data }) {
  // Find max value for scaling
  const maxMinutes = Math.max(...data.map((d) => d.minutes), 10); // Min of 10 for scale

  return (
    <div className=" rounded-xl shadow-md border border-slate-200 overflow-hidden hover:shadow-lg transition-all duration-300">
      <div className="border-b border-slate-200 px-6 py-4 bg-gradient-to-r from-slate-50 to-white">
        <h2 className="text-xl font-bold text-slate-800 flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 mr-2 text-cyan-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
          </svg>
          Weekly Activity
        </h2>
      </div>
      <div className="p-6">
        <div className="h-48 flex items-end justify-between">
          {data.map((item, index) => (
            <div key={index} className="flex flex-col items-center group">
              <div
                className={`w-12 rounded-t-md relative transition-all duration-300 ${
                  // Highlight today
                  item.isToday
                    ? "bg-gradient-to-t from-cyan-500 to-teal-400 shadow-md border-2 border-amber-400"
                    : "bg-gradient-to-t from-cyan-400 to-teal-400 opacity-70 group-hover:opacity-100"
                }`}
                style={{ height: `${(item.minutes / maxMinutes) * 100}%` }}
              >
                {/* Minutes indicator */}
                <div className="absolute -top-7 left-1/2 transform -translate-x-1/2 text-xs font-medium text-slate-700 bg-white py-1 px-2 rounded-full shadow-sm opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                  {item.minutes}min
                </div>
              </div>
              <div
                className={`text-xs mt-3 ${item.isToday ? "font-bold text-slate-800" : "text-slate-500 group-hover:text-slate-700"}`}
              >
                {item.day}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// User Profile Card Component
function UserProfileCard({ profile }) {
  const getLanguageName = (code) => {
    const languages = {
      en: "English",
      es: "Spanish",
      fr: "French",
      de: "German",
      it: "Italian",
      ja: "Japanese",
      ko: "Korean",
      zh: "Chinese",
      ru: "Russian",
      pt: "Portuguese",
      ar: "Arabic",
      hi: "Hindi",
    };

    return languages[code] || code;
  };

  const getLevelName = (level) => {
    const levels = {
      BEGINNER: "Beginner",
      ELEMENTARY: "Elementary",
      INTERMEDIATE: "Intermediate",
      ADVANCED: "Advanced",
      FLUENT: "Fluent",
    };

    return levels[level] || level;
  };

  const getLevelColor = (level) => {
    const colors = {
      BEGINNER: "bg-emerald-100 text-emerald-800",
      ELEMENTARY: "bg-sky-100 text-sky-800",
      INTERMEDIATE: "bg-amber-100 text-amber-800",
      ADVANCED: "bg-purple-100 text-purple-800",
      FLUENT: "bg-rose-100 text-rose-800",
    };

    return colors[level] || "bg-slate-100 text-slate-800";
  };

  if (!profile) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-slate-100 overflow-hidden p-6 animate-pulse">
        <div className="h-16 bg-slate-200 rounded mb-4"></div>
        <div className="h-4 bg-slate-200 rounded w-1/2 mb-6"></div>
        <div className="space-y-3">
          <div className="h-12 bg-slate-200 rounded"></div>
          <div className="h-12 bg-slate-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border border-slate-100 overflow-hidden">
      <div className="bg-gradient-to-r from-cyan-400 to-teal-500 px-6 py-4">
        <div className="flex items-center">
          <div className="w-12 h-12 bg-white rounded-full mr-3 flex items-center justify-center text-xl font-bold text-cyan-600 shadow-md">
            {profile.username?.charAt(0) || "U"}
          </div>
          <div>
            <h2 className="text-lg font-bold text-white">
              {profile.username || "User"}
            </h2>
            <p className="text-cyan-100 text-sm">
              {profile.walletAddress
                ? `${profile.walletAddress.slice(0, 6)}...${profile.walletAddress.slice(-4)}`
                : "Connect Wallet"}
            </p>
          </div>
        </div>
      </div>

      <div className="p-6">
        <h3 className="text-sm font-medium text-slate-500 uppercase tracking-wider mb-3">
          Learning Languages
        </h3>
        {profile.learningLanguages && profile.learningLanguages.length > 0 ? (
          <div className="space-y-3 mb-6">
            {profile.learningLanguages.map((lang) => (
              <div
                key={lang.id || lang.languageCode}
                className="flex justify-between items-center bg-slate-50 rounded-lg p-3 border border-slate-100"
              >
                <div className="flex items-center">
                  <span className="mr-2 text-lg">
                    {lang.languageCode === "ja"
                      ? "🇯🇵"
                      : lang.languageCode === "ko"
                        ? "🇰🇷"
                        : lang.languageCode === "zh"
                          ? "🇨🇳"
                          : lang.languageCode === "en"
                            ? "🇬🇧"
                            : lang.languageCode === "es"
                              ? "🇪🇸"
                              : lang.languageCode === "fr"
                                ? "🇫🇷"
                                : lang.languageCode === "de"
                                  ? "🇩🇪"
                                  : lang.languageCode === "it"
                                    ? "🇮🇹"
                                    : lang.languageCode === "ru"
                                      ? "🇷🇺"
                                      : "🌐"}
                  </span>
                  <span className="font-medium text-slate-700">
                    {getLanguageName(lang.languageCode)}
                  </span>
                </div>
                <span
                  className={`text-xs px-2 py-1 rounded-full ${getLevelColor(lang.proficiencyLevel)}`}
                >
                  {getLevelName(lang.proficiencyLevel)}
                </span>
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-slate-50 rounded-lg p-4 mb-6 border border-slate-100 text-center">
            <p className="text-slate-500 mb-2">
              No learning languages set up yet.
            </p>
            <Link
              href="/dashboard/profile"
              className="text-cyan-600 hover:text-cyan-700 font-medium"
            >
              Update Profile
            </Link>
          </div>
        )}

        <h3 className="text-sm font-medium text-slate-500 uppercase tracking-wider mb-3">
          Achievements
        </h3>
        {/* We'll fetch real achievements later, for now showing placeholder badges */}
        <div className="flex flex-wrap gap-2 mb-6">
          <div
            className="w-10 h-10 bg-gradient-to-br from-amber-400 to-amber-500 rounded-full flex items-center justify-center shadow-sm"
            title="5-Day Streak"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-white"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" />
            </svg>
          </div>
          <div
            className="w-10 h-10 bg-gradient-to-br from-sky-400 to-sky-500 rounded-full flex items-center justify-center shadow-sm"
            title="100 Words Learned"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-white"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z" />
            </svg>
          </div>
          <div
            className="w-10 h-10 bg-gradient-to-br from-emerald-400 to-emerald-500 rounded-full flex items-center justify-center shadow-sm"
            title="First Challenge Completed"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-white"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clipRule="evenodd"
              />
            </svg>
          </div>
        </div>

        <Link
          href="/dashboard/profile"
          className="block text-center bg-gradient-to-r from-slate-500 to-slate-600 hover:from-slate-600 hover:to-slate-700 text-white px-4 py-2 rounded-lg transition-colors shadow-sm"
        >
          View Full Profile
        </Link>
      </div>
    </div>
  );
}

// Active Challenges Component
function ActiveChallenges({ challenges, onViewChallenge, onViewAll }) {
  const getLanguageFlag = (code) => {
    const flags = {
      ja: "🇯🇵",
      ko: "🇰🇷",
      zh: "🇨🇳",
      en: "🇬🇧",
      es: "🇪🇸",
      fr: "🇫🇷",
      de: "🇩🇪",
      it: "🇮🇹",
      ru: "🇷🇺",
    };
    return flags[code] || "🌐";
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  // Calculate days left for each challenge
  const processedChallenges = challenges.map((challenge) => {
    const endDate = new Date(challenge.endDate);
    const now = new Date();
    const daysLeft = Math.max(
      0,
      Math.ceil((endDate - now) / (1000 * 60 * 60 * 24))
    );

    return {
      ...challenge,
      daysLeft,
      progress: challenge.progressPercentage,
      languageCode: challenge.challenge.languageCode,
    };
  });

  return (
    <div className="bg-white rounded-xl shadow-sm border border-slate-100 overflow-hidden">
      <div className="border-b border-slate-100 px-6 py-4">
        <h2 className="text-xl font-bold text-slate-800 flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 mr-2 text-cyan-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z" />
          </svg>
          Active Challenges
        </h2>
      </div>

      <div className="p-6">
        {processedChallenges.length > 0 ? (
          <div className="space-y-4">
            {processedChallenges.map((challenge) => (
              <div
                key={challenge.id}
                className="bg-slate-50 rounded-lg border border-slate-100 p-4 hover:shadow-md transition-shadow cursor-pointer"
                onClick={() => onViewChallenge(challenge.challengeId)}
              >
                <div className="flex justify-between items-start">
                  <div className="flex items-start">
                    <span className="text-2xl mr-3 mt-1">
                      {getLanguageFlag(challenge.languageCode)}
                    </span>
                    <div>
                      <h3 className="font-medium text-slate-800">
                        {challenge.challenge.title}
                      </h3>
                      <div className="flex items-center mt-1">
                        <span className="text-xs px-2 py-0.5 bg-cyan-100 text-cyan-800 rounded-full">
                          {challenge.daysLeft} days left
                        </span>
                        <span className="mx-2 text-slate-300">•</span>
                        <span className="text-xs text-slate-500">
                          {challenge.challenge.dailyRequirement} min/day
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="flex flex-col items-end">
                    <span className="text-sm font-medium px-2 py-1 bg-amber-100 text-amber-800 rounded-full">
                      {formatCurrency(challenge.stakedAmount)}
                    </span>
                  </div>
                </div>

                <div className="mt-4">
                  <div className="flex justify-between text-sm text-slate-500 mb-1">
                    <span>Progress</span>
                    <span className="font-medium text-slate-700">
                      {challenge.progress}%
                    </span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-2">
                    <div
                      className="bg-gradient-to-r from-cyan-400 to-teal-500 h-2 rounded-full"
                      style={{ width: `${challenge.progress}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-6 bg-slate-50 rounded-lg border border-slate-100">
            <p className="text-slate-500 mb-4">
              You don't have any active challenges yet.
            </p>
            <button
              onClick={() => onViewAll()}
              className="cursor-pointer px-4 py-2 bg-cyan-500 text-white rounded-lg hover:bg-cyan-600 transition-colors"
            >
              Browse Challenges
            </button>
          </div>
        )}

        <button
          onClick={onViewAll}
          className="cursor-pointer block w-full text-center bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-4 py-2 rounded-lg mt-4 transition-colors shadow-md"
        >
          View All Challenges
        </button>
      </div>
    </div>
  );
}

// Learning Path Component
function LearningPath({ language, level, onSelectLesson }) {
  const [lessons, setLessons] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Fetch learning path data
    async function fetchLearningPath() {
      try {
        // In a real implementation, this would be fetched from the API
        // For now, we'll use sample data similar to the original
        const sampleLessons = [
          { id: 1, title: "Grammers", completed: true },
          { id: 2, title: "Basic Conversation", completed: true },
          { id: 3, title: "Vocabularies", current: true },
          { id: 4, title: "Practive with AI Voice Tutor", locked: false },
        
        ];

        setLessons(sampleLessons);
      } catch (error) {
        console.error("Error fetching learning path:", error);
      } finally {
        setIsLoading(false);
      }
    }

    fetchLearningPath();
  }, [language, level]);

  if (isLoading) {
    return (
      <div className="flex justify-center py-8">
        <LoadingSpinner size="medium" />
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h3 className="font-bold text-slate-800 flex items-center">
          <span className="mr-2 text-xl">
            {language === "ja"
              ? "🇯🇵"
              : language === "ko"
                ? "🇰🇷"
                : language === "zh"
                  ? "🇨🇳"
                  : "🌐"}
          </span>
          {language === "ja"
            ? "Japanese"
            : language === "ko"
              ? "Korean"
              : language === "zh"
                ? "Chinese"
                : "Language"}{" "}
          Learning Path
        </h3>
        <span className="text-xs px-2 py-1 bg-amber-100 text-amber-800 rounded-full">
          {level === "BEGINNER"
            ? "Beginner"
            : level === "ELEMENTARY"
              ? "Elementary"
              : level === "INTERMEDIATE"
                ? "Intermediate"
                : level === "ADVANCED"
                  ? "Advanced"
                  : level === "FLUENT"
                    ? "Fluent"
                    : level}
        </span>
      </div>

      <div className="relative">
        {/* Connecting line */}
        <div className="absolute top-0 bottom-0 left-5 w-0.5 bg-slate-200"></div>

        {/* Path items */}
        <div className="space-y-6 relative">
          {lessons.map((item) => (
            <div key={item.id} className="flex">
              <div
                className={`h-10 w-10 rounded-full flex items-center justify-center z-10 mr-4 shadow-sm ${
                  item.completed
                    ? "bg-gradient-to-br from-emerald-400 to-emerald-500"
                    : item.current
                      ? "bg-gradient-to-br from-amber-400 to-amber-500"
                      : item.locked
                        ? "bg-gradient-to-br from-slate-300 to-slate-400"
                        : "bg-gradient-to-br from-cyan-400 to-cyan-500"
                }`}
              >
                {item.completed ? (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 text-white"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                      clipRule="evenodd"
                    />
                  </svg>
                ) : item.current ? (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 text-white"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                      clipRule="evenodd"
                    />
                  </svg>
                ) : item.locked ? (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 text-white"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                      clipRule="evenodd"
                    />
                  </svg>
                ) : (
                  <span className="text-white font-medium">{item.id}</span>
                )}
              </div>

              <div
                className={`flex-1 p-4 rounded-lg shadow-sm ${
                  item.current
                    ? "bg-gradient-to-r from-amber-50 to-orange-50 border-2 border-amber-300"
                    : item.locked
                      ? "bg-slate-50 border border-slate-200 opacity-60"
                      : "bg-white border border-slate-200"
                }`}
              >
                <div className="flex justify-between items-center">
                  <h4
                    className={`font-medium ${item.locked ? "text-slate-400" : "text-slate-800"}`}
                  >
                    {item.title}
                  </h4>
                  {item.current && (
                    <span className="text-xs bg-amber-400 text-amber-900 px-2 py-0.5 rounded-full font-medium">
                      Current
                    </span>
                  )}
                </div>

                {!item.locked && (
                  <div className="mt-2">
                    <button
                      onClick={() => onSelectLesson(item.id)}
                      className={`text-sm ${
                        item.current
                          ? "text-amber-600 hover:text-amber-700"
                          : "text-cyan-600 hover:text-cyan-700"
                      } hover:underline flex items-center font-medium`}
                    >
                      {item.completed ? "Review" : "Start"} Lesson
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-4 w-4 ml-1"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fillRule="evenodd"
                          d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                          clipRule="evenodd"
                        />
                      </svg>
                    </button>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// Loading Screen Component
function LoadingScreen() {
  return (
    <div className="min-h-screen bg-slate-50 flex flex-col items-center justify-center p-4">
      <div className="mb-8 animate-bounce">
        <RobotAvatar size="large" />
      </div>

      <h1 className="text-2xl font-bold mb-2 text-slate-800">
        Loading ShinoLearn...
      </h1>
      <p className="text-slate-500 mb-8">
        Preparing your language learning adventure
      </p>

      <div className="w-64 h-2 bg-slate-200 rounded-full overflow-hidden">
        <div className="h-full bg-gradient-to-r from-cyan-400 to-teal-500 animate-loading-bar"></div>
      </div>

      <style jsx>{`
        @keyframes loading {
          0% {
            width: 0%;
          }
          50% {
            width: 70%;
          }
          100% {
            width: 100%;
          }
        }
        .animate-loading-bar {
          animation: loading 2s infinite;
        }
      `}</style>
    </div>
  );
}

================
File: app/testing/page.jsx
================
// app/page.js
"use client";

import { useState } from "react";

export default function HomePage() {
  const [inputText, setInputText] = useState("");
  const [output, setOutput] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleTranslate = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // Call the API route created in app/api/inference/route.js
      const response = await fetch("/api/inference", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ inputs: inputText }),
      });

      const data = await response.json();
      
      if (response.ok) {
        setOutput(data);
      } else {
        setError(data.error || "Something went wrong");
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: "2rem" }}>
      <h1>Bloomz‑560m Inference with Next.js App Router</h1>
      <form onSubmit={handleTranslate}>
        <input
          type="text"
          value={inputText}
          onChange={(e) => setInputText(e.target.value)}
          placeholder="Enter your prompt"
          style={{ width: "300px", padding: "0.5rem", marginRight: "1rem" }}
        />
        <button type="submit" disabled={loading}>
          {loading ? "Running..." : "Run Inference"}
        </button>
      </form>
      {error && (
        <p style={{ color: "red", marginTop: "1rem" }}>Error: {error}</p>
      )}
      {output && (
        <pre style={{ marginTop: "1rem", background: "#f4f4f4", padding: "1rem" }}>
          {JSON.stringify(output, null, 2)}
        </pre>
      )}
    </div>
  );
}

================
File: app/globals.css
================
@import "tailwindcss";
@import "tw-animate-css";


:root {
  --foreground-rgb: 51, 65, 85;
  --background-rgb: 248, 250, 252;
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
  min-height: 100vh;
}

/* Custom Animations */
@keyframes float {
  0% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
  100% { transform: translateY(0px); }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

@keyframes loading {
  0% { width: 0%; }
  50% { width: 70%; }
  100% { width: 100%; }
}

.animate-loading-bar {
  animation: loading 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes bounce {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-25px); }
}

.animate-bounce {
  animation: bounce 1s infinite;
}

/* Tailwind component classes */
@layer components {
  /* Buttons */
  .btn-primary {
    @apply bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-4 py-2 rounded-lg shadow-md transition-all transform hover:translate-y-[-2px];
  }
  
  .btn-secondary {
    @apply bg-white hover:bg-slate-50 border border-slate-200 text-slate-700 px-4 py-2 rounded-lg shadow-sm transition-colors;
  }
  
  .btn-tertiary {
    @apply bg-gradient-to-r from-slate-500 to-slate-600 hover:from-slate-600 hover:to-slate-700 text-white px-4 py-2 rounded-lg shadow-sm transition-colors;
  }
  
  /* Cards */
  .card {
    @apply bg-white rounded-xl shadow-sm border border-slate-100 overflow-hidden;
  }
  
  .card-header {
    @apply border-b border-slate-100 px-6 py-4;
  }
  
  .card-body {
    @apply p-6;
  }
  
  .card-footer {
    @apply border-t border-slate-100 px-6 py-4;
  }
  
  /* Stats */
  .stat-card-cyan {
    @apply rounded-lg p-4 shadow-sm border bg-cyan-50 border-cyan-100;
  }
  
  .stat-card-purple {
    @apply rounded-lg p-4 shadow-sm border bg-purple-50 border-purple-100;
  }
  
  .stat-card-amber {
    @apply rounded-lg p-4 shadow-sm border bg-amber-50 border-amber-100;
  }
  
  .stat-card-teal {
    @apply rounded-lg p-4 shadow-sm border bg-teal-50 border-teal-100;
  }
  
  /* Badges */
  .badge {
    @apply text-xs px-2 py-1 rounded-full font-medium;
  }
  
  .badge-primary {
    @apply bg-cyan-100 text-cyan-800;
  }
  
  .badge-secondary {
    @apply bg-amber-100 text-amber-800;
  }
  
  .badge-success {
    @apply bg-emerald-100 text-emerald-800;
  }
  
  .badge-danger {
    @apply bg-rose-100 text-rose-800;
  }
  
  /* Progress bars */
  .progress-bar {
    @apply w-full bg-slate-200 rounded-full h-2 overflow-hidden;
  }
  
  .progress-bar-value {
    @apply h-full rounded-full;
  }
  
  .progress-cyan {
    @apply bg-gradient-to-r from-cyan-400 to-teal-500;
  }
  
  /* Navigation */
  .nav-link {
    @apply flex flex-col items-center text-slate-400 hover:text-cyan-600 transition-colors;
  }
  
  .nav-link-active {
    @apply flex flex-col items-center text-cyan-600;
  }
  
  .practice-button {
    @apply absolute -top-10 bg-gradient-to-r from-cyan-500 to-teal-500 rounded-full p-3 shadow-lg z-10;
  }
}

================
File: app/layout.js
================
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: app/page.js
================
// app/page.jsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/navigation";

export default function LandingPage() {
  const router = useRouter();
  const [isScrolled, setIsScrolled] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState(0);
  const languages = ["Japanese", "Korean", "Spanish", "French", "Chinese"];
  const languageEmojis = ["🇯🇵", "🇰🇷", "🇪🇸", "🇫🇷", "🇨🇳"];

  // Handle scroll events for navbar styling
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // Rotate through languages for animation
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentLanguage((prev) => (prev + 1) % languages.length);
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="min-h-screen overflow-x-hidden bg-slate-50">
      {/* Navbar */}
      <nav
        className={`fixed top-4 left-0 right-0 z-50 transition-all duration-300 mx-auto max-w-7xl px-4
    ${
      isScrolled
        ? "bg-white/20 backdrop-blur-xl border border-white/30 rounded-full py-2 shadow-[0_0_30px_rgba(0,0,0,0.15)]"
        : "bg-white/10 backdrop-blur-lg border border-white/20 rounded-full py-3 shadow-[0_0_30px_rgba(0,0,0,0.12)]"
    }`}
      >
        <div className="container mx-auto px-6 flex justify-between items-center">
          <div className="flex items-center">
            <div className="mr-3">
              <RobotLogo />
            </div>
            <span className="text-xl font-bold bg-gradient-to-r from-cyan-600 to-teal-600 text-transparent bg-clip-text">
              ShinoLearn
            </span>
          </div>
          <div className="hidden md:flex space-x-8 text-slate-600">
            <Link
              href="#features"
              className="hover:text-cyan-600 transition-colors"
            >
              Features
            </Link>
            <Link
              href="#how-it-works"
              className="hover:text-cyan-600 transition-colors"
            >
              How It Works
            </Link>
            <Link
              href="#testimonials"
              className="hover:text-cyan-600 transition-colors"
            >
              Testimonials
            </Link>
            <Link
              href="#pricing"
              className="hover:text-cyan-600 transition-colors"
            >
              Pricing
            </Link>
          </div>
          <div className="flex items-center space-x-4">
            <Link
              href="/auth/signin"
              className="text-cyan-600 hover:text-cyan-700 font-medium"
            >
              Log in
            </Link>
            <Link
              href="/auth/signin"
              className="bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-4 py-2 rounded-lg shadow-md transition-all transform hover:translate-y-[-2px]"
            >
              Get Started
            </Link>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="pt-32 pb-20 overflow-hidden relative">
        {/* Background elements */}
        <div className="absolute top-0 left-0 w-full h-full overflow-hidden z-0">
          <div className="absolute top-20 right-[10%] w-64 h-64 bg-cyan-300 rounded-full opacity-20 blur-3xl"></div>
          <div className="absolute bottom-20 left-[5%] w-72 h-72 bg-teal-300 rounded-full opacity-20 blur-3xl"></div>
          <div className="absolute top-40 left-[15%] w-48 h-48 bg-amber-300 rounded-full opacity-20 blur-3xl"></div>
        </div>

        <div className="container mx-auto px-6 relative z-10">
          <div className="flex flex-col lg:flex-row items-center gap-12">
            <div className="lg:w-1/2">
              <div className="inline-block px-3 py-1 bg-gradient-to-r from-cyan-100 to-teal-100 text-cyan-800 text-sm font-medium rounded-full mb-6">
                Learn languages with crypto incentives ⚡
              </div>

              <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-6 leading-tight">
                Master
                <span className="relative inline-block mx-2 px-2">
                  <span className="absolute inset-0 bg-gradient-to-r from-cyan-200 to-teal-200 rounded-lg -rotate-1"></span>
                  <span className="relative">
                    <span className="animate-fade-in-out">
                      {languages[currentLanguage]}
                    </span>
                    <span className="ml-2">
                      {languageEmojis[currentLanguage]}
                    </span>
                  </span>
                </span>
                <br />
                with Real Incentives
              </h1>

              <p className="text-lg text-slate-600 mb-8 md:pr-6">
                ShinoLearn combines AI-powered conversation practice with
                financial incentives. Stake crypto on your language learning
                goals and earn rewards for consistent progress.
              </p>

              <div className="flex flex-col sm:flex-row gap-4">
                <Link
                  href="/auth/signin"
                  className="bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-6 py-3 rounded-lg font-medium shadow-md transition-all transform hover:translate-y-[-2px] text-center"
                >
                  Start Learning Now
                </Link>
                <Link
                  href="#how-it-works"
                  className="bg-white border border-slate-200 hover:bg-slate-50 text-slate-700 px-6 py-3 rounded-lg font-medium shadow-sm transition-colors text-center"
                >
                  Learn More
                </Link>
              </div>

              <div className="mt-8 flex items-center space-x-4">
                <div className="flex -space-x-2">
                  {[...Array(4)].map((_, i) => (
                    <div
                      key={i}
                      className="w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-teal-400 border-2 border-white flex items-center justify-center text-white text-xs font-bold"
                    >
                      {["J", "K", "S", "M"][i]}
                    </div>
                  ))}
                </div>
                <div className="text-sm text-slate-600">
                  <span className="font-medium text-slate-800">2,500+</span>{" "}
                  language learners already joined
                </div>
              </div>
            </div>

            <div className="lg:w-1/2 relative">
              <div className="relative w-full h-[500px]">
                <HeroAnimation />
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Partners Section */}
      {/* <section className="py-8 border-y border-slate-200 bg-white">
        <div className="container mx-auto px-6">
          <p className="text-slate-500 text-center text-sm uppercase font-medium tracking-wider mb-6">
            Trusted by top blockchain and language learning partners
          </p>

          <div className="flex flex-wrap justify-center items-center gap-8 md:gap-16">
            <div className="h-8 grayscale opacity-60 hover:grayscale-0 hover:opacity-100 transition-all duration-300">
              <div className="h-full w-28 bg-slate-300 rounded-md"></div>
            </div>
            <div className="h-8 grayscale opacity-60 hover:grayscale-0 hover:opacity-100 transition-all duration-300">
              <div className="h-full w-28 bg-slate-300 rounded-md"></div>
            </div>
            <div className="h-8 grayscale opacity-60 hover:grayscale-0 hover:opacity-100 transition-all duration-300">
              <div className="h-full w-28 bg-slate-300 rounded-md"></div>
            </div>
            <div className="h-8 grayscale opacity-60 hover:grayscale-0 hover:opacity-100 transition-all duration-300">
              <div className="h-full w-28 bg-slate-300 rounded-md"></div>
            </div>
            <div className="h-8 grayscale opacity-60 hover:grayscale-0 hover:opacity-100 transition-all duration-300">
              <div className="h-full w-28 bg-slate-300 rounded-md"></div>
            </div>
          </div>
        </div>
      </section> */}

      {/* Features Section */}
      <section id="features" className="py-20 bg-white">
        <div className="container mx-auto px-6">
          <div className="text-center max-w-3xl mx-auto mb-16">
            <div className="inline-block px-3 py-1 bg-gradient-to-r from-amber-100 to-orange-100 text-amber-800 text-sm font-medium rounded-full mb-4">
              Key Features
            </div>
            <h2 className="text-3xl md:text-4xl font-bold mb-4">
              Why ShinoLearn is Revolutionary
            </h2>
            <p className="text-slate-600">
              Our platform combines cutting-edge AI with blockchain incentives
              to create a language learning experience unlike any other.
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            <FeatureCard
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z"
                  />
                </svg>
              }
              title="AI Conversation Practice"
              description="Engage in natural conversations with our AI tutors for immersive language practice that adapts to your skill level."
              color="cyan"
            />

            <FeatureCard
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
              }
              title="Crypto Staking Rewards"
              description="Stake cryptocurrency on your learning goals and earn rewards for consistent practice and challenge completion."
              color="amber"
            />

            <FeatureCard
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M13 10V3L4 14h7v7l9-11h-7z"
                  />
                </svg>
              }
              title="Gamified Challenges"
              description="Join language learning challenges with specific goals, track your progress, and compete with others."
              color="teal"
            />

            <FeatureCard
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"
                  />
                </svg>
              }
              title="Personalized Learning Path"
              description="Get a customized learning journey based on your proficiency level, goals, and learning style."
              color="purple"
            />

            <FeatureCard
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"
                  />
                </svg>
              }
              title="Real-time Feedback"
              description="Receive instant feedback on pronunciation, grammar, and vocabulary usage to improve faster."
              color="rose"
            />

            <FeatureCard
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                  />
                </svg>
              }
              title="Community Learning"
              description="Join a community of language learners, participate in group challenges, and learn together."
              color="emerald"
            />
          </div>
        </div>
      </section>

      {/* How It Works Section */}
      <section
        id="how-it-works"
        className="py-20 bg-gradient-to-b from-slate-50 to-white"
      >
        <div className="container mx-auto px-6">
          <div className="text-center max-w-3xl mx-auto mb-16">
            <div className="inline-block px-4 py-1.5 bg-gradient-to-r from-teal-100 to-cyan-100 text-teal-800 text-sm font-medium rounded-full mb-4 shadow-sm">
              Simple Process
            </div>
            <h2 className="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-cyan-600 to-teal-600 bg-clip-text text-transparent">
              How ShinoLearn Works
            </h2>
            <p className="text-slate-600 text-lg">
              Our platform makes language learning effective through financial
              incentives and AI conversation practice.
            </p>
          </div>
          <div className="max-w-4xl mx-auto">
            <div className="relative">
              {/* Centered connecting line */}
              <div className="absolute left-8 top-8 bottom-8 w-1 bg-gradient-to-b from-cyan-500 to-teal-500 hidden md:block"></div>
              <div className="space-y-10">
                <ProcessStep
                  number="1"
                  title="Connect your wallet"
                  description="Sign up with your cryptocurrency wallet to create your account and access the platform features."
                />
                <ProcessStep
                  number="2"
                  title="Choose a language challenge"
                  description="Select a language and proficiency level, then choose a challenge that matches your learning goals."
                />
                <ProcessStep
                  number="3"
                  title="Stake your crypto"
                  description="Commit to your language learning by staking USDC on your selected challenge."
                />
                <ProcessStep
                  number="4"
                  title="Practice with AI tutors"
                  description="Engage in daily conversation practice with our AI tutors to improve your language skills."
                />
                <ProcessStep
                  number="5"
                  title="Track your progress"
                  description="Monitor your learning streak, vocabulary growth, and overall proficiency improvements."
                />
                <ProcessStep
                  number="6"
                  title="Complete challenges & earn rewards"
                  description="Successfully complete challenges to earn back your stake plus additional rewards from generated yield."
                />
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Testimonials Section */}
      <section id="testimonials" className="py-20 bg-white">
        <div className="container mx-auto px-6">
          <div className="text-center max-w-3xl mx-auto mb-16">
            <div className="inline-block px-3 py-1 bg-gradient-to-r from-purple-100 to-violet-100 text-purple-800 text-sm font-medium rounded-full mb-4">
              User Stories
            </div>
            <h2 className="text-3xl md:text-4xl font-bold mb-4">
              What Our Users Say
            </h2>
            <p className="text-slate-600">
              Discover how ShinoLearn has transformed language learning
              journeys.
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            <TestimonialCard
              quote="The financial incentive really kept me committed to daily practice. I've tried many language apps before, but ShinoLearn is the first one I've stuck with for more than a month."
              author="Alex Tanaka"
              title="Learning Japanese"
              avatar="/images/avatar-1.png"
            />

            <TestimonialCard
              quote="Conversation practice with the AI tutor feels remarkably natural. I'm able to practice Spanish in realistic scenarios, which has boosted my confidence when speaking with native speakers."
              author="Maria Rodriguez"
              title="Learning Spanish"
              avatar="/images/avatar-2.png"
            />

            <TestimonialCard
              quote="The challenge system makes language learning feel like a game. I love competing with others and seeing my progress on the leaderboard. Plus, earning rewards is a nice bonus!"
              author="David Kim"
              title="Learning Korean"
              avatar="/images/avatar-3.png"
            />
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section id="pricing" className="py-20 bg-slate-50">
        <div className="container mx-auto px-6">
          <div className="text-center max-w-3xl mx-auto mb-16">
            <div className="inline-block px-3 py-1 bg-gradient-to-r from-cyan-100 to-blue-100 text-cyan-800 text-sm font-medium rounded-full mb-4">
              Flexible Plans
            </div>
            <h2 className="text-3xl md:text-4xl font-bold mb-4">
              Choose Your Learning Plan
            </h2>
            <p className="text-slate-600">
              Select the plan that best fits your language learning goals and
              budget.
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8 max-w-5xl mx-auto">
            <PricingCard
              title="Basic"
              price="Free"
              description="Perfect for casual learners"
              features={[
                "1 language",
                "10 minutes of AI conversation daily",
                "Basic progress tracking",
                "Community access",
              ]}
              cta="Get Started"
              highlighted={false}
            />

            <PricingCard
              title="Premium"
              price="$14.99"
              period="per month"
              description="Ideal for serious language learners"
              features={[
                "3 languages",
                "Unlimited AI conversation",
                "Advanced progress analytics",
                "No-loss staking challenges",
                "Priority support",
              ]}
              cta="Start Free Trial"
              highlighted={true}
            />

            <PricingCard
              title="Enterprise"
              price="Custom"
              description="For teams and organizations"
              features={[
                "Unlimited languages",
                "Custom challenge creation",
                "Team leaderboards",
                "API access",
                "Dedicated account manager",
              ]}
              cta="Contact Us"
              highlighted={false}
            />
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gradient-to-r from-cyan-500 to-teal-500 text-white">
        <div className="container mx-auto px-6">
          <div className="max-w-4xl mx-auto text-center">
            <h2 className="text-3xl md:text-4xl font-bold mb-6">
              Ready to Transform Your Language Learning?
            </h2>
            <p className="text-xl mb-8 text-cyan-50">
              Join thousands of learners who are achieving their language goals
              with ShinoLearn.
            </p>
            <Link
              href="/auth/signin"
              className="inline-block bg-white text-cyan-600 hover:bg-cyan-50 px-8 py-4 rounded-lg font-medium shadow-lg transition-all transform hover:translate-y-[-2px]"
            >
              Start Your Journey Now
            </Link>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-slate-900 text-slate-300 py-12">
        <div className="container mx-auto px-6">
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8">
            <div className="col-span-2 lg:col-span-2">
              <div className="flex items-center mb-4">
                <div className="mr-3">
                  <RobotLogo dark={true} />
                </div>
                <span className="text-xl font-bold text-white">ShinoLearn</span>
              </div>
              <p className="mb-4 text-slate-400">
                Revolutionizing language learning with AI and blockchain
                technology. Practice conversations and earn rewards.
              </p>
              <div className="flex space-x-4">
                <a
                  href="#"
                  className="text-slate-400 hover:text-white transition-colors"
                >
                  <svg
                    className="h-6 w-6"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"></path>
                  </svg>
                </a>
                <a
                  href="#"
                  className="text-slate-400 hover:text-white transition-colors"
                >
                  <svg
                    className="h-6 w-6"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      fillRule="evenodd"
                      d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z"
                      clipRule="evenodd"
                    ></path>
                  </svg>
                </a>
                <a
                  href="#"
                  className="text-slate-400 hover:text-white transition-colors"
                >
                  <svg
                    className="h-6 w-6"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
                  </svg>
                </a>
                <a
                  href="#"
                  className="text-slate-400 hover:text-white transition-colors"
                >
                  <svg
                    className="h-6 w-6"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"></path>
                  </svg>
                </a>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-white mb-4">Product</h3>
              <ul className="space-y-3">
                <li>
                  <a
                    href="#features"
                    className="hover:text-white transition-colors"
                  >
                    Features
                  </a>
                </li>
                <li>
                  <a
                    href="#how-it-works"
                    className="hover:text-white transition-colors"
                  >
                    How It Works
                  </a>
                </li>
                <li>
                  <a
                    href="#pricing"
                    className="hover:text-white transition-colors"
                  >
                    Pricing
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    Roadmap
                  </a>
                </li>
              </ul>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-white mb-4">
                Resources
              </h3>
              <ul className="space-y-3">
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    Documentation
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    Blog
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    Community
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    Support
                  </a>
                </li>
              </ul>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-white mb-4">Company</h3>
              <ul className="space-y-3">
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    About Us
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    Careers
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    Privacy Policy
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-white transition-colors">
                    Terms of Service
                  </a>
                </li>
              </ul>
            </div>
          </div>

          <div className="mt-12 pt-8 border-t border-slate-800 text-center text-slate-400">
            <p>
              &copy; {new Date().getFullYear()} ShinoLearn. All rights reserved.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

// Robot Logo Component
function RobotLogo({ dark = false }) {
  return (
    <div className="w-10 h-10 relative">
      <div
        className={`relative ${dark ? "bg-gradient-to-br from-cyan-500 to-teal-600" : "bg-gradient-to-br from-cyan-400 to-teal-500"} rounded-xl w-full h-full flex items-center justify-center overflow-hidden border-2 ${dark ? "border-teal-400" : "border-cyan-300"} shadow-md`}
      >
        {/* Eyes */}
        <div className="flex space-x-1">
          <div className="bg-yellow-300 rounded-full w-[20%] h-[20%] flex items-center justify-center border border-yellow-400">
            <div className="bg-black rounded-full w-[50%] h-[50%]"></div>
          </div>
          <div className="bg-yellow-300 rounded-full w-[20%] h-[20%] flex items-center justify-center border border-yellow-400">
            <div className="bg-black rounded-full w-[50%] h-[50%]"></div>
          </div>
        </div>

        {/* Antenna */}
        <div className="absolute -top-1 left-1/2 transform -translate-x-1/2">
          <div className="w-[2px] h-[5px] bg-slate-600"></div>
          <div className="w-[4px] h-[4px] rounded-full bg-red-500 animate-pulse"></div>
        </div>

        {/* Mouth */}
        <div className="absolute bottom-[15%] w-[40%] h-[2px] bg-slate-700 rounded-full"></div>
      </div>
    </div>
  );
}

// Hero Animation Component
function HeroAnimation() {
  return (
    <div className="relative w-full h-full">
      {/* Main image */}
      <div className="absolute w-[80%] h-[80%] top-[10%] left-[10%] rounded-2xl bg-white shadow-xl overflow-hidden border border-slate-200">
        <div className="p-6">
          {/* Robot Avatar and chat interface mockup */}
          <div className="flex">
            <div className="mr-4 flex-shrink-0">
              <div className="w-16 h-16 bg-gradient-to-br from-cyan-400 to-teal-500 rounded-2xl flex items-center justify-center border-2 border-cyan-300 shadow-md">
                <div className="flex space-x-1">
                  <div className="bg-yellow-300 rounded-full w-3 h-3"></div>
                  <div className="bg-yellow-300 rounded-full w-3 h-3"></div>
                </div>
              </div>
            </div>
            <div className="bg-slate-100 rounded-2xl p-4 rounded-tl-none max-w-[70%]">
              <p className="text-slate-800">
                こんにちは！レストランでの注文の練習をしましょう。何か飲み物を注文してみてください。
              </p>
              <p className="text-xs text-slate-500 mt-2">
                Hello! Let&apos;s practice ordering at a restaurant. Try
                ordering a drink.
              </p>
            </div>
          </div>

          {/* User response mockup */}
          <div className="flex justify-end mt-4">
            <div className="bg-cyan-100 rounded-2xl p-4 rounded-tr-none max-w-[70%]">
              <p className="text-slate-800">コーヒーをお願いします。</p>
              <div className="flex justify-between items-center mt-2">
                <p className="text-xs text-slate-500">
                  I would like a coffee, please.
                </p>
                <div className="text-xs text-green-600 font-medium flex items-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-4 w-4 mr-1"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                      clipRule="evenodd"
                    />
                  </svg>
                  Correct
                </div>
              </div>
            </div>
          </div>

          {/* Progress display mockup */}
          <div className="mt-8">
            <div className="flex justify-between text-sm text-slate-600 mb-2">
              <p>Daily Goal: 15/20 minutes</p>
              <p>75% Complete</p>
            </div>
            <div className="w-full bg-slate-200 rounded-full h-2">
              <div className="bg-gradient-to-r from-cyan-400 to-teal-500 h-2 rounded-full w-[75%]"></div>
            </div>
          </div>

          {/* Stats mockup */}
          <div className="mt-8 grid grid-cols-3 gap-4">
            <div className="bg-slate-50 rounded-lg p-3 border border-slate-200">
              <p className="text-xs text-slate-500">Current Streak</p>
              <p className="text-lg font-bold text-slate-800">12 days</p>
            </div>
            <div className="bg-slate-50 rounded-lg p-3 border border-slate-200">
              <p className="text-xs text-slate-500">Vocab Learned</p>
              <p className="text-lg font-bold text-slate-800">728 words</p>
            </div>
            <div className="bg-slate-50 rounded-lg p-3 border border-slate-200">
              <p className="text-xs text-slate-500">USDC Staked</p>
              <p className="text-lg font-bold text-slate-800">$200</p>
            </div>
          </div>
        </div>
      </div>

      {/* Decorative elements */}
      <div className="absolute top-[5%] right-[5%] w-28 h-28 rounded-full bg-amber-100 animate-float-slow"></div>
      <div className="absolute bottom-[15%] left-[0%] w-20 h-20 rounded-full bg-cyan-100 animate-float"></div>

      {/* Stats Cards Floating */}
      <div className="absolute top-[15%] right-[-5%] bg-white rounded-lg shadow-lg p-4 border border-slate-100 animate-float">
        <div className="flex items-center">
          <div className="mr-3 p-2 bg-amber-100 rounded-full">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-amber-600"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <div>
            <p className="text-sm text-slate-500">Current Streak</p>
            <p className="text-lg font-bold text-slate-800">12 days</p>
          </div>
        </div>
      </div>

      <div className="absolute bottom-[10%] right-[10%] bg-white rounded-lg shadow-lg p-4 border border-slate-100 animate-float delay-150">
        <div className="flex items-center">
          <div className="mr-3 p-2 bg-teal-100 rounded-full">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-teal-600"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z" />
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z"
                clipRule="evenodd"
              />
            </svg>
          </div>
          <div>
            <p className="text-sm text-slate-500">Potential Reward</p>
            <p className="text-lg font-bold text-slate-800">$220 USDC</p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Feature Card Component
function FeatureCard({ icon, title, description, color }) {
  const colors = {
    cyan: "from-cyan-50 to-cyan-100 border-cyan-200 text-cyan-600",
    teal: "from-teal-50 to-teal-100 border-teal-200 text-teal-600",
    amber: "from-amber-50 to-amber-100 border-amber-200 text-amber-600",
    purple: "from-purple-50 to-purple-100 border-purple-200 text-purple-600",
    rose: "from-rose-50 to-rose-100 border-rose-200 text-rose-600",
    emerald:
      "from-emerald-50 to-emerald-100 border-emerald-200 text-emerald-600",
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-slate-100 overflow-hidden hover:shadow-md transition-shadow">
      <div
        className={`p-6 border-b border-slate-100 bg-gradient-to-r ${colors[color]}`}
      >
        <div className="w-12 h-12 rounded-full bg-white flex items-center justify-center shadow-sm mb-4">
          <div className={`text-${color}-600`}>{icon}</div>
        </div>
        <h3 className="text-xl font-bold text-slate-800 mb-2">{title}</h3>
        <p className="text-slate-600">{description}</p>
      </div>
      <div className="p-6 bg-white">
        <Link
          href="#"
          className={`text-${color}-600 hover:text-${color}-700 font-medium flex items-center`}
        >
          Learn more
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-4 w-4 ml-1"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
              clipRule="evenodd"
            />
          </svg>
        </Link>
      </div>
    </div>
  );
}

// Process Step Component
function ProcessStep({ number, title, description }) {
  return (
    <div className="flex items-start group">
      <div className="flex-shrink-0 w-16 h-16 rounded-full bg-gradient-to-r from-cyan-500 to-teal-500 text-white flex items-center justify-center font-bold text-xl z-10 shadow-lg group-hover:scale-110 transition-transform duration-300">
        {number}
      </div>
      <div className="ml-6 bg-white p-6 rounded-xl shadow-sm border border-gray-100 flex-1 transform transition-all duration-300 group-hover:translate-x-2">
        <h3 className="text-xl font-bold text-slate-800 mb-2">{title}</h3>
        <p className="text-slate-600">{description}</p>
      </div>
    </div>
  );
}
// Testimonial Card Component
function TestimonialCard({ quote, author, title, avatar }) {
  return (
    <div className="rounded-xl p-[1px] bg-gradient-to-br from-cyan-400 to-teal-400 h-full">
      <div className="bg-white rounded-xl p-6 hover:bg-gradient-to-br hover:from-cyan-50 hover:to-teal-50 transition-all duration-300 h-full flex flex-col">
        <div className="flex-1">
          <svg
            className="h-8 w-8 text-cyan-400 mb-4"
            fill="currentColor"
            viewBox="0 0 32 32"
          >
            <path d="M9.352 4C4.456 7.456 1 13.12 1 19.36c0 5.088 3.072 8.064 6.624 8.064 3.36 0 5.856-2.688 5.856-5.856 0-3.168-2.208-5.472-5.088-5.472-.576 0-1.344.096-1.536.192.48-3.264 3.552-7.104 6.624-9.024L9.352 4zm16.512 0c-4.8 3.456-8.256 9.12-8.256 15.36 0 5.088 3.072 8.064 6.624 8.064 3.264 0 5.856-2.688 5.856-5.856 0-3.168-2.304-5.472-5.184-5.472-.576 0-1.248.096-1.44.192.48-3.264 3.456-7.104 6.528-9.024L25.864 4z" />
          </svg>
          <p className="text-slate-600 italic mb-4">{quote}</p>
        </div>
        <div className="flex items-center mt-4 border-t border-slate-100 pt-4">
          <div className="mr-3">
            {avatar ? (
              <div className="p-[2px] bg-gradient-to-r from-cyan-500 to-teal-500 rounded-full">
                <Image
                  src={avatar}
                  alt={author}
                  width={40}
                  height={40}
                  className="rounded-full"
                />
              </div>
            ) : (
              <div className="w-10 h-10 rounded-full bg-gradient-to-r from-cyan-500 to-teal-500 flex items-center justify-center text-white font-medium">
                {author.charAt(0)}
              </div>
            )}
          </div>
          <div>
            <h4 className="font-medium text-slate-800">{author}</h4>
            <p className="text-sm text-cyan-600">{title}</p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Pricing Card Component
function PricingCard({
  title,
  price,
  period,
  description,
  features,
  cta,
  highlighted,
}) {
  return (
    <div
      className={`rounded-xl overflow-hidden ${
        highlighted
          ? "bg-white border-2 border-cyan-500 shadow-lg relative transform -translate-y-4"
          : "bg-white border border-slate-100 shadow-sm"
      }`}
    >
      {highlighted && (
        <div className="bg-gradient-to-r from-cyan-500 to-teal-500 text-white text-center py-1 text-sm font-medium">
          Most Popular
        </div>
      )}

      <div className="p-6">
        <h3 className="text-xl font-bold text-slate-800 mb-2">{title}</h3>
        <div className="mb-4">
          <span className="text-3xl font-bold text-slate-800">{price}</span>
          {period && (
            <span className="text-slate-500 text-sm ml-1">{period}</span>
          )}
        </div>
        <p className="text-slate-600 mb-6">{description}</p>

        <ul className="space-y-3 mb-6">
          {features.map((feature, index) => (
            <li key={index} className="flex items-start">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                  clipRule="evenodd"
                />
              </svg>
              <span className="text-slate-600">{feature}</span>
            </li>
          ))}
        </ul>

        <Link
          href="/auth/signin"
          className={`block text-center py-3 px-6 rounded-lg font-medium transition-colors ${
            highlighted
              ? "bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white shadow-md"
              : "bg-white border border-slate-200 hover:bg-slate-50 text-slate-800"
          }`}
        >
          {cta}
        </Link>
      </div>
    </div>
  );
}

// Add this style to your globals.css
const additionalGlobalStyles = `
  @keyframes fade-in-out {
    0%, 100% { opacity: 0; }
    20%, 80% { opacity: 1; }
  }
  
  .animate-fade-in-out {
    animation: fade-in-out 2s ease-in-out infinite;
  }
  
  @keyframes float-slow {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
  }
  
  .animate-float-slow {
    animation: float-slow 6s ease-in-out infinite;
  }
  
  .delay-150 {
    animation-delay: 150ms;
  }
`;

================
File: components/auth/LogoutButton.jsx
================
'use client';

import { useRouter } from 'next/navigation';

export default function LogoutButton({ className }) {
  const router = useRouter();
  
  const handleLogout = async () => {
    try {
      // Call the logout API endpoint
      const response = await fetch('/api/auth/logout', {
        method: 'POST',
      });
      
      if (response.ok) {
        // Redirect to home page after successful logout
        router.push('/');
      } else {
        console.error('Logout failed');
      }
    } catch (error) {
      console.error('Error during logout:', error);
    }
  };
  
  return (
    <button
      onClick={handleLogout}
      className={className || "text-gray-700 hover:text-gray-900"}
    >
      Sign Out
    </button>
  );
}

================
File: components/auth/UserProfileForm.jsx
================
// components/auth/UserProfileForm.jsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

const LANGUAGES = [
  { code: "en", name: "English" },
  { code: "es", name: "Spanish" },
  { code: "fr", name: "French" },
  { code: "de", name: "German" },
  { code: "it", name: "Italian" },
  { code: "ja", name: "Japanese" },
  { code: "ko", name: "Korean" },
  { code: "zh", name: "Chinese" },
  { code: "ru", name: "Russian" },
  { code: "pt", name: "Portuguese" },
  { code: "ar", name: "Arabic" },
  { code: "hi", name: "Hindi" },
];

export default function UserProfileForm({ walletAddress, onSuccess, onError }) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const [formData, setFormData] = useState({
    username: "",
    email: "",
    nativeLanguage: "",
    learningLanguages: [{ languageCode: "", proficiencyLevel: "BEGINNER" }],
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleLearningLanguageChange = (index, field, value) => {
    setFormData((prev) => {
      const newLearningLanguages = [...prev.learningLanguages];
      newLearningLanguages[index] = {
        ...newLearningLanguages[index],
        [field]: value,
      };
      return { ...prev, learningLanguages: newLearningLanguages };
    });
  };

  const addLearningLanguage = () => {
    setFormData((prev) => ({
      ...prev,
      learningLanguages: [
        ...prev.learningLanguages,
        { languageCode: "", proficiencyLevel: "BEGINNER" },
      ],
    }));
  };

  const removeLearningLanguage = (index) => {
    setFormData((prev) => {
      const newLearningLanguages = [...prev.learningLanguages];
      newLearningLanguages.splice(index, 1);
      return { ...prev, learningLanguages: newLearningLanguages };
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validate form
    if (!formData.username || !formData.email || !formData.nativeLanguage) {
      onError("Please fill in all required fields");
      return;
    }

    if (formData.learningLanguages.some((lang) => !lang.languageCode)) {
      onError("Please select all learning languages");
      return;
    }

    try {
      setIsSubmitting(true);

      const response = await fetch("/api/users/profile", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to update profile");
      }

      // Profile update successful
      onSuccess();
      router.push("/dashboard");
    } catch (error) {
      console.error("Profile update error:", error);
      onError(error.message || "Failed to update profile");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 max-w-md mx-auto">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Wallet Address
        </label>
        <input
          type="text"
          value={walletAddress}
          disabled
          className="w-full px-4 py-2 border border-gray-300 rounded-md bg-gray-100"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Username*
        </label>
        <input
          type="text"
          name="username"
          value={formData.username}
          onChange={handleChange}
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-transparent"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Email*
        </label>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-transparent"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Native Language*
        </label>
        <select
          name="nativeLanguage"
          value={formData.nativeLanguage}
          onChange={handleChange}
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-transparent"
        >
          <option value="">Select your native language</option>
          {LANGUAGES.map((language) => (
            <option key={language.code} value={language.code}>
              {language.name}
            </option>
          ))}
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Languages You Want to Learn*
        </label>

        {formData.learningLanguages.map((lang, index) => (
          <div key={index} className="flex gap-2 mb-2">
            <select
              value={lang.languageCode}
              onChange={(e) =>
                handleLearningLanguageChange(
                  index,
                  "languageCode",
                  e.target.value
                )
              }
              required
              className="w-1/2 px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="">Select language</option>
              {LANGUAGES.filter(
                (language) => language.code !== formData.nativeLanguage
              ).map((language) => (
                <option key={language.code} value={language.code}>
                  {language.name}
                </option>
              ))}
            </select>

            <select
              value={lang.proficiencyLevel}
              onChange={(e) =>
                handleLearningLanguageChange(
                  index,
                  "proficiencyLevel",
                  e.target.value
                )
              }
              className="w-1/2 px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="BEGINNER">Beginner</option>
              <option value="ELEMENTARY">Elementary</option>
              <option value="INTERMEDIATE">Intermediate</option>
              <option value="ADVANCED">Advanced</option>
              <option value="FLUENT">Fluent</option>
            </select>

            {index > 0 && (
              <button
                type="button"
                onClick={() => removeLearningLanguage(index)}
                className="cursor-pointer px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600"
              >
                ×
              </button>
            )}
          </div>
        ))}

        <button
          type="button"
          onClick={addLearningLanguage}
          className="cursor-pointer mt-2 px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
        >
          Add Another Language
        </button>
      </div>

      <div className="pt-4">
        <button
          type="submit"
          disabled={isSubmitting}
          className="cursor-pointer mt-4 md:mt-0 bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white px-6 py-3 rounded-lg font-medium shadow-md transition-all"
        >
          {isSubmitting ? "Saving..." : "Complete Profile"}
        </button>
      </div>
    </form>
  );
}

================
File: components/auth/WalletConnectButton.jsx
================
// components/auth/WalletConnectButton.jsx
"use client";

import { useState, useEffect } from "react";
import { getWalletAddress, signMessage } from "@/lib/web3/providers";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";

export default function WalletConnectButton({ onSuccess, onError }) {
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState("idle"); // 'idle', 'connecting', 'signing', 'verifying'

  // Reset connection if network changes
  useEffect(() => {
    if (typeof window !== "undefined" && window.ethereum) {
      const handleNetworkChange = () => {
        // Reset connection status if network changes during connection
        if (connectionStatus !== "idle") {
          setConnectionStatus("idle");
          setIsConnecting(false);
          onError("Network changed. Please try connecting again.");
        }
      };

      window.ethereum.on("chainChanged", handleNetworkChange);
      window.ethereum.on("accountsChanged", handleNetworkChange);

      return () => {
        window.ethereum.removeListener("chainChanged", handleNetworkChange);
        window.ethereum.removeListener("accountsChanged", handleNetworkChange);
      };
    }
  }, [connectionStatus, onError]);

  const handleConnect = async () => {
    try {
      setIsConnecting(true);
      setConnectionStatus("connecting");

      // 1. Get wallet address
      const walletAddress = await getWalletAddress();
      setConnectionStatus("signing");

      // 2. Get nonce and message to sign
      const nonceResponse = await fetch(
        `/api/auth/wallet?address=${walletAddress}`
      );
      if (!nonceResponse.ok) {
        const errorData = await nonceResponse.json();
        throw new Error(
          errorData.error || "Failed to get authentication nonce"
        );
      }

      const { message } = await nonceResponse.json();

      // 3. Sign the message
      const signature = await signMessage(message);
      setConnectionStatus("verifying");

      // 4. Verify signature and authenticate
      const authResponse = await fetch("/api/auth/wallet", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ walletAddress, signature }),
      });

      const authData = await authResponse.json();

      if (!authResponse.ok) {
        throw new Error(authData.error || "Authentication failed");
      }

      // 5. Call onSuccess with data
      onSuccess({
        walletAddress,
        isNewUser: authData.user.isNewUser,
      });
    } catch (error) {
      console.error("Wallet connection error:", error);

      // Provide more helpful error messages based on error type
      if (error.code === 4001) {
        onError(
          "You rejected the connection request. Please approve the connection in your wallet."
        );
      } else if (error.message.includes("already pending")) {
        onError(
          "A wallet connection request is already pending. Please check your wallet."
        );
      } else if (error.message.includes("network")) {
        onError(
          "Network error. Please check your internet connection and try again."
        );
      } else {
        onError(error.message || "Failed to connect wallet");
      }
    } finally {
      setIsConnecting(false);
      setConnectionStatus("idle");
    }
  };

  const getButtonText = () => {
    switch (connectionStatus) {
      case "connecting":
        return "Connecting...";
      case "signing":
        return "Please sign message...";
      case "verifying":
        return "Verifying signature...";
      default:
        return "Connect Wallet";
    }
  };

  return (
    <button
      onClick={handleConnect}
      disabled={isConnecting}
      className="flex items-center justify-center bg-gradient-to-r from-cyan-500 to-teal-500 text-white py-3 px-6 rounded-lg font-medium hover:from-cyan-600 hover:to-teal-600 transition-colors disabled:opacity-70 cursor-pointer"
    >
      {isConnecting && (
        <LoadingSpinner size="small" color="white" className="mr-2" />
      )}
      {getButtonText()}
    </button>
  );
}

================
File: components/challenge/CreateChallengeForm.jsx
================
// components/challenge/CreateChallengeForm.jsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { useContract } from "@/lib/web3/hooks/useContract";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
import ErrorMessage from "@/components/ui/ErrorMessage";
import TransactionStatus from "@/components/ui/TransactionStatus";
import { ethers } from "ethers";
import { nanoid } from "nanoid";

// List of available languages
const LANGUAGES = [
  { code: "ja", name: "Japanese" },
  { code: "ko", name: "Korean" },
  { code: "zh", name: "Chinese" },
  { code: "en", name: "English" },
  { code: "es", name: "Spanish" },
  { code: "fr", name: "French" },
  { code: "de", name: "German" },
  { code: "it", name: "Italian" },
  { code: "ru", name: "Russian" },
  { code: "pt", name: "Portuguese" },
  { code: "ar", name: "Arabic" },
  { code: "hi", name: "Hindi" },
];

// Proficiency level options
const PROFICIENCY_LEVELS = [
  { value: "BEGINNER", label: "Beginner" },
  { value: "ELEMENTARY", label: "Elementary" },
  { value: "INTERMEDIATE", label: "Intermediate" },
  { value: "ADVANCED", label: "Advanced" },
  { value: "FLUENT", label: "Fluent" },
];

export default function CreateChallengeForm() {
  const router = useRouter();
  const {
    isConnected,
    stakingContract,
    usdcContract,
    connectWallet,
    isLoading: isContractLoading,
    checkNetwork,
    switchToLocalNetwork,
    networkName,
    chainId,
    signer,
  } = useContract();

  const [formData, setFormData] = useState({
    title: "",
    description: "",
    languageCode: "",
    proficiencyLevel: "BEGINNER",
    durationDays: 1,
    dailyRequirement: 20,
    stakeAmount: 100,
    yieldPercentage: 5,
    isHardcore: false,
    maxParticipants: 10,
    inviteCode: "",
    autoJoin: false,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [transaction, setTransaction] = useState(null);
  const [step, setStep] = useState("form"); // form, submitting, success
  const [submissionProgress, setSubmissionProgress] = useState(null);
  const [isCorrectNetwork, setIsCorrectNetwork] = useState(false);

  // Check if on correct network
  useEffect(() => {
    const verifyNetwork = async () => {
      if (isConnected) {
        const onCorrectNetwork = await checkNetwork();
        setIsCorrectNetwork(onCorrectNetwork);
      }
    };

    verifyNetwork();
  }, [isConnected, checkNetwork, chainId]);

  // Validate form is completely filled
  const isFormValid = () => {
    const requiredFields = [
      "title",
      "languageCode",
      "proficiencyLevel",
      "durationDays",
      "dailyRequirement",
      "stakeAmount",
    ];

    const isValid = requiredFields.every((field) => {
      const value = formData[field];
      return value !== undefined && value !== null && value !== "";
    });

    const hasValidNumbers =
      parseInt(formData.durationDays) >= 1 &&
      parseInt(formData.dailyRequirement) >= 5 &&
      parseFloat(formData.stakeAmount) >= 10;

    return isValid && hasValidNumbers;
  };

  // Estimate daily commitment
  const getDailyCommitmentLevel = () => {
    const mins = parseInt(formData.dailyRequirement);
    if (mins <= 10) return { level: "Easy", color: "text-green-500" };
    if (mins <= 20) return { level: "Moderate", color: "text-amber-500" };
    if (mins <= 40) return { level: "Challenging", color: "text-orange-500" };
    return { level: "Intense", color: "text-red-500" };
  };

  // Calculate potential reward
  const calculatePotentialReward = () => {
    const stake = parseFloat(formData.stakeAmount);
    const yield_pct = parseFloat(formData.yieldPercentage);

    if (isNaN(stake) || isNaN(yield_pct)) return 0;

    return stake * (1 + yield_pct / 100);
  };

  // Handle form input changes
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  // Function to approve USDC spending
  const approveUSDC = async (amount) => {
    try {
      setSubmissionProgress({
        step: "approving",
        message: "Approving USDC spending...",
      });

      // Check if already approved
      const userAddress = await signer.getAddress();
      const allowance = await usdcContract.allowance(
        userAddress,
        stakingContract.target
      );
      const amountInWei = ethers.parseUnits(amount.toString(), 6); // USDC has 6 decimals

      if (allowance >= amountInWei) {
        console.log("USDC already approved");
        return true;
      }

      // Approve USDC spending
      const approveTx = await usdcContract.approve(
        stakingContract.target,
        amountInWei
      );

      setSubmissionProgress({
        step: "approvingConfirmation",
        message: "Waiting for approval confirmation...",
        txHash: approveTx.hash,
      });

      // Wait for confirmation
      const approveReceipt = await approveTx.wait();

      if (!approveReceipt.status) {
        throw new Error("USDC approval transaction failed");
      }

      return true;
    } catch (error) {
      console.error("Error approving USDC:", error);
      throw new Error(`Failed to approve USDC: ${error.message}`);
    }
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!isFormValid()) {
      setError("Please fill out all required fields");
      return;
    }

    if (!isConnected) {
      try {
        await connectWallet();
      } catch (connError) {
        setError("Please connect your wallet to create a challenge");
        return;
      }
    }

    if (!isCorrectNetwork) {
      try {
        const switched = await switchToLocalNetwork();
        if (!switched) {
          setError("Please switch to Localhost network to create a challenge");
          return;
        }
      } catch (networkError) {
        setError(
          "Failed to switch to Localhost network. Please switch manually in your wallet."
        );
        return;
      }
    }

    setError(null);
    setIsSubmitting(true);
    setStep("submitting");

    try {
      let transactionHash = null;
      let contractAddress = null;

      // Register on blockchain if connected
      if (isConnected && stakingContract) {
        try {
          // Show detailed progress to user
          setSubmissionProgress({
            step: "preparing",
            message: "Preparing contract transaction...",
          });

          // Convert values for contract
          const stakeAmount = Math.round(
            parseFloat(formData.stakeAmount) * 100
          ); // Convert to cents
          const yieldBps = Math.round(
            parseFloat(formData.yieldPercentage) * 100
          ); // Convert to basis points

          // Create a unique challenge ID - use timestamp + random string
          const challengeId = `${Date.now()}-${nanoid(8)}`;

          // First approve USDC if necessary
          await approveUSDC(formData.stakeAmount);

          setSubmissionProgress({
            step: "confirming",
            message: "Please confirm the transaction in your wallet...",
          });

          // Call the contract function
          const tx = await stakingContract.registerChallenge(
            challengeId,
            ethers.parseUnits(formData.stakeAmount.toString(), 6), // Convert to USDC units (6 decimals)
            yieldBps,
            formData.isHardcore,
            parseInt(formData.durationDays),
            { gasLimit: 500000 }
          );

          setSubmissionProgress({
            step: "mining",
            message: "Transaction submitted! Waiting for confirmation...",
            txHash: tx.hash,
          });

          // Wait for transaction confirmation
          const receipt = await tx.wait();

          if (receipt.status) {
            transactionHash = receipt.hash;
            contractAddress = stakingContract.target;

            setSubmissionProgress({
              step: "confirmed",
              message: "Transaction confirmed! Creating challenge...",
              txHash: receipt.hash,
            });
          } else {
            throw new Error("Transaction failed");
          }
        } catch (contractError) {
          console.error(
            "Error registering challenge on blockchain:",
            contractError
          );

          // Provide more specific error message
          if (contractError.code === 4001) {
            throw new Error(
              "Transaction rejected. Please approve the transaction in your wallet."
            );
          } else if (contractError.message.includes("gas")) {
            throw new Error(
              "Transaction failed: Gas estimation error. Please try again with different parameters."
            );
          } else {
            throw new Error(`Blockchain error: ${contractError.message}`);
          }
        }
      } else {
        // Development mode: create without blockchain
        console.warn(
          "Creating challenge without blockchain integration - development mode"
        );
        transactionHash = "0x" + Array(64).fill("0").join("");
        contractAddress =
          process.env.NEXT_PUBLIC_STAKING_CONTRACT_ADDRESS ||
          "0x0000000000000000000000000000000000000000";
      }

      // Create challenge in database
      const challengeData = {
        ...formData,
        transactionHash,
        contractAddress,
        contractChain: "localhost", // Changed from 'polygon' to 'localhost'
      };

      const response = await fetch("/api/challenges/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(challengeData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to create challenge");
      }

      const data = await response.json();

      // Store transaction information
      if (transactionHash) {
        setTransaction({
          hash: transactionHash,
          status: "success",
        });
      }

      setSuccess(true);
      setStep("success");

      // Redirect after a short delay
      setTimeout(() => {
        router.push(`/dashboard/challenges/${data.id}`);
      }, 3000);
    } catch (error) {
      console.error("Error creating challenge:", error);
      setError(error.message || "Failed to create challenge");
      setStep("form");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Render network warning if needed
  const renderNetworkWarning = () => {
    if (isConnected && !isCorrectNetwork) {
      return (
        <div className="bg-amber-50 border border-amber-200 rounded-md p-4 text-amber-800 mb-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg
                className="h-5 w-5 text-amber-400"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium">Wrong Network Detected</h3>
              <p className="text-sm mt-1">
                You are currently on {networkName || "an unsupported network"}.
                Please switch to Localhost network to create challenges.
              </p>
              <button
                onClick={switchToLocalNetwork}
                className="cursor-pointer mt-2 px-3 py-1 text-sm bg-amber-100 text-amber-800 rounded-md hover:bg-amber-200"
              >
                Switch to Localhost
              </button>
            </div>
          </div>
        </div>
      );
    }
    return null;
  };

  // Render the form step
  const renderForm = () => (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && <ErrorMessage message={error} dismiss={() => setError(null)} />}

      {renderNetworkWarning()}

      <div className="bg-white shadow-md rounded-lg overflow-hidden border border-gray-100">
        <div className="px-6 py-4 border-b border-gray-100 bg-gradient-to-r from-cyan-50 to-white">
          <h2 className="text-xl font-semibold text-gray-900 flex items-center">
            <span className="inline-block w-1 h-6 bg-cyan-500 rounded mr-3"></span>
            Challenge Details
          </h2>
        </div>

        <div className="p-6 space-y-6 bg-white">
          {/* Title */}
          <div>
            <label
              htmlFor="title"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Challenge Title<span className="text-cyan-600">*</span>
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border border-gray-200 py-2.5 px-4 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 transition-all"
              placeholder="e.g., '30-Day Japanese Speaking Challenge'"
              required
            />
          </div>

          {/* Description */}
          <div>
            <label
              htmlFor="description"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Description
            </label>
            <textarea
              id="description"
              name="description"
              rows={4}
              value={formData.description}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border border-gray-200 py-2.5 px-4 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 transition-all"
              placeholder="Describe your challenge and what participants will achieve..."
            />
          </div>

          {/* Language and Proficiency */}
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label
                htmlFor="languageCode"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Language<span className="text-cyan-600">*</span>
              </label>
              <select
                id="languageCode"
                name="languageCode"
                value={formData.languageCode}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border border-gray-200 py-2.5 px-4 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 bg-white transition-all"
                required
              >
                <option value="">Select a language</option>
                {LANGUAGES.map((lang) => (
                  <option key={lang.code} value={lang.code}>
                    {lang.name}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label
                htmlFor="proficiencyLevel"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Proficiency Level<span className="text-cyan-600">*</span>
              </label>
              <select
                id="proficiencyLevel"
                name="proficiencyLevel"
                value={formData.proficiencyLevel}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border border-gray-200 py-2.5 px-4 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 bg-white transition-all"
                required
              >
                {PROFICIENCY_LEVELS.map((level) => (
                  <option key={level.value} value={level.value}>
                    {level.label}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Challenge Parameters */}
      <div className="bg-white shadow-sm rounded-lg overflow-hidden border border-gray-200">
        <div className="px-6 py-5 border-b border-gray-100 bg-gradient-to-r from-cyan-50 to-white">
          <h2 className="text-xl font-semibold text-gray-900 flex items-center">
            <span className="inline-block w-1 h-6 bg-cyan-500 rounded mr-3"></span>
            Challenge Parameters
          </h2>
        </div>

        <div className="p-6 space-y-6">
          {/* Duration and Daily Requirement */}
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label
                htmlFor="durationDays"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Duration (days)<span className="text-cyan-600">*</span>
              </label>
              <div className="relative">
                <input
                  type="number"
                  id="durationDays"
                  name="durationDays"
                  min="0"
                  max="365"
                  value={formData.durationDays}
                  onChange={handleChange}
                  className="mt-1 block w-full rounded-md border border-gray-200 py-2.5 pr-14 px-4 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 transition-all"
                  required
                />
                <div className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none text-gray-400">
                  days
                </div>
              </div>
              <p className="mt-2 text-sm text-gray-500 flex items-center">
                <span className="inline-block w-1 h-1 bg-teal-400 rounded-full mr-2"></span>
                We recommend 30-90 days for optimal results
              </p>
            </div>

            <div>
              <label
                htmlFor="dailyRequirement"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Daily Practice (minutes)<span className="text-cyan-600">*</span>
              </label>
              <div className="relative">
                <input
                  type="number"
                  id="dailyRequirement"
                  name="dailyRequirement"
                  min="5"
                  max="120"
                  value={formData.dailyRequirement}
                  onChange={handleChange}
                  className="mt-1 block w-full rounded-md border border-gray-200 py-2.5 pr-14 px-4 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 transition-all"
                  required
                />
                <div className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none text-gray-400">
                  min
                </div>
              </div>
              <p className="mt-2 text-sm text-gray-500 flex items-center">
                Commitment level:{" "}
                <span
                  className={`ml-1 font-medium ${getDailyCommitmentLevel().color}`}
                >
                  {getDailyCommitmentLevel().level}
                </span>
              </p>
            </div>
          </div>

          {/* Stake Amount and Yield */}
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label
                htmlFor="stakeAmount"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Stake Amount (USDC)<span className="text-cyan-600">*</span>
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span className="text-gray-500 sm:text-sm font-medium">
                    $
                  </span>
                </div>
                <input
                  type="number"
                  id="stakeAmount"
                  name="stakeAmount"
                  min="10"
                  max="1000"
                  value={formData.stakeAmount}
                  onChange={handleChange}
                  className="block w-full pl-7 pr-16 py-2.5 rounded-md border border-gray-200 focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 transition-all"
                  placeholder="0.00"
                  required
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                  <span className="text-gray-500 sm:text-sm font-medium">
                    USDC
                  </span>
                </div>
              </div>
              <p className="mt-2 text-sm text-gray-500 flex items-center">
                <span className="inline-block w-1 h-1 bg-amber-400 rounded-full mr-2"></span>
                Minimum stake: $10 USDC
              </p>
            </div>

            <div>
              <label
                htmlFor="yieldPercentage"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Yield Percentage
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <input
                  type="number"
                  id="yieldPercentage"
                  name="yieldPercentage"
                  min="0"
                  max="20"
                  step="0.5"
                  value={formData.yieldPercentage}
                  onChange={handleChange}
                  className="block w-full pl-4 pr-10 py-2.5 rounded-md border border-gray-200 focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 transition-all"
                  placeholder="5"
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                  <span className="text-gray-500 sm:text-sm font-medium">
                    %
                  </span>
                </div>
              </div>
              <p className="mt-2 text-sm flex items-center">
                <span className="text-gray-500">Potential reward:</span>
                <span className="ml-1 font-medium text-teal-600">
                  ${calculatePotentialReward().toFixed(2)} USDC
                </span>
              </p>
            </div>
          </div>

          {/* Challenge Type and Max Participants */}
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div className="flex items-start bg-amber-50 p-3 rounded-md border border-amber-100">
              <div className="flex items-center h-5">
                <input
                  id="isHardcore"
                  name="isHardcore"
                  type="checkbox"
                  checked={formData.isHardcore}
                  onChange={handleChange}
                  className="focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 h-4 w-4 text-cyan-600 border-gray-300 rounded transition-all"
                />
              </div>
              <div className="ml-3 text-sm">
                <label
                  htmlFor="isHardcore"
                  className="font-medium text-gray-800"
                >
                  Hardcore Challenge
                </label>
                <p className="text-gray-600">
                  Stake is forfeited if daily requirements are not met
                </p>
              </div>
            </div>

            <div>
              <label
                htmlFor="maxParticipants"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Max Participants{" "}
                <span className="text-gray-500">(optional)</span>
              </label>
              <div className="relative">
                <input
                  type="number"
                  id="maxParticipants"
                  name="maxParticipants"
                  min="0"
                  max="1000"
                  value={formData.maxParticipants}
                  onChange={handleChange}
                  className="mt-1 block w-full rounded-md border border-gray-200 py-2.5 pl-4 pr-14 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-1 focus:ring-cyan-500 transition-all"
                />
                <div className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none text-gray-500">
                  users
                </div>
              </div>
            </div>
          </div>

          {/* Invite Code */}
          <div>
            <label
              htmlFor="inviteCode"
              className="block text-sm font-medium text-gray-700"
            >
              Private Invite Code (optional)
            </label>
            <input
              type="text"
              id="inviteCode"
              name="inviteCode"
              value={formData.inviteCode}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-cyan-500"
              placeholder="Leave empty for public challenge"
            />
            <p className="mt-1 text-sm text-gray-500">
              Create a private challenge only accessible via invite code
            </p>
          </div>

          {/* Auto-join option */}
          <div className="flex items-start p-4 rounded-lg shadow-sm bg-amber-50 border border-amber-100">
            <div className="flex items-center h-5">
              <input
                id="autoJoin"
                name="autoJoin"
                type="checkbox"
                checked={formData.autoJoin}
                onChange={handleChange}
                className="focus:ring-cyan-500 h-4 w-4 text-cyan-600 border-gray-300 rounded cursor-pointer hover:border-cyan-400 transition-colors"
              />
            </div>
            <div className="ml-3 text-sm">
              <label
                htmlFor="autoJoin"
                className="font-medium text-gray-700 cursor-pointer hover:text-cyan-600 transition-colors"
              >
                Join my own challenge
              </label>
              <p className="text-gray-500 mt-1">
                Automatically join this challenge after creation
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Wallet Connection Notice */}
      {!isConnected && (
        <div className="bg-amber-50 border border-amber-200 rounded-md p-4 text-amber-800">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg
                className="h-5 w-5 text-amber-400"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium">Wallet not connected</h3>
              <p className="text-sm mt-1">
                Connect your wallet to enable blockchain integration for staking
                and rewards.
              </p>
              <button
                type="button"
                onClick={connectWallet}
                className="cursor-pointer mt-2 px-3 py-1 text-sm bg-amber-100 text-amber-800 rounded-md hover:bg-amber-200"
              >
                Connect Wallet
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Submit Button */}
      <div className="flex justify-end mt-6 space-x-4">
        <button
          type="button"
          onClick={() => router.back()}
          className="cursor-pointer bg-white py-2.5 px-5 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 transition-colors duration-200 disabled:opacity-50"
          disabled={isSubmitting}
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={!isFormValid() || isSubmitting}
          className="cursor-pointer bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 border border-transparent rounded-md shadow-sm py-2.5 px-5 inline-flex justify-center text-sm font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 disabled:opacity-50 transition-all duration-200 transform hover:translate-y-px"
        >
          Create Challenge
        </button>
      </div>
    </form>
  );

  // Render the submitting step with detailed progress
  const renderSubmitting = () => (
    <div className="text-center py-12">
      <LoadingSpinner size="large" />
      <h2 className="mt-4 text-lg font-medium text-gray-900">
        Creating Your Challenge
      </h2>

      {submissionProgress && (
        <div className="mt-6 max-w-md mx-auto">
          <div className="space-y-4">
            <div className="flex items-center">
              <div
                className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${
                  submissionProgress.step === "preparing"
                    ? "bg-blue-500 text-white"
                    : submissionProgress.step === "approving" ||
                        submissionProgress.step === "approvingConfirmation"
                      ? "bg-yellow-500 text-white"
                      : submissionProgress.step === "confirming"
                        ? "bg-yellow-500 text-white"
                        : submissionProgress.step === "mining"
                          ? "bg-yellow-500 text-white"
                          : submissionProgress.step === "confirmed"
                            ? "bg-green-500 text-white"
                            : "bg-gray-200"
                }`}
              >
                {submissionProgress.step === "confirmed" ? (
                  <svg
                    className="h-5 w-5"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                      clipRule="evenodd"
                    />
                  </svg>
                ) : (
                  "1"
                )}
              </div>
              <div className="ml-4">
                <h3 className="text-sm font-medium">
                  {submissionProgress.step === "preparing"
                    ? "Preparing Transaction"
                    : submissionProgress.step === "approving"
                      ? "Approving USDC Spending"
                      : submissionProgress.step === "approvingConfirmation"
                        ? "Confirming USDC Approval"
                        : submissionProgress.step === "confirming"
                          ? "Waiting for Confirmation"
                          : submissionProgress.step === "mining"
                            ? "Processing Transaction"
                            : submissionProgress.step === "confirmed"
                              ? "Transaction Confirmed"
                              : "Processing"}
                </h3>
                <p className="text-sm text-gray-500">
                  {submissionProgress.message}
                </p>

                {submissionProgress.txHash && (
                  <a
                    href={`https://mumbai.polygonscan.com/tx/${submissionProgress.txHash}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-xs text-cyan-600 hover:text-cyan-800 mt-1 inline-block"
                  >
                    View transaction on explorer
                  </a>
                )}
              </div>
            </div>

            <div className="flex items-center">
              <div
                className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${
                  submissionProgress.step === "confirmed"
                    ? "bg-blue-500 text-white"
                    : "bg-gray-200"
                }`}
              >
                2
              </div>
              <div className="ml-4">
                <h3 className="text-sm font-medium">
                  Creating Challenge Record
                </h3>
                <p className="text-sm text-gray-500">
                  {submissionProgress.step === "confirmed"
                    ? "Saving challenge details to our database..."
                    : "Waiting for blockchain confirmation..."}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      <p className="mt-4 text-sm text-gray-500">
        This process may take a minute or two to complete. Please don't close
        this window.
      </p>
    </div>
  );

  // Render the success step
  const renderSuccess = () => (
    <div className="text-center py-12">
      <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
        <svg
          className="h-6 w-6 text-green-600"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          aria-hidden="true"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M5 13l4 4L19 7"
          />
        </svg>
      </div>
      <h2 className="mt-4 text-lg font-medium text-gray-900">
        Challenge Created Successfully!
      </h2>
      <p className="mt-2 text-sm text-gray-500">
        Your challenge is now ready. Redirecting to challenge details...
      </p>

      {transaction && (
        <div className="mt-6 max-w-md mx-auto">
          <TransactionStatus
            txHash={transaction.hash}
            status={transaction.status}
            message="Blockchain transaction completed"
            network="mumbai"
          />
        </div>
      )}
    </div>
  );

  // Render the appropriate step
  return (
    <DashboardLayout>
      <div className="py-8">
        <div className="max-w-3xl mx-auto">
          <div className="md:flex md:items-center md:justify-between mb-8">
            <div className="flex-1 min-w-0">
              <h1 className="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                Create New Challenge
              </h1>
              <p className="mt-1 text-sm text-gray-500">
                Set up a new language learning challenge and invite others to
                join you.
              </p>
            </div>
          </div>

          {step === "form" && renderForm()}
          {step === "submitting" && renderSubmitting()}
          {step === "success" && renderSuccess()}
        </div>
      </div>
    </DashboardLayout>
  );
}

================
File: components/challenge/JoinChallengeFlow.jsx
================
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useStaking } from "@/lib/web3/hooks/useStaking";
import { useContract } from "@/lib/web3/hooks/useContract";
import { useYield } from "@/lib/web3/hooks/useYield";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
import ErrorMessage from "@/components/ui/ErrorMessage";
import TransactionStatus from "@/components/ui/TransactionStatus";
import { ethers } from "ethers";

export default function JoinChallengeFlow({ challenge, onSuccess, onCancel }) {
  const router = useRouter();
  const { isConnected, signer, usdcContract, stakingContract } = useContract();
  const {
    stakeForChallenge,
    isStaking,
    stakingError,
    transaction,
    stakingSuccess,
  } = useStaking();
  const { projectedReward, apy } = useYield(
    challenge.stakeAmount,
    challenge.yieldPercentage,
    challenge.durationDays
  );

  const [step, setStep] = useState("confirmation"); // confirmation, staking, result
  const [walletAddress, setWalletAddress] = useState("");
  const [error, setError] = useState(null);
  const [stakingStage, setStakingStage] = useState(null); // 'approving', 'staking', 'confirming'
  const [activeChallenges, setActiveChallenges] = useState([]);
  const [isLoadingChallenges, setIsLoadingChallenges] = useState(true);

  // Get connected wallet address
  useEffect(() => {
    const getAddress = async () => {
      if (signer) {
        try {
          const address = await signer.getAddress();
          setWalletAddress(address);
        } catch (err) {
          console.error("Error getting wallet address:", err);
        }
      }
    };

    getAddress();
  }, [signer]);

  // Fetch active challenges to show warning about multi-challenge commitment
  useEffect(() => {
    const fetchActiveChallenges = async () => {
      try {
        setIsLoadingChallenges(true);
        const response = await fetch('/api/challenges/user?status=ACTIVE');
        
        if (response.ok) {
          const data = await response.json();
          setActiveChallenges(data);
        }
      } catch (error) {
        console.error("Error fetching active challenges:", error);
      } finally {
        setIsLoadingChallenges(false);
      }
    };

    fetchActiveChallenges();
  }, []);

  // Handle transaction status changes
  useEffect(() => {
    if (stakingSuccess) {
      setStep("result");
    }
  }, [stakingSuccess]);

  // Handle staking errors
  useEffect(() => {
    if (stakingError) {
      setError(stakingError);
    }
  }, [stakingError]);

  // Replace the approveUSDC function with this improved version:
  const approveUSDC = async (amount) => {
    if (!usdcContract || !stakingContract || !isConnected) {
      throw new Error("Wallet not connected or contracts not initialized");
    }

    try {
      setError(null);
      console.log("Approving USDC amount:", amount);

      // Convert amount to USDC units (6 decimals)
      const usdcAmount = ethers.parseUnits(amount.toString(), 6);
      console.log("USDC amount in wei:", usdcAmount.toString());

      // Get contract target address
      const stakingAddress = stakingContract.target;
      console.log("Staking contract address:", stakingAddress);

      // Check if already approved
      const userAddress = await signer.getAddress();
      const allowance = await usdcContract.allowance(
        userAddress,
        stakingAddress
      );
      console.log("Current allowance:", allowance.toString());

      if (allowance >= usdcAmount) {
        console.log("USDC already approved");
        return { success: true };
      }

      // Approve staking contract to spend USDC with explicit gas settings
      console.log("Sending approval transaction...");
      const tx = await usdcContract.approve(stakingAddress, usdcAmount, {
        gasLimit: 100000, // Add explicit gas limit
      });
      console.log("Approval transaction submitted:", tx.hash);

      // Wait for confirmation
      console.log("Waiting for approval confirmation...");
      const receipt = await tx.wait();
      console.log("Approval transaction confirmed:", receipt);

      return { success: true, hash: receipt.hash };
    } catch (error) {
      console.error("Error approving USDC:", error);
      throw error;
    }
  };

  const handleJoinChallenge = async () => {
    console.log("Joining challenge...");
    setError(null);

    if (!isConnected) {
      setError("Please connect your wallet first");
      return;
    }

    try {
      setStep("staking");
      setStakingStage("approving");

      console.log("Challenge details:", {
        id: challenge.id,
        stakeAmount: challenge.stakeAmount,
        isHardcore: Boolean(challenge.isHardcore),
      });

      // With the updated contract, we can directly call stakeForChallenge
      const stakingTxHash = await stakeForChallenge(
        challenge.id,
        challenge.stakeAmount,
        Boolean(challenge.isHardcore)
      );

      if (!stakingTxHash) {
        throw new Error("Failed to stake. Please check console for details.");
      }

      console.log("Staking transaction successful:", stakingTxHash);
      setStakingStage("confirming");

      // Register participation on backend
      console.log("Registering challenge participation...");
      const joinResponse = await fetch("/api/challenges/join", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          challengeId: challenge.id,
          transactionHash: stakingTxHash,
        }),
      });

      if (!joinResponse.ok) {
        const errorData = await joinResponse.json();
        throw new Error(errorData.error || "Failed to join challenge");
      }

      const joinData = await joinResponse.json();
      console.log("Join challenge API response:", joinData);

      if (onSuccess) {
        onSuccess(stakingTxHash);
      }
    } catch (error) {
      console.error("Error joining challenge:", error);
      setError(error.message || "Failed to join challenge");
      setStep("confirmation"); // Go back to confirmation step on error
    }
  };

  // Format currency
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(amount);
  };

  // Confirmation Step
  const renderConfirmation = () => (
    <div className="space-y-4">
      <h2 className="text-xl font-bold text-gray-900">
        Confirm Challenge Participation
      </h2>

      {error && <ErrorMessage message={error} dismiss={() => setError(null)} />}

      <div className="bg-gray-50 rounded-md p-4 border border-gray-200">
        <h3 className="font-medium">{challenge.title}</h3>
        <p className="text-sm text-gray-500 mt-1">{challenge.description}</p>

        <div className="mt-4 space-y-2">
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">Duration:</span>
            <span className="text-sm font-medium">
              {challenge.durationDays} days
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">Daily requirement:</span>
            <span className="text-sm font-medium">
              {challenge.dailyRequirement} minutes
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">Stake amount:</span>
            <span className="text-sm font-medium">
              {formatCurrency(challenge.stakeAmount)}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">Potential reward:</span>
            <span className="text-sm font-medium text-green-600">
              {formatCurrency(projectedReward)}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-500">Effective APY:</span>
            <span className="text-sm font-medium text-green-600">
              {apy.toFixed(2)}%
            </span>
          </div>
        </div>
      </div>

      {/* Warning about multiple challenges if applicable */}
      {!isLoadingChallenges && activeChallenges.length > 0 && (
        <div className="bg-amber-50 p-4 rounded-md text-amber-700 border border-amber-200">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg
                className="h-5 w-5 text-amber-400"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium">Multiple Challenges</h3>
              <div className="mt-1 text-sm">
                <p>
                  You're already participating in {activeChallenges.length} active 
                  {activeChallenges.length === 1 ? ' challenge' : ' challenges'}. 
                  Make sure you can commit to the daily requirements for all challenges.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {challenge.isHardcore && (
        <div className="bg-red-50 p-4 rounded-md text-red-700 border border-red-200">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg
                className="h-5 w-5 text-red-400"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium">Hardcore Challenge</h3>
              <div className="mt-1 text-sm">
                <p>
                  This is a hardcore challenge. If you fail to meet the daily
                  requirements, your stake will be forfeited. Make sure you're
                  committed before joining.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="flex justify-between pt-4">
        <button
          onClick={onCancel}
          className="cursor-pointer px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
        >
          Cancel
        </button>

        <button
          onClick={handleJoinChallenge}
          className="px-4 py-2 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-md hover:from-cyan-600 hover:to-teal-600 cursor-pointer"
          disabled={!isConnected}
        >
          {isConnected ? "Join Challenge" : "Connect Wallet to Join"}
        </button>
      </div>
    </div>
  );

  // Staking Step (loading) with detailed substages
  const renderStaking = () => (
    <div className="space-y-6 text-center py-8">
      <LoadingSpinner size="large" />
      <div>
        <h2 className="text-xl font-bold text-gray-900 mb-2">
          Joining Challenge
        </h2>
        <p className="text-gray-600">
          {stakingStage === "approving"
            ? "Approving USDC spending..."
            : stakingStage === "staking"
              ? "Staking tokens for challenge..."
              : stakingStage === "confirming"
                ? "Finalizing participation..."
                : "Processing transaction..."}
        </p>
        <p className="text-sm text-gray-500 mt-4">
          Please confirm the transaction in your wallet.
          <br />
          Do not close this window until the process is complete.
        </p>
      </div>

      {/* Progress indicator */}
      <div className="max-w-md mx-auto">
        <div className="relative">
          <div className="absolute inset-0 flex items-center">
            <div className="w-full border-t border-gray-300"></div>
          </div>
          <div className="relative flex justify-between">
            <div>
              <span
                className={`flex h-8 w-8 items-center justify-center rounded-full ${
                  stakingStage === "approving"
                    ? "bg-cyan-600 text-white"
                    : stakingStage === "staking" ||
                        stakingStage === "confirming"
                      ? "bg-green-600 text-white"
                      : "bg-gray-300 text-gray-700"
                }`}
              >
                1
              </span>
              <span className="mt-2 block text-xs font-medium text-gray-700">
                Approve
              </span>
            </div>
            <div>
              <span
                className={`flex h-8 w-8 items-center justify-center rounded-full ${
                  stakingStage === "staking"
                    ? "bg-cyan-600 text-white"
                    : stakingStage === "confirming"
                      ? "bg-green-600 text-white"
                      : "bg-gray-300 text-gray-700"
                }`}
              >
                2
              </span>
              <span className="mt-2 block text-xs font-medium text-gray-700">
                Stake
              </span>
            </div>
            <div>
              <span
                className={`flex h-8 w-8 items-center justify-center rounded-full ${
                  stakingStage === "confirming"
                    ? "bg-cyan-600 text-white"
                    : "bg-gray-300 text-gray-700"
                }`}
              >
                3
              </span>
              <span className="mt-2 block text-xs font-medium text-gray-700">
                Confirm
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // Result Step
  const renderResult = () => (
    <div className="space-y-6">
      <TransactionStatus
        txHash={transaction?.hash}
        status={transaction?.status || "success"}
        message={
          transaction?.status === "success"
            ? `You've successfully joined the ${challenge.title} challenge!`
            : "There was an issue with your transaction."
        }
      />

      <div className="text-center mt-6">
        <p className="mb-4">
          {transaction?.status === "success"
            ? "You're all set! Start practicing today to make progress on your challenge."
            : "Please try again or contact support if the issue persists."}
        </p>

        <div className="flex justify-center space-x-4 mt-4">
          {transaction?.status === "success" ? (
            <>
              <button
                onClick={() => router.push(`/dashboard/learn?challengeId=${challenge.id}`)}
                className="cursor-pointer px-4 py-2 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-md hover:from-cyan-600 hover:to-teal-600"
              >
                Start Learning
              </button>
              <button
                onClick={() => router.push("/dashboard/challenges")}
                className="cursor-pointer px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
              >
                View My Challenges
              </button>
            </>
          ) : (
            <button
              onClick={() => setStep("confirmation")}
              className="cursor-pointer px-4 py-2 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-md hover:from-cyan-600 hover:to-teal-600"
            >
              Try Again
            </button>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="bg-white rounded-lg shadow-md p-6 max-w-lg mx-auto">
      {step === "confirmation" && renderConfirmation()}
      {step === "staking" && renderStaking()}
      {step === "result" && renderResult()}
    </div>
  );
}

================
File: components/challenge/YieldInformation.jsx
================
// components/challenge/YieldInformation.jsx
'use client';

import { useState, useEffect } from 'react';
import { useYield } from '@/lib/web3/hooks/useYield';

export default function YieldInformation({ 
  stakedAmount, 
  yieldPercentage, 
  durationDays,
  challengeStartDate,
  isHardcore = false
}) {
  const { projectedReward, dailyYield, apy } = useYield(stakedAmount, yieldPercentage, durationDays);
  const [timeRemaining, setTimeRemaining] = useState('');
  const [earnedToDate, setEarnedToDate] = useState(0);
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    // Calculate time remaining and earned yield to date
    if (challengeStartDate) {
      const updateTimeAndYield = () => {
        const startDate = new Date(challengeStartDate);
        const now = new Date();
        const endDate = new Date(startDate);
        endDate.setDate(endDate.getDate() + durationDays);
        
        // Calculate time remaining
        if (now >= endDate) {
          setTimeRemaining('Completed');
          setProgress(100);
        } else {
          const totalMs = endDate - startDate;
          const elapsedMs = now - startDate;
          const remainingMs = endDate - now;
          
          // Calculate progress
          const calculatedProgress = Math.min(100, (elapsedMs / totalMs) * 100);
          setProgress(calculatedProgress);
          
          // Format time remaining
          const days = Math.floor(remainingMs / (1000 * 60 * 60 * 24));
          const hours = Math.floor((remainingMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          setTimeRemaining(`${days}d ${hours}h`);
          
          // Calculate earned yield to date
          const daysPassed = elapsedMs / (1000 * 60 * 60 * 24);
          const earned = dailyYield * Math.min(daysPassed, durationDays);
          setEarnedToDate(earned);
        }
      };
      
      updateTimeAndYield();
      const interval = setInterval(updateTimeAndYield, 60000); // Update every minute
      
      return () => clearInterval(interval);
    }
  }, [challengeStartDate, durationDays, dailyYield]);
  
  // Format currency
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount);
  };
  
  return (
    <div className="bg-white rounded-lg border border-slate-200 p-4 shadow-sm">
      <h3 className="text-lg font-medium text-slate-800 mb-4">Yield Information</h3>
      
      {isHardcore ? (
        <div className="bg-red-50 text-red-700 border border-red-200 rounded-md p-3 mb-4">
          <p className="text-sm font-medium">Hardcore Challenge</p>
          <p className="text-xs">Your stake will be forfeited if you fail to meet the challenge requirements.</p>
        </div>
      ) : (
        <div className="bg-green-50 text-green-700 border border-green-200 rounded-md p-3 mb-4">
          <p className="text-sm font-medium">No-Loss Challenge</p>
          <p className="text-xs">Your stake will be returned even if you don't complete all requirements.</p>
        </div>
      )}
      
      <div className="space-y-3">
        <div className="flex justify-between items-center">
          <span className="text-slate-600 text-sm">Staked Amount:</span>
          <span className="font-medium">{formatCurrency(stakedAmount)}</span>
        </div>
        
        <div className="flex justify-between items-center">
          <span className="text-slate-600 text-sm">Yield Percentage:</span>
          <span className="font-medium text-green-600">{yieldPercentage}%</span>
        </div>
        
        <div className="flex justify-between items-center">
          <span className="text-slate-600 text-sm">Effective APY:</span>
          <span className="font-medium text-green-600">{apy.toFixed(2)}%</span>
        </div>
        
        <div className="flex justify-between items-center">
          <span className="text-slate-600 text-sm">Duration:</span>
          <span className="font-medium">{durationDays} days</span>
        </div>
        
        <div className="flex justify-between items-center">
          <span className="text-slate-600 text-sm">Time Remaining:</span>
          <span className="font-medium">{timeRemaining}</span>
        </div>
        
        <div className="mt-2 mb-1">
          <div className="flex justify-between text-xs text-slate-500 mb-1">
            <span>Progress</span>
            <span>{Math.round(progress)}%</span>
          </div>
          <div className="w-full bg-slate-200 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-cyan-400 to-teal-500 h-2 rounded-full" 
              style={{ width: `${progress}%` }}
            ></div>
          </div>
        </div>
        
        <hr className="my-3 border-slate-200" />
        
        <div className="flex justify-between items-center">
          <span className="text-slate-600 text-sm">Earned to Date:</span>
          <span className="font-medium text-green-600">{formatCurrency(earnedToDate)}</span>
        </div>
        
        <div className="flex justify-between items-center">
          <span className="text-slate-600 text-sm">Projected Total Reward:</span>
          <span className="font-medium text-green-600">{formatCurrency(projectedReward)}</span>
        </div>
        
        <div className="flex justify-between items-center">
          <span className="text-slate-600 text-sm">Projected Profit:</span>
          <span className="font-medium text-green-600">{formatCurrency(projectedReward - stakedAmount)}</span>
        </div>
      </div>
    </div>
  );
}

================
File: components/dashboard/ChallengeCard.jsx
================
// components/dashboard/ChallengeCard.jsx
import Link from 'next/link';

export default function ChallengeCard({ challenge, isActive }) {
  // Format currency with 2 decimal places
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(amount);
  };
  
  // Get language name from language code
  const getLanguageName = (code) => {
    const languages = {
      'en': 'English',
      'es': 'Spanish',
      'fr': 'French',
      'de': 'German',
      'it': 'Italian',
      'ja': 'Japanese',
      'ko': 'Korean',
      'zh': 'Chinese',
      'ru': 'Russian',
      'pt': 'Portuguese',
      'ar': 'Arabic',
      'hi': 'Hindi'
    };
    
    return languages[code] || code;
  };
  
  // Format proficiency level for display
  const formatProficiencyLevel = (level) => {
    return level.charAt(0) + level.slice(1).toLowerCase();
  };
  
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
      {/* Card header with language and level */}
      <div className="bg-gray-50 px-4 py-2 border-b border-gray-200">
        <div className="flex justify-between items-center">
          <span className="font-medium text-gray-600">
            {getLanguageName(challenge.languageCode)}
          </span>
          <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
            {formatProficiencyLevel(challenge.proficiencyLevel)}
          </span>
        </div>
      </div>
      
      {/* Card body */}
      <div className="p-4">
        <h3 className="font-bold text-lg mb-2">{challenge.title}</h3>
        <p className="text-gray-600 text-sm mb-4 line-clamp-2">{challenge.description}</p>
        
        {/* Challenge details */}
        <div className="space-y-2 mb-4">
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Duration:</span>
            <span className="font-medium">{challenge.durationDays} days</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Daily requirement:</span>
            <span className="font-medium">{challenge.dailyRequirement} min</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Stake amount:</span>
            <span className="font-medium">{formatCurrency(challenge.stakeAmount)}</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Potential yield:</span>
            <span className="font-medium text-green-600">+{challenge.yieldPercentage}%</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Challenge type:</span>
            <span className={`font-medium ${challenge.isHardcore ? 'text-red-600' : 'text-blue-600'}`}>
              {challenge.isHardcore ? 'Hardcore' : 'No-Loss'}
            </span>
          </div>
        </div>
        
        {/* Action button */}
        {isActive ? (
          <Link 
            href={`/dashboard/challenges/${challenge.id}`}
            className="block w-full py-2 text-center   text-white  bg-gradient-to-r from-cyan-500 to-teal-500 hite rounded-md"
          >
            Continue Challenge
          </Link>
        ) : (
          <Link 
            href={`/dashboard/challenges/${challenge.id}`}
            className="block w-full py-2 text-center   bg-gradient-to-r from-cyan-500 to-teal-500   text-white rounded-md "
          >
            View Challenge
          </Link>
        )}
      </div>
    </div>
  );
}

================
File: components/dashboard/LanguageStats.jsx
================
// components/dashboard/LanguageStats.jsx
import { useState, useEffect } from 'react';
import Link from 'next/link';

export default function LanguageStats({ languageCode, proficiencyLevel }) {
  const [stats, setStats] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Get language name from language code
  const getLanguageName = (code) => {
    const languages = {
      'en': 'English',
      'es': 'Spanish',
      'fr': 'French',
      'de': 'German',
      'it': 'Italian',
      'ja': 'Japanese',
      'ko': 'Korean',
      'zh': 'Chinese',
      'ru': 'Russian',
      'pt': 'Portuguese',
      'ar': 'Arabic',
      'hi': 'Hindi'
    };
    
    return languages[code] || code;
  };
  
  // Calculate progress percentage based on proficiency level
  const getProgressPercentage = (level) => {
    const levels = {
      'BEGINNER': 20,
      'ELEMENTARY': 40,
      'INTERMEDIATE': 60,
      'ADVANCED': 80,
      'FLUENT': 100
    };
    
    return levels[level] || 0;
  };
  
  useEffect(() => {
    const fetchLanguageStats = async () => {
      setIsLoading(true);
      setError(null);
      
      try {
        const response = await fetch(`/api/users/language-stats?languageCode=${languageCode}`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch language statistics');
        }
        
        const data = await response.json();
        setStats(data);
      } catch (error) {
        console.error('Error fetching language stats:', error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };
    
    if (languageCode) {
      fetchLanguageStats();
    }
  }, [languageCode]);
  
  // Format date as relative time (e.g., "2 days ago")
  const getRelativeTime = (dateString) => {
    if (!dateString) return 'Never';
    
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) return 'Today';
    if (diffDays === 1) return 'Yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
    return `${Math.floor(diffDays / 30)} months ago`;
  };
  
  if (isLoading) {
    return (
      <div className="rounded-lg border border-gray-200 p-4 animate-pulse">
        <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
        <div className="h-2 bg-gray-200 rounded mb-2.5"></div>
        <div className="h-2 bg-gray-200 rounded mb-2.5"></div>
        <div className="h-2 bg-gray-200 rounded"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="border border-red-200 rounded-lg p-4 bg-red-50 text-red-700">
        <p className="font-medium">Error loading language statistics</p>
        <p className="text-sm">{error}</p>
      </div>
    );
  }
  
  if (!stats) {
    return (
      <div className="border border-gray-200 rounded-lg p-4 text-center">
        <p className="text-gray-500">No statistics available for this language.</p>
      </div>
    );
  }
  
  return (
    <div className="border border-gray-200 rounded-lg overflow-hidden">
      <div className="px-4 py-3 bg-gray-50 border-b border-gray-200 flex justify-between items-center">
        <h3 className="font-semibold">{getLanguageName(languageCode)}</h3>
        <span className="text-sm text-gray-500">
          {proficiencyLevel.charAt(0) + proficiencyLevel.slice(1).toLowerCase()}
        </span>
      </div>
      
      <div className="p-4">
        {/* Progress bar */}
        <div className="mb-4">
          <div className="flex justify-between text-sm text-gray-500 mb-1">
            <span>Progress</span>
            <span>{getProgressPercentage(proficiencyLevel)}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-primary h-2 rounded-full" 
              style={{ width: `${getProgressPercentage(proficiencyLevel)}%` }}
            ></div>
          </div>
        </div>
        
        {/* Stats grid */}
        <div className="grid grid-cols-2 gap-4 mb-4">
          <div>
            <div className="text-sm text-gray-500">Current streak</div>
            <div className="font-bold text-lg">{stats.currentStreak || 0} days</div>
          </div>
          <div>
            <div className="text-sm text-gray-500">Vocabulary size</div>
            <div className="font-bold text-lg">{stats.vocabularySize || 0} words</div>
          </div>
          <div>
            <div className="text-sm text-gray-500">Total practice time</div>
            <div className="font-bold text-lg">{stats.totalMinutesPracticed || 0} min</div>
          </div>
          <div>
            <div className="text-sm text-gray-500">Last practiced</div>
            <div className="font-bold text-lg">{getRelativeTime(stats.lastPracticed)}</div>
          </div>
        </div>
        
        {/* Action buttons */}
        <div className="flex gap-2">
          <Link 
            href={`/dashboard/learn?language=${languageCode}`}
            className="flex-1 py-2 text-center bg-primary text-white rounded-md hover:bg-primary-dark transition-colors"
          >
            Practice Now
          </Link>
          <Link 
            href={`/dashboard/challenges?language=${languageCode}`}
            className="flex-1 py-2 text-center border border-primary text-primary rounded-md hover:bg-primary-50 transition-colors"
          >
            Find Challenges
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: components/dashboard/PracticeChart.jsx
================
// New component: components/dashboard/PracticeChart.jsx
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

export default function PracticeChart({ data }) {
  if (!data || data.length === 0) {
    return (
      <div className="flex items-center justify-center h-64 bg-gray-50 rounded-md border border-gray-200">
        <p className="text-gray-500">No practice data available</p>
      </div>
    );
  }

  return (
    <ResponsiveContainer width="100%" height="100%">
      <LineChart
        data={data}
        margin={{
          top: 5,
          right: 30,
          left: 20,
          bottom: 5,
        }}
      >
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="date" />
        <YAxis />
        <Tooltip formatter={(value) => [`${value} min`, 'Practice Time']} />
        <Legend />
        <Line
          type="monotone"
          dataKey="minutes"
          stroke="#0ea5e9"
          activeDot={{ r: 8 }}
          name="Minutes Practiced"
        />
      </LineChart>
    </ResponsiveContainer>
  );
}

================
File: components/dashboard/RecentActivity.jsx
================
// components/dashboard/RecentActivity.jsx
import { useState, useEffect } from 'react';

export default function RecentActivity() {
  const [activities, setActivities] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    // Fetch real activity data from API
    const fetchActivities = async () => {
      setIsLoading(true);
      try {
        const response = await fetch('/api/users/activity');
        
        if (!response.ok) {
          throw new Error('Failed to fetch activity data');
        }
        
        const data = await response.json();
        setActivities(data.activities || []);
      } catch (error) {
        console.error('Error fetching activities:', error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchActivities();
  }, []);
  
  // Get language name from language code
  const getLanguageName = (code) => {
    const languages = {
      'en': 'English',
      'es': 'Spanish',
      'fr': 'French',
      'de': 'German',
      'it': 'Italian',
      'ja': 'Japanese',
      'ko': 'Korean',
      'zh': 'Chinese',
      'ru': 'Russian',
      'pt': 'Portuguese',
      'ar': 'Arabic',
      'hi': 'Hindi'
    };
    
    return languages[code] || code;
  };
  
  // Format date as relative time (e.g., "2 hours ago")
  const getRelativeTime = (dateString) => {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / (1000 * 60));
    
    if (diffMins < 60) return `${diffMins} min ago`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} hours ago`;
    
    const diffDays = Math.floor(diffHours / 24);
    if (diffDays === 1) return 'Yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    
    const diffWeeks = Math.floor(diffDays / 7);
    if (diffWeeks < 4) return `${diffWeeks} weeks ago`;
    
    const diffMonths = Math.floor(diffDays / 30);
    return `${diffMonths} months ago`;
  };
  
  // Get icon for activity type
  const getActivityIcon = (type) => {
    switch (type) {
      case 'practice':
        return (
          <div className="rounded-full bg-blue-100 p-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
            </svg>
          </div>
        );
      case 'challenge':
        return (
          <div className="rounded-full bg-purple-100 p-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
          </div>
        );
      case 'achievement':
        return (
          <div className="rounded-full bg-yellow-100 p-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
            </svg>
          </div>
        );
      default:
        return (
          <div className="rounded-full bg-gray-100 p-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
        );
    }
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[1, 2, 3].map((item) => (
          <div key={item} className="flex items-start space-x-3 animate-pulse">
            <div className="rounded-full bg-gray-200 h-8 w-8"></div>
            <div className="flex-1">
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-1/2"></div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 text-red-700 border border-red-200 rounded-md p-4">
        <p className="font-medium">Error loading activities</p>
        <p className="text-sm">{error}</p>
      </div>
    );
  }
  
  if (activities.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">No recent activity.</p>
        <p className="text-sm text-gray-400 mt-1">Start learning to see your activities here.</p>
      </div>
    );
  }
  
  return (
    <div className="space-y-4">
      {activities.map((activity) => (
        <div key={activity.id} className="flex items-start space-x-3">
          {getActivityIcon(activity.type)}
          <div className="flex-1">
            <div className="flex justify-between">
              <span className="text-sm font-medium">
                {getLanguageName(activity.language)}
              </span>
              <span className="text-xs text-gray-500">
                {getRelativeTime(activity.timestamp)}
              </span>
            </div>
            <p className="text-sm text-gray-600">{activity.details}</p>
          </div>
        </div>
      ))}
    </div>
  );
}

================
File: components/layout/DashboardLayout.jsx
================
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname, useRouter } from "next/navigation";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
import NotificationCenter from "../notifications/NotificationCenter";
import { useContract } from "@/lib/web3/hooks/useContract";

export default function DashboardLayout({ children }) {
  const pathname = usePathname();
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [hasUnreadNotifications, setHasUnreadNotifications] = useState(false);

  const { isConnected } = useContract();

  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const [unreadNotificationsCount, setUnreadNotificationsCount] = useState(0);

  useEffect(() => {
    const fetchNotificationsCount = async () => {
      try {
        const response = await fetch("/api/notifications/unread-count");
        if (response.ok) {
          const data = await response.json();
          setUnreadNotificationsCount(data.count);
        }
      } catch (error) {
        console.error("Error fetching unread notifications count:", error);
      }
    };

    if (isConnected) {
      fetchNotificationsCount();

      // Set up polling for new notifications
      const interval = setInterval(fetchNotificationsCount, 30000); // Check every 30 seconds
      return () => clearInterval(interval);
    }
  }, [isConnected]);

  useEffect(() => {
    async function fetchUserData() {
      try {
        setIsLoading(true);
        const res = await fetch("/api/users/profile");

        if (!res.ok) {
          if (res.status === 401) {
            router.push("/auth/signin");
            return;
          }
          throw new Error("Failed to fetch user data");
        }

        const userData = await res.json();
        setUser(userData);

        // Fetch notifications
        try {
          const notificationsRes = await fetch("/api/notifications");
          if (notificationsRes.ok) {
            const notificationsData = await notificationsRes.json();
            setNotifications(notificationsData);
            setHasUnreadNotifications(
              notificationsData.some((notification) => !notification.read)
            );
          }
        } catch (notificationError) {
          console.error("Error fetching notifications:", notificationError);
        }
      } catch (error) {
        console.error("Error loading user profile:", error);
      } finally {
        setIsLoading(false);
      }
    }

    fetchUserData();
  }, [router]);

  // Close mobile menu/sidebar when route changes
  useEffect(() => {
    setIsMobileMenuOpen(false);
    setIsMobileSidebarOpen(false);
  }, [pathname]);

  const handleLogout = async () => {
    try {
      await fetch("/api/auth/logout", {
        method: "POST",
      });

      router.push("/");
    } catch (error) {
      console.error("Error during logout:", error);
    }
  };

  const navItems = [
    {
      path: "/dashboard",
      label: "Dashboard",
      icon: "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6",
    },
    {
      path: "/dashboard/learn",
      label: "Learn",
      icon: "M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253",
    },
    {
      path: "/dashboard/challenges",
      label: "Challenges",
      icon: "M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10",
    },
    {
      path: "/dashboard/statistics",
      label: "Statistics",
      icon: "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z",
    },
    {
      path: "/dashboard/profile",
      label: "Profile",
      icon: "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z",
    },
  ];

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <LoadingSpinner size="large" />
          <p className="mt-4 text-gray-500">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Top navigation */}
      <nav className="shadow-md border-b border-gray-200 fixed top-0 left-0 right-0 z-30 bg-white/95">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              {/* Mobile menu button */}
              <button
                type="button"
                className="cursor-pointer inline-flex items-center justify-center rounded-md p-2 text-gray-400 md:hidden"
                onClick={() => setIsMobileSidebarOpen(true)}
              >
                <span className="sr-only">Open sidebar</span>
                <svg
                  className="h-6 w-6"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  aria-hidden="true"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M4 6h16M4 12h16M4 18h16"
                  />
                </svg>
              </button>

              <div className="flex-shrink-0 flex items-center ml-0 md:ml-0">
                <Link href="/dashboard" className="flex items-center">
                  <div className="w-10 h-10 relative">
                    <div className="relative bg-gradient-to-br from-cyan-400 to-teal-500 rounded-xl w-full h-full flex items-center justify-center overflow-hidden border-2 border-cyan-300 shadow-md">
                      {/* Eyes */}
                      <div className="flex space-x-1">
                        <div className="bg-yellow-300 rounded-full w-[20%] h-[20%] flex items-center justify-center border border-yellow-400">
                          <div className="bg-black rounded-full w-[50%] h-[50%]"></div>
                        </div>
                        <div className="bg-yellow-300 rounded-full w-[20%] h-[20%] flex items-center justify-center border border-yellow-400">
                          <div className="bg-black rounded-full w-[50%] h-[50%]"></div>
                        </div>
                      </div>

                      {/* Antenna */}
                      <div className="absolute -top-1 left-1/2 transform -translate-x-1/2">
                        <div className="w-[2px] h-[5px] bg-slate-600"></div>
                        <div className="w-[4px] h-[4px] rounded-full bg-red-500 animate-pulse"></div>
                      </div>

                      {/* Mouth */}
                      <div className="absolute bottom-[15%] w-[40%] h-[2px] bg-slate-700 rounded-full"></div>
                    </div>
                  </div>
                  <span className="ml-2 font-bold text-xl hidden sm:block">
                    ShinoLearn
                  </span>
                </Link>
              </div>
            </div>

            <div className="flex items-center">
              {/* Create Challenge Button for Desktop */}
              <Link
                href="/dashboard/challenges/create"
                className="hidden md:flex items-center mr-4 px-4 py-2 text-sm font-medium rounded-md bg-gradient-to-r from-cyan-500 to-teal-500 text-white shadow-sm hover:from-cyan-600 hover:to-teal-600"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-1"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                    clipRule="evenodd"
                  />
                </svg>
                New Challenge
              </Link>

              <button
                className="cursor-pointer p-2 rounded-full text-gray-400 hover:text-gray-500 relative"
                onClick={() => setIsNotificationsOpen(true)}
              >
                <span className="sr-only">View notifications</span>
                <svg
                  className="h-6 w-6"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"
                  />
                </svg>
                {unreadNotificationsCount > 0 && (
                  <span className="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-500 rounded-full">
                    {unreadNotificationsCount > 9
                      ? "9+"
                      : unreadNotificationsCount}
                  </span>
                )}
              </button>

              {/* Profile dropdown */}
              <div className="ml-3 relative">
                <div className="flex items-center">
                  <button
                    type="button"
                    className="cursor-pointer flex rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 transition-all duration-200"
                    id="user-menu-button"
                    onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                  >
                    <span className="sr-only">Open user menu</span>
                    <div className="h-9 w-9 rounded-full bg-gradient-to-r from-cyan-500 to-teal-500 flex items-center justify-center text-white font-medium shadow-sm">
                      {user?.username?.charAt(0) ||
                        user?.walletAddress?.slice(0, 2) ||
                        "U"}
                    </div>
                  </button>
                  <span className="hidden md:block ml-3 text-sm font-medium text-gray-700 truncate max-w-xs">
                    {user?.username || "Loading..."}
                  </span>
                </div>
                {/* Mobile menu dropdown */}
                <div
                  className={`${
                    isMobileMenuOpen ? "absolute" : "hidden"
                  } right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none transform transition-all duration-200 ${
                    isMobileMenuOpen
                      ? "opacity-100 scale-100"
                      : "opacity-0 scale-95"
                  }`}
                  role="menu"
                  aria-orientation="vertical"
                  aria-labelledby="user-menu-button"
                  tabIndex="-1"
                >
                  <div className="block px-4 py-2 text-xs text-gray-400 border-b border-gray-100">
                    Manage Account
                  </div>
                  <Link
                    href="/dashboard/profile"
                    className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 hover:text-cyan-600 transition-colors"
                    role="menuitem"
                  >
                    Your Profile
                  </Link>
                  <button
                    onClick={handleLogout}
                    className="cursor-pointer block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 hover:text-cyan-600 transition-colors w-full text-left"
                    role="menuitem"
                  >
                    Sign out
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </nav>

      {/* Mobile sidebar backdrop */}
      {isMobileSidebarOpen && (
        <div
          className="fixed inset-0 z-40 bg-gray-600 bg-opacity-75 md:hidden"
          onClick={() => setIsMobileSidebarOpen(false)}
        ></div>
      )}

      {/* Mobile sidebar */}
      <div
        className={`fixed inset-y-0 left-0 z-50 w-full max-w-xs bg-white transform transition-transform ease-in-out duration-300 md:hidden ${
          isMobileSidebarOpen ? "translate-x-0" : "-translate-x-full"
        }`}
      >
        <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-10 h-10 relative">
                <div className="relative bg-gradient-to-br from-cyan-400 to-teal-500 rounded-xl w-full h-full flex items-center justify-center overflow-hidden border-2 border-cyan-300 shadow-md">
                  {/* Robot elements */}
                  <div className="flex space-x-1">
                    <div className="bg-yellow-300 rounded-full w-[20%] h-[20%]"></div>
                    <div className="bg-yellow-300 rounded-full w-[20%] h-[20%]"></div>
                  </div>
                </div>
              </div>
            </div>
            <div className="ml-2 font-bold text-xl">ShinoLearn</div>
          </div>
          <button
            className="cursor-pointer rounded-md p-2 text-gray-400 hover:text-gray-500 focus:outline-none"
            onClick={() => setIsMobileSidebarOpen(false)}
          >
            <span className="sr-only">Close sidebar</span>
            <svg
              className="h-6 w-6"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        <div className="mt-4 px-2 space-y-1">
          {/* Create Challenge Button for Mobile Sidebar */}
          <Link
            href="/dashboard/challenges/create"
            className="group flex items-center px-2 py-2 text-base font-medium rounded-md bg-gradient-to-r from-cyan-500 to-teal-500 text-white"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6 mr-3 text-white"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                clipRule="evenodd"
              />
            </svg>
            New Challenge
          </Link>

          {navItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`${
                pathname === item.path
                  ? "bg-cyan-50 text-cyan-600 border-l-4 border-cyan-500"
                  : "text-gray-700 hover:bg-gray-100 border-l-4 border-transparent"
              } group flex items-center px-2 py-2 text-base font-medium rounded-md `}
            >
              <svg
                className={`${
                  pathname === item.path ? "text-cyan-500" : "text-gray-500"
                } mr-3 h-6 w-6`}
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d={item.icon}
                />
              </svg>
              {item.label}
            </Link>
          ))}

          <div className="pt-4 mt-4 border-t border-gray-200">
            <button
              onClick={handleLogout}
              className="cursor-pointer group flex items-center px-2 py-2 text-base font-medium text-gray-700 hover:bg-gray-100 rounded-md w-full"
            >
              <svg
                className="mr-3 h-6 w-6 text-gray-500"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                />
              </svg>
              Sign out
            </button>
          </div>
        </div>
      </div>

      {/* Content area with sidebar */}
      <div className="flex flex-col md:flex-row pt-16">
        {/* Main content */}
        <main className="flex-1 ">
          <div className="bg-gradient-to-b from-cyan-50 via-white to-cyan-50 min-h-screen">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
              {children}
            </div>
          </div>
        </main>
      </div>

      {/* Mobile bottom navigation */}
      <div className="fixed bottom-0 left-0 right-0 z-20 bg-white shadow-t border-t border-gray-200 ">
        <div className="flex justify-around">
          {navItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex flex-col items-center py-2 px-3 ${
                pathname === item.path ? "text-cyan-600" : "text-gray-500"
              }`}
            >
              <svg
                className="h-6 w-6"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d={item.icon}
                />
              </svg>
              <span className="text-xs mt-1">{item.label}</span>
            </Link>
          ))}
        </div>
      </div>

      {/* Floating action button for mobile - Create Challenge */}
      <div className="fixed bottom-20 right-4 md:hidden z-30">
        <Link
          href="/dashboard/challenges/create"
          className="flex items-center justify-center w-14 h-14 rounded-full bg-gradient-to-r from-cyan-500 to-teal-500 text-white shadow-lg hover:from-cyan-600 hover:to-teal-600"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
              clipRule="evenodd"
            />
          </svg>
        </Link>
      </div>
      {isNotificationsOpen && (
        <NotificationCenter onClose={() => setIsNotificationsOpen(false)} />
      )}
    </div>
  );
}

================
File: components/learn/ConversationInterface.jsx
================
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import { LoadingSpinner } from "@/components/ui/LoadingSpinner";

export default function ConversationInterface({
  languageCode,
  userChallengeId,
}) {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [conversationId, setConversationId] = useState(null);
  const [practiceTime, setPracticeTime] = useState(0);
  const [practiceStatus, setPracticeStatus] = useState({
    isActive: true,
    dailyGoal: 0,
    progress: 0,
    isCompleted: false,
  });
  const [sessionStartTime, setSessionStartTime] = useState(null);
  const messagesEndRef = useRef(null);
  const router = useRouter();

  const [practiceTimeSeconds, setPracticeTimeSeconds] = useState(0);

  // Initialize practice session and fetch daily goal
  useEffect(() => {
    const fetchPracticeInfo = async () => {
      if (!userChallengeId) return;

      try {
        const response = await fetch(
          `/api/challenges/practice-info?userChallengeId=${userChallengeId}`
        );
        if (response.ok) {
          const data = await response.json();
          setPracticeStatus({
            isActive: true,
            dailyGoal: data.dailyRequirement || 20,
            progress: data.todayProgress || 0,
            isCompleted: data.todayCompleted || false,
          });
        }
      } catch (error) {
        console.error("Error fetching practice info:", error);
      }
    };

    fetchPracticeInfo();
    setSessionStartTime(new Date());
  }, [userChallengeId]);

  useEffect(() => {
    let timer;

    if (sessionStartTime) {
      // Initial calculation
      const calculatePracticeTime = () => {
        const now = new Date();
        const elapsedSeconds = Math.floor((now - sessionStartTime) / 1000);
        setPracticeTimeSeconds(elapsedSeconds);

        // Update minutes for display (rounded down)
        const minutes = Math.floor(elapsedSeconds / 60);
        setPracticeTime(minutes);

        // Only update progress on minute boundaries
        if (
          elapsedSeconds % 60 === 0 &&
          elapsedSeconds > 0 &&
          userChallengeId
        ) {
          // Update progress in database - we update every minute
          updatePracticeProgress(1);
        }
      };

      // Set timer to run every second for smooth countdown
      timer = setInterval(calculatePracticeTime, 1000);
    }

    return () => clearInterval(timer);
  }, [sessionStartTime, userChallengeId]);

  const updatePracticeProgress = async (minutes) => {
    if (!userChallengeId || minutes <= 0) return;

    try {
      const response = await fetch("/api/challenges/update-progress", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userChallengeId,
          minutes,
          conversationId,
        }),
      });
      if (response.ok) {
        const data = await response.json();

        // Update local state with the response
        setPracticeStatus((prev) => ({
          ...prev,
          progress: data.minutesPracticed,
          isCompleted: data.completed,
        }));
      }
    } catch (error) {
      console.error("Error updating practice progress:", error);
    }
  };

  // Start conversation with initial greeting
  useEffect(() => {
    const startConversation = async () => {
      setIsLoading(true);
      try {
        const response = await fetch("/api/conversation", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            message: "Hello, I would like to practice conversation.",
            languageCode,
            userChallengeId,
          }),
        });

        if (!response.ok) {
          throw new Error("Failed to start conversation");
        }

        const data = await response.json();

        setMessages([
          {
            sender: "user",
            content: "Hello, I would like to practice conversation.",
          },
          { sender: "ai", content: data.content },
        ]);
        setConversationId(data.conversationId);
      } catch (error) {
        console.error("Error starting conversation:", error);
        setMessages([
          {
            sender: "system",
            content:
              "There was an error starting the conversation. Please try again or contact support.",
          },
        ]);
      } finally {
        setIsLoading(false);
      }
    };

    if (languageCode && messages.length === 0) {
      startConversation();
    }
  }, [languageCode, userChallengeId]);

  // Scroll to bottom of messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!input.trim() || isLoading) return;

    const userMessage = input.trim();
    setInput("");
    setIsLoading(true);

    // Add user message immediately
    setMessages((prev) => [...prev, { sender: "user", content: userMessage }]);

    try {
      const response = await fetch("/api/conversation", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: userMessage,
          conversationId,
          languageCode,
          userChallengeId,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to send message");
      }

      const data = await response.json();

      // Add AI response
      setMessages((prev) => [...prev, { sender: "ai", content: data.content }]);

      // Update conversation ID if it's a new conversation
      if (!conversationId && data.conversationId) {
        setConversationId(data.conversationId);
      }
    } catch (error) {
      console.error("Error sending message:", error);
      setMessages((prev) => [
        ...prev,
        {
          sender: "system",
          content:
            "Sorry, there was an error processing your message. Please try again.",
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  // Improved end session function to ensure we record the final minutes
  const handleEndSession = async () => {
    try {
      // Calculate final practice time in minutes (rounded up to give user benefit)
      const finalMinutes = Math.ceil(practiceTimeSeconds / 60);

      // Ensure we save the final practice minutes
      if (userChallengeId && finalMinutes > 0) {
        await fetch("/api/challenges/update-progress", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            userChallengeId,
            minutes: finalMinutes,
            isSessionEnd: true,
            conversationId,
          }),
        });
      }

      // Optionally get a summary of the session
      if (conversationId && messages.length >= 5) {
        try {
          const evalResponse = await fetch("/api/conversation/evaluate", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              conversationId,
            }),
          });

          if (evalResponse.ok) {
            const evalData = await evalResponse.json();
            // Could show a summary modal here before redirecting
            console.log("Conversation evaluation:", evalData);
          }
        } catch (evalError) {
          console.error("Error evaluating conversation:", evalError);
        }
      }

      router.push("/dashboard");
    } catch (error) {
      console.error("Error ending session:", error);
      router.push("/dashboard");
    }
  };

  // Improved progress bar with better visual feedback
  const renderProgressBar = () => {
    if (!userChallengeId) return null;

    const percentage = Math.min(
      100,
      (practiceStatus.progress / practiceStatus.dailyGoal) * 100
    );

    return (
      <div className="mb-4">
        <div className="flex justify-between text-sm text-slate-500 mb-1">
          <span>
            Daily Goal: {practiceStatus.progress}/{practiceStatus.dailyGoal}{" "}
            minutes
          </span>
          <span>{percentage.toFixed(0)}%</span>
        </div>
        <div className="w-full bg-slate-200 rounded-full h-2">
          <div
            className={`h-2 rounded-full ${
              practiceStatus.isCompleted
                ? "bg-green-500"
                : "bg-gradient-to-r from-cyan-400 to-teal-500"
            }`}
            style={{ width: `${percentage}%` }}
          ></div>
        </div>
        {practiceStatus.isCompleted ? (
          <p className="text-sm text-green-600 mt-1 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4 mr-1"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clipRule="evenodd"
              />
            </svg>
            Daily goal completed! Keep practicing for extra progress.
          </p>
        ) : (
          <p className="text-sm text-slate-500 mt-1">
            {practiceStatus.dailyGoal - practiceStatus.progress} minutes
            remaining to complete your daily goal
          </p>
        )}
      </div>
    );
  };

  return (
    <div className="flex flex-col h-full max-h-screen bg-slate-50">
      {/* Header */}
      <div className="bg-white border-b border-slate-200 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <div className="mr-3">
              <div className="w-10 h-10 bg-gradient-to-br from-cyan-400 to-teal-500 rounded-full flex items-center justify-center">
                {languageCode === "ja"
                  ? "🇯🇵"
                  : languageCode === "ko"
                    ? "🇰🇷"
                    : languageCode === "zh"
                      ? "🇨🇳"
                      : languageCode === "en"
                        ? "🇬🇧"
                        : languageCode === "es"
                          ? "🇪🇸"
                          : languageCode === "fr"
                            ? "🇫🇷"
                            : "🌐"}
              </div>
            </div>
            <div>
              <h2 className="font-bold text-slate-800">
                {languageCode === "ja"
                  ? "Japanese"
                  : languageCode === "ko"
                    ? "Korean"
                    : languageCode === "zh"
                      ? "Chinese"
                      : languageCode === "en"
                        ? "English"
                        : languageCode === "es"
                          ? "Spanish"
                          : languageCode === "fr"
                            ? "French"
                            : "Conversation"}{" "}
                Practice
              </h2>
              <p className="text-sm text-slate-500">
                Practice time: {practiceTime} minutes
              </p>
            </div>
          </div>
          <button
            onClick={handleEndSession}
            className="cursor-pointer px-4 py-2 bg-slate-100 hover:bg-slate-200 text-slate-700 rounded-lg"
          >
            End Session
          </button>
        </div>
        {renderProgressBar()}
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
          >
            <div
              className={`max-w-[75%] rounded-lg p-4 ${
                message.sender === "user"
                  ? "bg-cyan-100 text-slate-800"
                  : message.sender === "ai"
                    ? "bg-white border border-slate-200 text-slate-800"
                    : "bg-red-100 text-red-800"
              }`}
            >
              {message.content}
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-white border border-slate-200 rounded-lg p-4 max-w-[75%]">
              <div className="flex space-x-2">
                <div className="w-3 h-3 bg-slate-300 rounded-full animate-bounce"></div>
                <div
                  className="w-3 h-3 bg-slate-300 rounded-full animate-bounce"
                  style={{ animationDelay: "0.2s" }}
                ></div>
                <div
                  className="w-3 h-3 bg-slate-300 rounded-full animate-bounce"
                  style={{ animationDelay: "0.4s" }}
                ></div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="border-t border-slate-200 p-4 bg-white">
        <form onSubmit={handleSubmit} className="flex space-x-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            disabled={isLoading}
            placeholder="Type your message..."
            className="flex-1 px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
          />
          <button
            type="submit"
            disabled={isLoading}
            className="cursor-pointer px-4 py-2 bg-gradient-to-r from-cyan-500 to-teal-500 text-white rounded-lg hover:from-cyan-600 hover:to-teal-600 disabled:opacity-50"
          >
            Send
          </button>
        </form>
      </div>
    </div>
  );
}

================
File: components/notifications/NotificationCenter.jsx
================
// New component for notifications
// components/notifications/NotificationCenter.jsx
import { useState, useEffect } from "react";
import { formatDistanceToNow } from "date-fns";
import { useRouter } from "next/navigation";

export default function NotificationCenter({ onClose }) {
  const [notifications, setNotifications] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const router = useRouter();

  useEffect(() => {
    fetchNotifications();
  }, []);

  const fetchNotifications = async () => {
    try {
      setIsLoading(true);
      const response = await fetch("/api/notifications");

      if (!response.ok) {
        throw new Error("Failed to fetch notifications");
      }

      const data = await response.json();
      setNotifications(data);
    } catch (error) {
      console.error("Error fetching notifications:", error);
      setError("Failed to load notifications");
    } finally {
      setIsLoading(false);
    }
  };

  const markAsRead = async (id) => {
    try {
      const response = await fetch(`/api/notifications/${id}/read`, {
        method: "POST",
      });

      if (response.ok) {
        // Update locally
        setNotifications((prev) =>
          prev.map((notif) =>
            notif.id === id ? { ...notif, read: true } : notif
          )
        );
      }
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  const markAllAsRead = async () => {
    try {
      const response = await fetch("/api/notifications/read-all", {
        method: "POST",
      });

      if (response.ok) {
        // Update locally
        setNotifications((prev) =>
          prev.map((notif) => ({ ...notif, read: true }))
        );
      }
    } catch (error) {
      console.error("Error marking all notifications as read:", error);
    }
  };

  const handleNotificationClick = (notification) => {
    // Mark as read
    markAsRead(notification.id);

    // Navigate based on notification type
    switch (notification.type) {
      case "CHALLENGE_COMPLETED":
      case "CHALLENGE_REMINDER":
        router.push(`/dashboard/challenges`);
        break;
      case "ACHIEVEMENT_EARNED":
        router.push(`/dashboard/profile`);
        break;
      default:
        router.push("/dashboard");
    }

    // Close notification panel
    onClose();
  };

  // Get icon based on notification type
  const getNotificationIcon = (type) => {
    switch (type) {
      case "CHALLENGE_COMPLETED":
        return (
          <div className="rounded-full bg-green-100 p-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-green-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clipRule="evenodd"
              />
            </svg>
          </div>
        );
      case "CHALLENGE_REMINDER":
        return (
          <div className="rounded-full bg-amber-100 p-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-amber-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                clipRule="evenodd"
              />
            </svg>
          </div>
        );
      case "ACHIEVEMENT_EARNED":
        return (
          <div className="rounded-full bg-purple-100 p-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-purple-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          </div>
        );
      default:
        return (
          <div className="rounded-full bg-blue-100 p-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-blue-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
            </svg>
          </div>
        );
    }
  };

  return (
    <div className="fixed inset-0 z-50 overflow-hidden" onClick={onClose}>
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />

        <div
          className="fixed inset-y-0 right-0 pl-10 max-w-full flex"
          onClick={(e) => e.stopPropagation()}
        >
          <div className="w-screen max-w-md">
            <div className="h-full flex flex-col bg-white shadow-xl">
              <div className="flex-1 overflow-y-auto py-6 px-4 sm:px-6">
                <div className="flex items-start justify-between">
                  <h2 className="text-lg font-medium text-gray-900">
                    Notifications
                  </h2>
                  <div className="ml-3 h-7 flex items-center">
                    <button
                      type="button"
                      className="-m-2 p-2 text-gray-400 hover:text-gray-500 cursor-pointer"
                      onClick={onClose}
                    >
                      <span className="sr-only">Close panel</span>
                      <svg
                        className="h-6 w-6"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        aria-hidden="true"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M6 18L18 6M6 6l12 12"
                        />
                      </svg>
                    </button>
                  </div>
                </div>

                {notifications.length > 0 && (
                  <div className="mt-8">
                    <button
                      onClick={markAllAsRead}
                      className="text-sm text-cyan-600 hover:text-cyan-800 cursor-pointer"
                    >
                      Mark all as read
                    </button>
                  </div>
                )}

                <div className="mt-8">
                  {isLoading ? (
                    <div className="flex justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-500"></div>
                    </div>
                  ) : error ? (
                    <div className="bg-red-50 text-red-700 p-4 rounded-md">
                      {error}
                    </div>
                  ) : notifications.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      No notifications yet
                    </div>
                  ) : (
                    <ul role="list" className="divide-y divide-gray-200">
                      {notifications.map((notification) => (
                        <li
                          key={notification.id}
                          className={`py-4 flex ${!notification.read ? "bg-blue-50" : ""}`}
                          onClick={() => handleNotificationClick(notification)}
                        >
                          <div className="ml-3 flex-shrink-0">
                            {getNotificationIcon(notification.type)}
                          </div>
                          <div className="ml-3 flex-1">
                            <p className="text-sm font-medium text-gray-900">
                              {notification.title}
                            </p>
                            <p className="text-sm text-gray-500">
                              {notification.message}
                            </p>
                            <p className="text-xs text-gray-400 mt-1">
                              {formatDistanceToNow(
                                new Date(notification.createdAt),
                                { addSuffix: true }
                              )}
                            </p>
                          </div>
                          {!notification.read && (
                            <div className="flex-shrink-0 ml-2">
                              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            </div>
                          )}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: components/ui/button.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props} />
  );
}

export { Button, buttonVariants }

================
File: components/ui/EmptyState.jsx
================
export default function EmptyState({
  title = "No data found",
  message = "There are no items to display at this time.",
  icon = null,
  action = null,
}) {
  return (
    <div className="text-center p-8 border border-gray-200 rounded-lg bg-white shadow-sm hover:shadow-md transition-shadow duration-300">
      <div className="flex justify-center">
        {icon || (
          <svg
            className="h-14 w-14 text-cyan-500 opacity-80"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={1.5}
              d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
            />
          </svg>
        )}
      </div>
      <h3 className="mt-4 text-lg font-medium text-gray-800">{title}</h3>
      <p className="mt-2 text-sm text-gray-500 max-w-md mx-auto">{message}</p>
      {action && (
        <div className="mt-6">
          <button
            type="button"
            className="cursor-pointer inline-flex items-center rounded-lg bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 px-6 py-3 text-sm font-medium text-white shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 transition-all duration-300"
            onClick={action.onClick}
          >
            {action.icon && <span className="mr-2">{action.icon}</span>}
            {action.text}
          </button>
        </div>
      )}
    </div>
  );
}

================
File: components/ui/ErrorMessage.jsx
================
// components/ui/ErrorMessage.jsx
export default function ErrorMessage({
  message,
  title = "Error",
  retry = null,
  dismiss = null,
  variant = "error", // 'error', 'warning', 'info'
}) {
  const getColorClasses = () => {
    switch (variant) {
      case "warning":
        return "bg-amber-50 border-amber-200 text-amber-800";
      case "info":
        return "bg-blue-50 border-blue-200 text-blue-800";
      case "error":
      default:
        return "bg-red-50 border-red-200 text-red-800";
    }
  };

  const getIcon = () => {
    switch (variant) {
      case "warning":
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-amber-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
              clipRule="evenodd"
            />
          </svg>
        );
      case "info":
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-blue-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
              clipRule="evenodd"
            />
          </svg>
        );
      case "error":
      default:
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 text-red-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
              clipRule="evenodd"
            />
          </svg>
        );
    }
  };

  return (
    <div className={`rounded-md border p-4 ${getColorClasses()}`}>
      <div className="flex">
        <div className="flex-shrink-0">{getIcon()}</div>
        <div className="ml-3 flex-1">
          <h3 className="text-sm font-medium">{title}</h3>
          <div className="mt-2 text-sm">
            <p>{message}</p>
          </div>
          {(retry || dismiss) && (
            <div className="mt-4">
              <div className="-mx-2 -my-1.5 flex">
                {retry && (
                  <button
                    type="button"
                    onClick={retry}
                    className={`rounded-md px-2 py-1.5 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 ${
                      variant === "error"
                        ? "bg-red-100 text-red-800 hover:bg-red-200 focus:ring-red-600"
                        : variant === "warning"
                          ? "bg-amber-100 text-amber-800 hover:bg-amber-200 focus:ring-amber-600"
                          : "bg-blue-100 text-blue-800 hover:bg-blue-200 focus:ring-blue-600"
                    }`}
                  >
                    Try again
                  </button>
                )}
                {dismiss && (
                  <button
                    type="button"
                    onClick={dismiss}
                    className="cursor-pointer ml-3 rounded-md bg-white px-2 py-1.5 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                  >
                    Dismiss
                  </button>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

================
File: components/ui/LoadingSpinner.jsx
================
// components/ui/LoadingSpinner.jsx
export function LoadingSpinner({
  size = "medium",
  color = "primary",
  fullPage = false,
}) {
  const sizeClasses = {
    small: "h-4 w-4",
    medium: "h-8 w-8",
    large: "h-12 w-12",
  };

  const colorClasses = {
    primary: "text-primary",
    white: "text-white",
    gray: "text-gray-500",
  };

  if (fullPage) {
    return (
      <div className="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50">
        <div className="bg-white p-6 rounded-lg shadow-xl flex flex-col items-center">
          <svg
            className={`animate-spin ${sizeClasses[size]} ${colorClasses.primary}`}
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          <p className="mt-2 text-sm text-gray-700">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex justify-center items-center">
      <svg
        className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`}
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
      >
        <circle
          className="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          strokeWidth="4"
        ></circle>
        <path
          className="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        ></path>
      </svg>
    </div>
  );
}

================
File: components/ui/LoadingState.jsx
================
// components/ui/LoadingState.jsx
  import { LoadingSpinner } from './LoadingSpinner';
  
  export default function LoadingState({ 
    message = 'Loading...', 
    size = 'medium',
    height = 'auto'
  }) {
    const heightClass = height === 'auto' ? 'min-h-[100px]' : `h-${height}`;
  
    return (
      <div className={`flex flex-col items-center justify-center ${heightClass} w-full`}>
        <LoadingSpinner size={size} />
        <p className="mt-2 text-sm text-gray-500">{message}</p>
      </div>
    );
  }

================
File: components/ui/TransactionStatus.jsx
================
// components/ui/TransactionStatus.jsx
import { useState, useEffect } from "react";

export default function TransactionStatus({
  txHash,
  status,
  network = "polygon",
  message,
  onClose,
}) {
  const [explorerLink, setExplorerLink] = useState("");

  useEffect(() => {
    if (txHash) {
      // Set the appropriate block explorer URL based on network
      const baseUrl =
        network === "ethereum"
          ? "https://etherscan.io/tx/"
          : network === "polygon"
            ? "https://polygonscan.com/tx/"
            : network === "mumbai"
              ? "https://mumbai.polygonscan.com/tx/"
              : network === "localhost"
                ? "" // No block explorer for localhost
                : "https://polygonscan.com/tx/"; // Default to polygon

      // If using localhost, don't set an explorer link
      if (network === "localhost") {
        setExplorerLink("");
      } else {
        setExplorerLink(`${baseUrl}${txHash}`);
      }
    }
  }, [txHash, network]);

  const statusColor =
    status === "success"
      ? "text-green-600 bg-green-50 border-green-200"
      : status === "pending"
        ? "text-yellow-600 bg-yellow-50 border-yellow-200"
        : "text-red-600 bg-red-50 border-red-200";

  const statusIcon =
    status === "success" ? (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="h-6 w-6 text-green-500"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M5 13l4 4L19 7"
        />
      </svg>
    ) : status === "pending" ? (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="h-6 w-6 text-yellow-500 animate-pulse"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
        />
      </svg>
    ) : (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="h-6 w-6 text-red-500"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M6 18L18 6M6 6l12 12"
        />
      </svg>
    );

  return (
    <div className={`rounded-md border p-4 ${statusColor}`}>
      <div className="flex">
        <div className="flex-shrink-0">{statusIcon}</div>
        <div className="ml-3 flex-1">
          <h3 className="text-md font-medium">
            {status === "success"
              ? "Transaction Successful"
              : status === "pending"
                ? "Transaction Pending"
                : "Transaction Failed"}
          </h3>
          {message && <p className="mt-1 text-sm">{message}</p>}
          {txHash && explorerLink && (
            <div className="mt-2">
              <a
                href={explorerLink}
                target="_blank"
                rel="noopener noreferrer"
                className="text-sm font-medium underline"
              >
                View on Block Explorer
              </a>
            </div>
          )}
          {txHash && !explorerLink && network === "localhost" && (
            <div className="mt-2">
              <span className="text-sm">
                Transaction ID: {txHash.substring(0, 10)}...
              </span>
            </div>
          )}
        </div>
        {onClose && (
          <button
            type="button"
            className="cursor-pointer ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-500 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 inline-flex h-8 w-8"
            onClick={onClose}
          >
            <span className="sr-only">Close</span>
            <svg
              className="w-5 h-5"
              fill="currentColor"
              viewBox="0 0 20 20"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                clipRule="evenodd"
              ></path>
            </svg>
          </button>
        )}
      </div>
    </div>
  );
}

================
File: lib/auth/jwt.js
================
// File: lib/auth/jwt.js
import { jwtVerify, SignJWT } from 'jose';

// Function to verify JWT
export async function verifyJWT(token) {
  if (!process.env.JWT_SECRET) {
    throw new Error('JWT_SECRET is not defined');
  }
  
  const secret = new TextEncoder().encode(process.env.JWT_SECRET);
  
  try {
    const { payload } = await jwtVerify(token, secret);
    return payload;
  } catch (error) {
    throw new Error('Invalid token');
  }
}

// Function to create JWT
export async function createJWT(payload) {
  if (!process.env.JWT_SECRET) {
    throw new Error('JWT_SECRET is not defined');
  }
  
  const secret = new TextEncoder().encode(process.env.JWT_SECRET);
  
  const jwt = await new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(secret);
  
  return jwt;
}

================
File: lib/auth/verify.js
================
// File: lib/auth/verify.js
import { cookies } from 'next/headers';
import { jwtVerify } from 'jose';

export async function verifyAuth() {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('auth_token')?.value;
    
    if (!token) {
      return { success: false, error: 'No authentication token' };
    }
    
    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
    const { payload } = await jwtVerify(token, secret);
    
    if (!payload.userId || !payload.walletAddress) {
      return { success: false, error: 'Invalid token payload' };
    }
    
    return {
      success: true,
      userId: payload.userId,
      walletAddress: payload.walletAddress
    };
  } catch (error) {
    console.error('Auth verification error:', error);
    return { success: false, error: 'Authentication failed' };
  }
}

================
File: lib/cron/dailyCheck.js
================
// lib/cron/dailyCheck.js
import { PrismaClient } from '@prisma/client';
import { sendEmail } from '../email/sender';

const prisma = new PrismaClient();

export async function runDailyChecks() {
  console.log('Running daily checks at', new Date().toISOString());
  
  try {
    // Get all active challenges
    const activeChallenges = await prisma.userChallenge.findMany({
      where: { status: 'ACTIVE' },
      include: {
        user: true,
        challenge: true,
        dailyProgress: {
          orderBy: { date: 'desc' },
          take: 1
        }
      }
    });
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Process each active challenge
    for (const userChallenge of activeChallenges) {
      try {
        // Check if the end date has passed
        const endDate = new Date(userChallenge.endDate);
        if (endDate < today) {
          // Challenge has ended, determine if completed or failed
          await processChallengeCompletion(userChallenge);
          continue;
        }
        
        // Check if user has practiced today
        const hasPracticedToday = userChallenge.dailyProgress.some(progress => {
          const progressDate = new Date(progress.date);
          progressDate.setHours(0, 0, 0, 0);
          return progressDate.getTime() === today.getTime() && progress.completed;
        });
        
        if (!hasPracticedToday) {
          // Send reminder notification
          await sendPracticeReminder(userChallenge);
        }
        
        // Check streak - if zero and challenge requires streaks, issue warning
        if (userChallenge.currentStreak === 0 && userChallenge.challenge.isHardcore) {
          await sendStreakWarning(userChallenge);
        }
      } catch (error) {
        console.error(`Error processing challenge ${userChallenge.id}:`, error);
      }
    }
    
    console.log('Daily checks completed');
  } catch (error) {
    console.error('Error running daily checks:', error);
  }
}

async function processChallengeCompletion(userChallenge) {
  // Calculate completion percentage
  const totalDays = userChallenge.challenge.durationDays;
  const completedDays = await prisma.dailyProgress.count({
    where: {
      userChallengeId: userChallenge.id,
      completed: true
    }
  });
  
  const completionPercentage = (completedDays / totalDays) * 100;
  
  // Update progress percentage
  await prisma.userChallenge.update({
    where: { id: userChallenge.id },
    data: { progressPercentage: completionPercentage }
  });
  
  // Check if challenge is successful
  // For simplicity, we'll say a challenge is complete if the user has completed at least 80% of the days
  const completionThreshold = Math.floor(totalDays * 0.8);
  
  if (completedDays >= completionThreshold) {
    // Mark challenge as completed
    await prisma.userChallenge.update({
      where: { id: userChallenge.id },
      data: { status: 'COMPLETED' }
    });
    
    // Create notification
    await prisma.notification.create({
      data: {
        userId: userChallenge.userId,
        type: 'CHALLENGE_COMPLETED',
        title: 'Challenge Completed!',
        message: `Congratulations! You've completed the "${userChallenge.challenge.title}" challenge. Claim your rewards now.`,
        read: false
      }
    });
    
    // Send email notification
    await sendEmail(
      userChallenge.user.email,
      'Challenge Completed!',
      `Congratulations! You've completed the "${userChallenge.challenge.title}" challenge. Claim your rewards now.`
    );
  } else if (userChallenge.challenge.isHardcore) {
    // For hardcore challenges, mark as failed if completion < threshold
    await prisma.userChallenge.update({
      where: { id: userChallenge.id },
      data: { status: 'FAILED' }
    });
    
    // Create notification
    await prisma.notification.create({
      data: {
        userId: userChallenge.userId,
        type: 'CHALLENGE_FAILED',
        title: 'Challenge Failed',
        message: `Unfortunately, you didn't meet the requirements for the "${userChallenge.challenge.title}" challenge. Your stake has been forfeited.`,
        read: false
      }
    });
  } else {
    // For no-loss challenges, just mark as completed with partial success
    await prisma.userChallenge.update({
      where: { id: userChallenge.id },
      data: { status: 'COMPLETED' }
    });
    
    // Create notification
    await prisma.notification.create({
      data: {
        userId: userChallenge.userId,
        type: 'CHALLENGE_COMPLETED',
        title: 'Challenge Completed',
        message: `Your "${userChallenge.challenge.title}" challenge has ended. You completed ${completedDays} out of ${totalDays} days. Claim your stake now.`,
        read: false
      }
    });
  }
}

async function sendPracticeReminder(userChallenge) {
  // Create reminder notification
  await prisma.notification.create({
    data: {
      userId: userChallenge.userId,
      type: 'CHALLENGE_REMINDER',
      title: 'Daily Practice Reminder',
      message: `Don't forget to practice ${userChallenge.challenge.dailyRequirement} minutes of ${getLanguageName(userChallenge.challenge.languageCode)} today to maintain your streak!`,
      read: false
    }
  });
  
  // Optionally send email if user has email notifications enabled
  if (userChallenge.user.email) {
    await sendEmail(
      userChallenge.user.email,
      'Daily Practice Reminder',
      `Don't forget to practice ${userChallenge.challenge.dailyRequirement} minutes of ${getLanguageName(userChallenge.challenge.languageCode)} today to maintain your streak!`
    );
  }
}

async function sendStreakWarning(userChallenge) {
  // Create streak warning notification
  await prisma.notification.create({
    data: {
      userId: userChallenge.userId,
      type: 'STREAK_WARNING',
      title: 'Streak Warning',
      message: `Your streak for the "${userChallenge.challenge.title}" challenge is at risk! Practice today to avoid losing your stake.`,
      read: false
    }
  });
  
  // Optionally send email if user has email notifications enabled
  if (userChallenge.user.email) {
    await sendEmail(
      userChallenge.user.email,
      'Streak Warning',
      `Your streak for the "${userChallenge.challenge.title}" challenge is at risk! Practice today to avoid losing your stake.`
    );
  }
}

// Helper function to get language name
function getLanguageName(code) {
  const languages = {
    'en': 'English',
    'es': 'Spanish',
    'fr': 'French',
    'de': 'German',
    'it': 'Italian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'zh': 'Chinese',
    'ru': 'Russian',
    'pt': 'Portuguese',
    'ar': 'Arabic',
    'hi': 'Hindi'
  };
  
  return languages[code] || code;
}

================
File: lib/web3/abis/stakingABI.json
================
[
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isHardcore",
          "type": "bool"
        }
      ],
      "name": "ChallengeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "ChallengeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        }
      ],
      "name": "ChallengeFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isHardcore",
          "type": "bool"
        }
      ],
      "name": "StakeReceived",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldBps",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHardcore",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "durationDays",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yieldPercentage",
          "type": "uint256"
        }
      ],
      "name": "completeChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        }
      ],
      "name": "deactivateChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        }
      ],
      "name": "failChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        }
      ],
      "name": "getChallengeDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldBps",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHardcore",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "durationDays",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHardcore",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isFailed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserActiveChallenges",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldBps",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHardcore",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "durationDays",
          "type": "uint256"
        }
      ],
      "name": "registerChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHardcore",
          "type": "bool"
        }
      ],
      "name": "stakeForChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHardcore",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isFailed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalChallenges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalYieldGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userActiveChallenges",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "challengeId",
          "type": "string"
        }
      ],
      "name": "withdrawFromChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ]

================
File: lib/web3/abis/usdcABI.json
================
[
  {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [{"name": "", "type": "string"}],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [{"name": "_spender", "type": "address"}, {"name": "_value", "type": "uint256"}],
    "name": "approve",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalSupply",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [{"name": "_from", "type": "address"}, {"name": "_to", "type": "address"}, {"name": "_value", "type": "uint256"}],
    "name": "transferFrom",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "decimals",
    "outputs": [{"name": "", "type": "uint8"}],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [{"name": "_owner", "type": "address"}],
    "name": "balanceOf",
    "outputs": [{"name": "balance", "type": "uint256"}],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "symbol",
    "outputs": [{"name": "", "type": "string"}],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [{"name": "_to", "type": "address"}, {"name": "_value", "type": "uint256"}],
    "name": "transfer",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [{"name": "_owner", "type": "address"}, {"name": "_spender", "type": "address"}],
    "name": "allowance",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {"indexed": true, "name": "owner", "type": "address"},
      {"indexed": true, "name": "spender", "type": "address"},
      {"indexed": false, "name": "value", "type": "uint256"}
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {"indexed": true, "name": "from", "type": "address"},
      {"indexed": true, "name": "to", "type": "address"},
      {"indexed": false, "name": "value", "type": "uint256"}
    ],
    "name": "Transfer",
    "type": "event"
  }
]

================
File: lib/web3/hooks/useContract.js
================
// lib/web3/hooks/useContract.js
'use client'
import { useEffect, useState } from 'react';
import { ethers } from 'ethers';
import stakingABI from '../abis/stakingABI.json';
import usdcABI from '../abis/usdcABI.json';

export function useContract() {
  const [stakingContract, setStakingContract] = useState(null);
  const [usdcContract, setUsdcContract] = useState(null);
  const [provider, setProvider] = useState(null);
  const [signer, setSigner] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [networkName, setNetworkName] = useState(null);
  const [chainId, setChainId] = useState(null);

  const STAKING_CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_STAKING_CONTRACT_ADDRESS;
  const USDC_CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_USDC_CONTRACT_ADDRESS;

  // Function to initialize provider and contracts
  const initializeProvider = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // Check if MetaMask is installed
      if (typeof window !== 'undefined' && window.ethereum) {
        // Initialize Ethers provider with Web3Provider
        const ethProvider = new ethers.BrowserProvider(window.ethereum);
        setProvider(ethProvider);

        // Get network information
        const network = await ethProvider.getNetwork();
        setChainId(network.chainId);
        setNetworkName(network.name);

        try {
          // Request account access and get signer
          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
          if (accounts.length > 0) {
            const ethSigner = await ethProvider.getSigner();
            setSigner(ethSigner);
            setIsConnected(true);

            // Initialize contract with signer for write operations
            if (STAKING_CONTRACT_ADDRESS && USDC_CONTRACT_ADDRESS) {
              const stakingContractWithSigner = new ethers.Contract(
                STAKING_CONTRACT_ADDRESS,
                stakingABI,
                ethSigner
              );
              setStakingContract(stakingContractWithSigner);

              const usdcContractWithSigner = new ethers.Contract(
                USDC_CONTRACT_ADDRESS,
                usdcABI,
                ethSigner
              );
              setUsdcContract(usdcContractWithSigner);
            } else {
              setError("Contract addresses not configured in environment");
            }
          } else {
            setIsConnected(false);
            // Initialize read-only contracts with provider
            initializeReadOnlyContracts(ethProvider);
          }
        } catch (signerError) {
          console.log("Wallet connection not available:", signerError.message);
          setIsConnected(false);
          // Initialize read-only contracts with provider
          initializeReadOnlyContracts(ethProvider);
        }
      } else {
        setError('No Ethereum provider detected. Please install MetaMask.');
        setIsConnected(false);
      }
    } catch (err) {
      console.error('Error initializing contracts:', err);
      setError(err.message || 'Failed to initialize contracts');
    } finally {
      setIsLoading(false);
    }
  };

  // Initialize read-only contract instances
  const initializeReadOnlyContracts = (provider) => {
    if (STAKING_CONTRACT_ADDRESS && USDC_CONTRACT_ADDRESS) {
      const stakingContractReadOnly = new ethers.Contract(
        STAKING_CONTRACT_ADDRESS,
        stakingABI,
        provider
      );
      setStakingContract(stakingContractReadOnly);

      const usdcContractReadOnly = new ethers.Contract(
        USDC_CONTRACT_ADDRESS,
        usdcABI,
        provider
      );
      setUsdcContract(usdcContractReadOnly);
    }
  };

  // Connect wallet function that can be called from UI
  const connectWallet = async () => {
    if (typeof window !== 'undefined' && window.ethereum) {
      try {
        await window.ethereum.request({ method: 'eth_requestAccounts' });
        await initializeProvider(); // Reinitialize after connection
        return true;
      } catch (error) {
        console.error("User denied account access", error);
        setError("Please connect your wallet to continue");
        return false;
      }
    } else {
      setError('Please install MetaMask to use this feature');
      return false;
    }
  };

// Update this function to properly detect local development networks
const checkNetwork = async () => {
  if (!provider) return false;
  
  try {
    const network = await provider.getNetwork();
    console.log("Current network:", {
      chainId: network.chainId.toString(),
      name: network.name
    });
    
    // Hardhat local network uses chainId 31337
    return network.chainId.toString() === "1337" || "31337";
  } catch (error) {
    console.error("Error checking network:", error);
    return false;
  }
};

  // Switch to Local Network
  const switchToLocalNetwork = async () => {
    if (!window.ethereum) return false;
    
    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: '0x539' }], // Chain ID for local network in hex (1337)
      });
      
      // Reinitialize provider after switching networks
      setTimeout(() => {
        initializeProvider();
      }, 1000);
      
      return true;
    } catch (switchError) {
      // If the network is not added to MetaMask, add it
      if (switchError.code === 4902) {
        try {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [{
              chainId: '0x539',
              chainName: 'Localhost 8545',
              nativeCurrency: {
                name: 'ETH',
                symbol: 'ETH',
                decimals: 18
              },
              rpcUrls: ['http://127.0.0.1:8545/'],
              blockExplorerUrls: []
            }],
          });
          
          // Reinitialize provider after adding network
          setTimeout(() => {
            initializeProvider();
          }, 1000);
          
          return true;
        } catch (addError) {
          console.error("Error adding local network:", addError);
          return false;
        }
      }
      console.error("Error switching network:", switchError);
      return false;
    }
  };

  // Initialize on component mount
  useEffect(() => {
    initializeProvider();

    // Listen for account changes
    if (typeof window !== 'undefined' && window.ethereum) {
      const handleAccountsChanged = () => {
        // Re-initialize on account change
        initializeProvider();
      };

      const handleChainChanged = () => {
        // Reload the page on chain change as recommended by MetaMask
        window.location.reload();
      };

      window.ethereum.on('accountsChanged', handleAccountsChanged);
      window.ethereum.on('chainChanged', handleChainChanged);

      return () => {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      };
    }
  }, []);

  return {
    stakingContract,
    usdcContract,
    provider,
    signer,
    isConnected,
    isLoading,
    error,
    networkName,
    chainId,
    connectWallet,
    checkNetwork,
    switchToLocalNetwork
  };
}

================
File: lib/web3/hooks/useStaking.js
================
// lib/web3/hooks/useStaking.js
'use client'
import { useState, useCallback } from 'react';
import { ethers } from 'ethers';
import { useContract } from './useContract';

export function useStaking() {
  const { stakingContract, usdcContract, isConnected, signer } = useContract();
  const [isStaking, setIsStaking] = useState(false);
  const [stakingError, setStakingError] = useState(null);
  const [stakingSuccess, setStakingSuccess] = useState(false);
  const [transaction, setTransaction] = useState(null);

  // Function to approve USDC for spending by the staking contract
  const approveUSDC = useCallback(async (amount) => {
    if (!usdcContract || !isConnected) {
      throw new Error('Wallet not connected or contract not initialized');
    }

    try {
      setStakingError(null);
      // Convert amount to USDC units (6 decimals)
      const usdcAmount = ethers.parseUnits(amount.toString(), 6);
      
      // Approve staking contract to spend USDC
      const tx = await usdcContract.approve(stakingContract.target, usdcAmount);
      await tx.wait();
      return tx.hash;
    } catch (error) {
      console.error('Error approving USDC:', error);
      throw error;
    }
  }, [usdcContract, stakingContract, isConnected]);

  const stakeForChallenge = useCallback(async (challengeId, amount, isHardcore) => {
    if (!stakingContract || !isConnected) {
      setStakingError('Wallet not connected or contract not initialized');
      return null;
    }
  
    try {
      setIsStaking(true);
      setStakingError(null);
      setStakingSuccess(false);
      
      // Convert to USDC units (6 decimals)
      const usdcAmount = ethers.parseUnits(amount.toString(), 6);
      
      // Use a SHORT challenge ID (first 10 chars only)
      const shortId = challengeId.slice(0, 10);
      
      console.log("Staking for challenge:", {
        shortId,
        amount: amount.toString(),
        usdcAmount: usdcAmount.toString(),
        isHardcore: Boolean(isHardcore)
      });
      
      // Approve USDC if needed
      const userAddress = await signer.getAddress();
      const allowance = await usdcContract.allowance(userAddress, stakingContract.target);
      
      console.log("Current allowance:", allowance.toString());
      
      if (allowance < usdcAmount) {
        console.log("Approving USDC...");
        
        // Calculate double the amount for approval
        const doubleAmount = ethers.parseUnits((parseFloat(amount) * 2).toString(), 6);
        
        const approveTx = await usdcContract.approve(
          stakingContract.target,
          doubleAmount,
          { gasLimit: 150000 }
        );
        
        await approveTx.wait();
        console.log("USDC approved");
      }
      
      // Execute staking transaction
      console.log("Executing stakeForChallenge...");
      const tx = await stakingContract.stakeForChallenge(
        shortId,
        usdcAmount,
        Boolean(isHardcore),
        { gasLimit: 500000 }
      );
      
      console.log("Staking transaction sent:", tx.hash);
      const receipt = await tx.wait();
      console.log("Staking transaction confirmed:", receipt);
      
      setTransaction({
        hash: receipt.hash,
        status: 'success',
        amount,
        challengeId
      });
      
      setStakingSuccess(true);
      return receipt.hash;
    } catch (error) {
      console.error("Staking error details:", error);
      setStakingError(error.message || 'Failed to stake for challenge');
      return null;
    } finally {
      setIsStaking(false);
    }
  }, [stakingContract, usdcContract, signer, isConnected]);

  // Function to withdraw from a non-hardcore challenge
  const withdrawFromChallenge = useCallback(async (challengeId) => {
    if (!stakingContract || !isConnected) {
      setStakingError('Wallet not connected or contract not initialized');
      return null;
    }

    try {
      setIsStaking(true);
      setStakingError(null);
      setStakingSuccess(false);
      
      const tx = await stakingContract.withdrawFromChallenge(
        challengeId,
        { gasLimit: 300000 }
      );
      
      const receipt = await tx.wait();
      
      setTransaction({
        hash: receipt.hash,
        status: receipt.status ? 'success' : 'failed',
        challengeId
      });
      
      if (receipt.status) {
        setStakingSuccess(true);
        return receipt.hash;
      } else {
        setStakingError('Transaction failed');
        return null;
      }
    } catch (error) {
      console.error('Error withdrawing from challenge:', error);
      setStakingError(error.message || 'Failed to withdraw from challenge');
      return null;
    } finally {
      setIsStaking(false);
    }
  }, [stakingContract, isConnected]);

  // Get user's active challenges
  const getUserActiveChallenges = useCallback(async (userAddress) => {
    if (!stakingContract) return [];
    
    try {
      const challenges = await stakingContract.getUserActiveChallenges(userAddress);
      return challenges;
    } catch (error) {
      console.error('Error getting active challenges:', error);
      return [];
    }
  }, [stakingContract]);

  // Get stake details for a challenge
  const getStakeDetails = useCallback(async (userAddress, challengeId) => {
    if (!stakingContract) return null;
    
    try {
      const [amount, timestamp, isHardcore, isCompleted, isFailed] = 
        await stakingContract.getStake(userAddress, challengeId);
      
      return {
        amount: ethers.formatUnits(amount, 6), // Convert from USDC units
        timestamp: new Date(Number(timestamp) * 1000),
        isHardcore,
        isCompleted,
        isFailed
      };
    } catch (error) {
      console.error('Error getting stake details:', error);
      return null;
    }
  }, [stakingContract]);

  return {
    stakeForChallenge,
    withdrawFromChallenge,
    getUserActiveChallenges,
    getStakeDetails,
    isStaking,
    stakingError,
    stakingSuccess,
    transaction,
    approveUSDC
  };
}

================
File: lib/web3/hooks/useYield.js
================
// lib/web3/hooks/useYield.js
import { useState, useEffect } from 'react';

export function useYield(stakedAmount, yieldPercentage, durationDays) {
  const [projectedReward, setProjectedReward] = useState(0);
  const [dailyYield, setDailyYield] = useState(0);
  const [apy, setApy] = useState(0);
  
  useEffect(() => {
    const calculateYield = () => {
      if (!stakedAmount || !yieldPercentage || !durationDays) {
        setProjectedReward(0);
        setDailyYield(0);
        setApy(0);
        return;
      }
      
      // Parse inputs to ensure numerical operations
      const stake = parseFloat(stakedAmount);
      const yieldPct = parseFloat(yieldPercentage);
      const duration = parseInt(durationDays);
      
      if (isNaN(stake) || isNaN(yieldPct) || isNaN(duration) || duration <= 0) {
        return;
      }
      
      // Calculate projected reward
      const yieldAmount = (stake * yieldPct) / 100;
      const totalReward = stake + yieldAmount;
      setProjectedReward(totalReward);
      
      // Calculate daily yield
      const daily = yieldAmount / duration;
      setDailyYield(daily);
      
      // Calculate APY
      const yearlyYield = (yieldAmount / duration) * 365;
      const calculatedApy = (yearlyYield / stake) * 100;
      setApy(calculatedApy);
    };
    
    calculateYield();
  }, [stakedAmount, yieldPercentage, durationDays]);
  
  return {
    projectedReward,
    dailyYield,
    apy
  };
}

================
File: lib/web3/providers.js
================
// lib/web3/providers.js
import { ethers } from "ethers";

// Function to get Ethereum provider
export const getEthereumProvider = async () => {
  // Check if window is defined (browser environment)
  if (typeof window !== 'undefined' && window.ethereum) {
    try {
      // Request account access
      await window.ethereum.request({ method: 'eth_requestAccounts' });
      return new ethers.BrowserProvider(window.ethereum);
    } catch (error) {
      console.error('User denied account access:', error);
      throw new Error('User denied account access');
    }
  } else {
    throw new Error('No Ethereum browser extension detected. Please install MetaMask or similar.');
  }
};

// Function to get connected wallet address
export const getWalletAddress = async () => {
  try {
    const provider = await getEthereumProvider();
    const signer = await provider.getSigner();
    return await signer.getAddress();
  } catch (error) {
    console.error('Error getting wallet address:', error);
    throw error;
  }
};

// Function to sign a message with wallet
export const signMessage = async (message) => {
  try {
    const provider = await getEthereumProvider();
    const signer = await provider.getSigner();
    return await signer.signMessage(message);
  } catch (error) {
    console.error('Error signing message:', error);
    throw error;
  }
};

================
File: lib/web3/staking.js
================
// lib/web3/staking.js
import { ethers } from 'ethers';
import stakingABI from './abis/stakingABI.json';

const STAKING_CONTRACT_ADDRESS = process.env.STAKING_CONTRACT_ADDRESS;
const USDC_CONTRACT_ADDRESS = process.env.USDC_CONTRACT_ADDRESS;
const PROVIDER_URL = process.env.PROVIDER_URL;

export async function processStaking(transactionHash, amount, userWalletAddress) {
  try {
    // Connect to the blockchain
    const provider = new ethers.JsonRpcProvider(PROVIDER_URL);
    
    // Get transaction receipt
    const receipt = await provider.getTransactionReceipt(transactionHash);
    
    if (!receipt || !receipt.status) {
      return { success: false, error: 'Transaction failed or not found' };
    }
    
    // Get transaction
    const transaction = await provider.getTransaction(transactionHash);
    
    // Verify it's interacting with our staking contract
    if (transaction.to.toLowerCase() !== STAKING_CONTRACT_ADDRESS.toLowerCase()) {
      return { success: false, error: 'Transaction is not interacting with the staking contract' };
    }
    
    // Decode the transaction data to verify it's a staking function and the correct amount
    const stakingContract = new ethers.Contract(
      STAKING_CONTRACT_ADDRESS,
      stakingABI,
      provider
    );
    
    // Look for relevant events in the logs
    const stakingEvents = receipt.logs
      .filter(log => log.address.toLowerCase() === STAKING_CONTRACT_ADDRESS.toLowerCase())
      .map(log => {
        try {
          return stakingContract.interface.parseLog(log);
        } catch (e) {
          return null;
        }
      })
      .filter(event => event && event.name === 'StakeReceived');
    
    if (stakingEvents.length === 0) {
      return { success: false, error: 'No staking event found in transaction' };
    }
    
    // Verify the event details
    const stakingEvent = stakingEvents[0];
    const eventStaker = stakingEvent.args.staker.toLowerCase();
    const eventAmount = stakingEvent.args.amount;
    
    if (eventStaker !== userWalletAddress.toLowerCase()) {
      return { success: false, error: 'Staker address does not match user wallet' };
    }
    
    // Convert amounts for comparison (USDC has 6 decimals)
    const expectedAmount = ethers.parseUnits(amount.toString(), 6);
    
    // Compare as strings instead of using .eq()
    if (eventAmount.toString() !== expectedAmount.toString()) {
      return { success: false, error: 'Staked amount does not match required amount' };
    }
    
    return { success: true, transactionHash };
  } catch (error) {
    console.error('Error verifying staking transaction:', error);
    return { success: false, error: 'Failed to verify staking transaction' };
  }
}


export async function processUnstaking(userChallengeId, userId, walletAddress) {
    try {
      // Get user challenge data
      const userChallenge = await prisma.userChallenge.findUnique({
        where: { 
          id: userChallengeId,
          userId
        },
        include: {
          challenge: true
        }
      });
      
      if (!userChallenge) {
        return { success: false, error: 'Challenge not found' };
      }
      
      // Connect to provider
      const provider = new ethers.JsonRpcProvider(PROVIDER_URL);
      
      // Load private key from environment variables (securely stored)
      const privateKey = process.env.STAKING_ADMIN_PRIVATE_KEY;
      if (!privateKey) {
        return { success: false, error: 'Missing contract admin credentials' };
      }
      
      // Create signer
      const signer = new ethers.Wallet(privateKey, provider);
      
      // Initialize contract
      const stakingContract = new ethers.Contract(
        STAKING_CONTRACT_ADDRESS,
        stakingABI,
        signer
      );
      
      // For non-hardcore challenges, call withdrawFromChallenge
      if (!userChallenge.challenge.isHardcore) {
        // Prepare transaction
        const tx = await stakingContract.withdrawFromChallenge(
          userChallenge.id, // Use challenge ID as identifier
          walletAddress, // User's wallet address
          { gasLimit: 300000 }
        );
        
        // Wait for transaction to be mined
        const receipt = await tx.wait();
        
        if (!receipt || !receipt.status) {
          return { success: false, error: 'Transaction failed' };
        }
        
        return { 
          success: true, 
          transactionHash: receipt.hash,
          amount: userChallenge.stakedAmount
        };
      } else {
        return { success: false, error: 'Cannot unstake from hardcore challenges' };
      }
    } catch (error) {
      console.error('Error processing unstaking:', error);
      return { success: false, error: 'Failed to process unstaking' };
    }
  }
  
// Enhanced implementation of processRewardDistribution function
export async function processRewardDistribution(userChallengeId, userId, walletAddress, rewardAmount) {
  try {
    // Get user challenge data
    const userChallenge = await prisma.userChallenge.findUnique({
      where: { 
        id: userChallengeId,
        userId
      },
      include: {
        challenge: true
      }
    });
    
    if (!userChallenge) {
      return { success: false, error: 'Challenge not found' };
    }
    
    // Check if there's already a transaction hash for this challenge
    if (userChallenge.completionTxHash) {
      // Verify if the transaction was successful
      try {
        const provider = new ethers.JsonRpcProvider(PROVIDER_URL);
        const receipt = await provider.getTransactionReceipt(userChallenge.completionTxHash);
        
        if (receipt && receipt.status) {
          return { 
            success: true, 
            transactionHash: userChallenge.completionTxHash,
            alreadyProcessed: true
          };
        }
      } catch (txCheckError) {
        console.error('Error checking existing transaction:', txCheckError);
        // If we can't verify, continue with creating a new transaction
      }
    }
    
    // Connect to provider
    const provider = new ethers.JsonRpcProvider(PROVIDER_URL);
    
    // Load private key from environment variables (securely stored)
    const privateKey = process.env.STAKING_ADMIN_PRIVATE_KEY;
    if (!privateKey) {
      return { success: false, error: 'Missing contract admin credentials' };
    }
    
    // Create signer
    const signer = new ethers.Wallet(privateKey, provider);
    
    // Initialize contract
    const stakingContract = new ethers.Contract(
      STAKING_CONTRACT_ADDRESS,
      stakingABI,
      signer
    );
    
    // Check contract balance to ensure it has enough USDC to pay out
    const usdcContract = new ethers.Contract(
      USDC_CONTRACT_ADDRESS,
      usdcABI,
      provider
    );
    
    const contractBalance = await usdcContract.balanceOf(STAKING_CONTRACT_ADDRESS);
    const requiredAmount = ethers.parseUnits(rewardAmount.toString(), 6); // USDC has 6 decimals
    
    if (contractBalance < requiredAmount) {
      return { success: false, error: 'Insufficient contract balance for reward distribution' };
    }
    
    // Calculate yield percentage in basis points (e.g., 5% = 500 basis points)
    const yieldPercentage = Math.round(userChallenge.challenge.yieldPercentage * 100);
    
    // Add retry logic for transaction
    let attempts = 0;
    const maxAttempts = 3;
    let lastError = null;
    
    while (attempts < maxAttempts) {
      try {
        console.log(`Attempt ${attempts + 1} to complete challenge ${userChallengeId}`);
        
        // Call completeChallenge function
        const tx = await stakingContract.completeChallenge(
          walletAddress, // User's wallet address
          userChallenge.challengeId, // Challenge ID
          yieldPercentage, // Yield in basis points
          { 
            gasLimit: 500000,
            // Increment gas price slightly on retries to help with stuck transactions
            maxFeePerGas: attempts > 0 ? undefined : undefined, // Will use market rate on first try
            maxPriorityFeePerGas: attempts > 0 ? (1000000000 * (attempts + 1)) : undefined // Increment priority fee on retries
          }
        );
        
        console.log(`Transaction submitted: ${tx.hash}`);
        
        // Wait for transaction to be mined
        const receipt = await tx.wait();
        
        if (!receipt || !receipt.status) {
          throw new Error('Transaction failed');
        }
        
        // Find ChallengeCompleted event
        const completeEvent = receipt.logs
          .filter(log => log.address.toLowerCase() === STAKING_CONTRACT_ADDRESS.toLowerCase())
          .map(log => {
            try {
              return stakingContract.interface.parseLog(log);
            } catch (e) {
              return null;
            }
          })
          .filter(event => event && event.name === 'ChallengeCompleted')[0];
        
        if (!completeEvent) {
          throw new Error('No completion event found in transaction');
        }
        
        return { 
          success: true, 
          transactionHash: receipt.hash,
          reward: rewardAmount
        };
      } catch (error) {
        console.error(`Attempt ${attempts + 1} failed:`, error);
        lastError = error;
        attempts++;
        
        // Wait before retrying
        if (attempts < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 5000 * attempts)); // Incremental backoff
        }
      }
    }
    
    return { success: false, error: lastError?.message || 'Failed to process reward distribution after multiple attempts' };
  } catch (error) {
    console.error('Error processing reward distribution:', error);
    return { success: false, error: 'Failed to process reward distribution' };
  }
}

================
File: lib/utils.js
================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

================
File: prisma/schema.prisma
================
// This is your Prisma schema file for ShinoLearn

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id                String            @id @default(uuid())
  walletAddress     String            @unique
  username          String?
  email             String?           @unique
  avatarUrl         String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // User profile data
  nativeLanguage    String?
  learningLanguages UserLanguage[]
  
  // Relationships
  challenges        UserChallenge[]   // Challenges the user is participating in
  createdChallenges Challenge[]       // Challenges created by the user
  aiConversations   AIConversation[]  // History of AI conversations
  progressRecords   ProgressRecord[]  // User's learning progress
  achievements      UserAchievement[]
  notifications     Notification[]
  transactions      Transaction[]
  lessons            LessonCompletion[]

  vocabulary         VocabularyPractice[]
   grammer             GrammarPractice[]
   speaking             SpeakingPractice[]
  speakingSession               SpeakingSession[]
 
  @@index([walletAddress])
}

model UserLanguage {
  id              String          @id @default(uuid())
  userId          String
  languageCode    String          // ISO code (e.g., "en", "jp", "es")
  proficiencyLevel ProficiencyLevel
  startedAt       DateTime        @default(now())
  lastPracticed    DateTime?
  
  // Relationships
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, languageCode])
}

enum ProficiencyLevel {
  BEGINNER
  ELEMENTARY
  INTERMEDIATE
  ADVANCED
  FLUENT
}

// Challenge system
model Challenge {
  id                String          @id @default(uuid())
  title             String
  description       String
  languageCode      String
  proficiencyLevel  ProficiencyLevel
  durationDays      Int
  dailyRequirement  Int             // Minutes of practice required daily
  stakeAmount       Float           // Amount in USDC to stake
  yieldPercentage   Float           // Expected yield percentage
  isHardcore        Boolean         // If true, stake is lost on failure
  maxParticipants   Int?            // Optional max number of participants
  inviteCode        String?         // Optional invite code for private challenges
  creatorId         String
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Smart contract data
  contractAddress   String?
  contractChain     String?         // e.g., "ethereum", "polygon"
  
  // Relationships
  creator           User            @relation(fields: [creatorId], references: [id])
  participants      UserChallenge[]
  lessons           Lesson[]
  
  @@index([languageCode, proficiencyLevel])
  @@index([isActive])
}

model UserChallenge {
  id                String          @id @default(uuid())
  userId            String
  challengeId       String
  startDate         DateTime        @default(now())
  endDate           DateTime?
  stakedAmount      Float           // Actual amount staked (in USDC)
  currentStreak     Int             @default(0)  // Current consecutive days
  longestStreak     Int             @default(0)  // Longest consecutive days
  progressPercentage Float          @default(0)  // 0-100
  status            ChallengeStatus @default(ACTIVE)
  
  // Transaction data
  stakeTxHash       String?         // Transaction hash for staking
  completionTxHash  String?         // Transaction hash for completion/reward
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge         Challenge       @relation(fields: [challengeId], references: [id])
  dailyProgress     DailyProgress[]
  
  @@unique([userId, challengeId])
  @@index([status])
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  FAILED
  WITHDRAWN
}

model DailyProgress {
  id                String          @id @default(uuid())
  userChallengeId   String
  date              DateTime        @default(now())
  minutesPracticed  Int
  completed         Boolean         @default(false)
  
  // Relationships
  userChallenge     UserChallenge   @relation(fields: [userChallengeId], references: [id], onDelete: Cascade)
  
  @@unique([userChallengeId, date])
}

// Learning content
model Lesson {
  id                String          @id @default(uuid())
  title             String
  description       String
  challengeId       String?
  languageCode      String
  proficiencyLevel  ProficiencyLevel
  estimatedMinutes  Int
  content           Json            // Structured lesson content
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relationships
  challenge         Challenge?      @relation(fields: [challengeId], references: [id])
  completions       LessonCompletion[]
  
  @@index([languageCode, proficiencyLevel])
}

model LessonCompletion {
  id                String          @id @default(uuid())
  userId            String
  lessonId          String
  completedAt       DateTime        @default(now())
  timeSpentMinutes  Int
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade) 
  lesson            Lesson          @relation(fields: [lessonId], references: [id])
  
  @@unique([userId, lessonId])
}

// AI Conversation system
model AIConversation {
  id                String          @id @default(uuid())
  userId            String
  languageCode      String
  avatarType        String          // Type of AI character/avatar used
  startedAt         DateTime        @default(now())
  endedAt           DateTime?
  durationMinutes   Int?
  userChallengeId   String?         // Optional link to a challenge
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages          ConversationMessage[]
  evaluations       ConversationEvaluation?
  
  @@index([userId, startedAt])
}

model ConversationMessage {
  id                String          @id @default(uuid())
  conversationId    String
  sender            MessageSender
  content           String          // Text content
  audioUrl          String?         // URL to audio recording
  timestamp         DateTime        @default(now())
  
  // Relationships
  conversation      AIConversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId, timestamp])
}

enum MessageSender {
  USER
  AI
}

model ConversationEvaluation {
  id                String          @id @default(uuid())
  conversationId    String          @unique
  grammarScore      Float           // 0-100
  vocabularyScore   Float           // 0-100
  pronunciationScore Float          // 0-100
  fluencyScore      Float           // 0-100
  overallScore      Float           // 0-100
  feedback          String          // Detailed feedback
  evaluatedAt       DateTime        @default(now())
  
  // Relationships
  conversation      AIConversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}

// Progress tracking
model ProgressRecord {
  id                String          @id @default(uuid())
  userId            String
  languageCode      String
  recordDate        DateTime        @default(now())
  vocabularySize    Int?            // Estimated vocabulary size
  grammarAccuracy   Float?          // 0-100
  speakingFluency   Float?          // 0-100
  listeningComprehension Float?     // 0-100
  overallLevel      ProficiencyLevel?
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, languageCode, recordDate])
}

// Achievement system
model Achievement {
  id                String          @id @default(uuid())
  name              String          @unique
  description       String
  badgeUrl          String
  achievementType   AchievementType
  threshold         Int             // Value needed to earn achievement
  
  // Relationships
  userAchievements  UserAchievement[]
}

enum AchievementType {
  STREAK_DAYS
  CONVERSATION_COUNT
  VOCABULARY_SIZE
  CHALLENGE_COMPLETED
  PRACTICE_HOURS
  GRAMMAR_PRACTICE
}

model UserAchievement {
  id                String          @id @default(uuid())
  userId            String
  achievementId     String
  earnedAt          DateTime        @default(now())
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement       Achievement     @relation(fields: [achievementId], references: [id])
  
  @@unique([userId, achievementId])
}

// Notification system
model Notification {
  id                String          @id @default(uuid())
  userId            String
  type              NotificationType
  title             String
  message           String
  read              Boolean         @default(false)
  createdAt         DateTime        @default(now())
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
}

enum NotificationType {
  CHALLENGE_REMINDER
  STREAK_WARNING
  ACHIEVEMENT_EARNED
  CHALLENGE_COMPLETED
  STAKE_CONFIRMED
  REWARD_DISTRIBUTED
  CHALLENGE_CREATED
  CHALLENGE_WITHDRAWN
}

// Financial transactions
model Transaction {
  id                String          @id @default(uuid())
  userId            String
  transactionType   TransactionType
  amount            Float
  currency          String          // e.g., "USDC"
  txHash            String?         // Blockchain transaction hash
  status            TransactionStatus
  createdAt         DateTime        @default(now())
  completedAt       DateTime?
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, transactionType])
  @@index([txHash])
}

enum TransactionType {
  STAKE
  UNSTAKE
  REWARD
  YIELD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model VocabularyPractice {
  id                String          @id @default(uuid())
  userId            String
  languageCode      String
  proficiencyLevel  ProficiencyLevel
  score             Int
  totalQuestions    Int
  percentageCorrect Int
  userChallengeId   String?
  completedAt       DateTime        @default(now())
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, languageCode])
  @@index([completedAt])
}

// Grammar Practice module
model GrammarPractice {
  id                String          @id @default(uuid())
  userId            String
  languageCode      String
  proficiencyLevel  ProficiencyLevel
  score             Int
  totalQuestions    Int
  percentageCorrect Int
  grammarConcepts   String?         // Comma-separated list of grammar concepts
  userChallengeId   String?
  completedAt       DateTime        @default(now())
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, languageCode])
  @@index([completedAt])
}

// Speaking Practice module
model SpeakingPractice {
  id                String          @id @default(uuid())
  userId            String
  languageCode      String
  proficiencyLevel  ProficiencyLevel
  pronunciationScore Int
  fluencyScore      Int
  accuracyScore     Int
  overallScore      Int
  transcription     String?         @db.Text
  prompt            String?
  durationSeconds   Int             @default(0)
  audioUrl          String?
  userChallengeId   String?
  completedAt       DateTime        @default(now())
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, languageCode])
  @@index([completedAt])
}

// Speaking Session with Ultravox
model SpeakingSession {
  id                String          @id @default(uuid())
  userId            String
  languageCode      String
  proficiencyLevel  ProficiencyLevel
  ultravoxCallId    String
  topic             String?
  userChallengeId   String?
  startedAt         DateTime        @default(now())
  endedAt           DateTime?
  durationSeconds   Int?
  status            SpeakingSessionStatus @default(ACTIVE)
  feedback          Json?           // Structured feedback from AI
  
  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, languageCode])
  @@index([ultravoxCallId])
}

enum SpeakingSessionStatus {
  ACTIVE
  COMPLETED
  FAILED
}



================================================================
End of Codebase
================================================================
